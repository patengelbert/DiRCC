	component dircc_routing is
		port (
			clk_clk                     : in  std_logic                     := 'X';             -- clk
			input_east_data             : in  std_logic_vector(31 downto 0) := (others => 'X'); -- data
			input_east_valid            : in  std_logic                     := 'X';             -- valid
			input_east_ready            : out std_logic;                                        -- ready
			input_east_startofpacket    : in  std_logic                     := 'X';             -- startofpacket
			input_east_endofpacket      : in  std_logic                     := 'X';             -- endofpacket
			input_east_empty            : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- empty
			input_north_data            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- data
			input_north_valid           : in  std_logic                     := 'X';             -- valid
			input_north_ready           : out std_logic;                                        -- ready
			input_north_startofpacket   : in  std_logic                     := 'X';             -- startofpacket
			input_north_endofpacket     : in  std_logic                     := 'X';             -- endofpacket
			input_north_empty           : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- empty
			input_here_data             : in  std_logic_vector(31 downto 0) := (others => 'X'); -- data
			input_here_valid            : in  std_logic                     := 'X';             -- valid
			input_here_ready            : out std_logic;                                        -- ready
			input_here_startofpacket    : in  std_logic                     := 'X';             -- startofpacket
			input_here_endofpacket      : in  std_logic                     := 'X';             -- endofpacket
			input_here_empty            : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- empty
			input_west_data             : in  std_logic_vector(31 downto 0) := (others => 'X'); -- data
			input_west_valid            : in  std_logic                     := 'X';             -- valid
			input_west_ready            : out std_logic;                                        -- ready
			input_west_startofpacket    : in  std_logic                     := 'X';             -- startofpacket
			input_west_endofpacket      : in  std_logic                     := 'X';             -- endofpacket
			input_west_empty            : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- empty
			input_south_1_data          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- data
			input_south_1_valid         : in  std_logic                     := 'X';             -- valid
			input_south_1_ready         : out std_logic;                                        -- ready
			input_south_1_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			input_south_1_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			input_south_1_empty         : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- empty
			output_west_data            : out std_logic_vector(31 downto 0);                    -- data
			output_west_valid           : out std_logic;                                        -- valid
			output_west_ready           : in  std_logic                     := 'X';             -- ready
			output_west_startofpacket   : out std_logic;                                        -- startofpacket
			output_west_endofpacket     : out std_logic;                                        -- endofpacket
			output_west_empty           : out std_logic_vector(1 downto 0);                     -- empty
			output_north_data           : out std_logic_vector(31 downto 0);                    -- data
			output_north_valid          : out std_logic;                                        -- valid
			output_north_ready          : in  std_logic                     := 'X';             -- ready
			output_north_startofpacket  : out std_logic;                                        -- startofpacket
			output_north_endofpacket    : out std_logic;                                        -- endofpacket
			output_north_empty          : out std_logic_vector(1 downto 0);                     -- empty
			output_here_data            : out std_logic_vector(31 downto 0);                    -- data
			output_here_valid           : out std_logic;                                        -- valid
			output_here_ready           : in  std_logic                     := 'X';             -- ready
			output_here_startofpacket   : out std_logic;                                        -- startofpacket
			output_here_endofpacket     : out std_logic;                                        -- endofpacket
			output_here_empty           : out std_logic_vector(1 downto 0);                     -- empty
			output_east_data            : out std_logic_vector(31 downto 0);                    -- data
			output_east_valid           : out std_logic;                                        -- valid
			output_east_ready           : in  std_logic                     := 'X';             -- ready
			output_east_startofpacket   : out std_logic;                                        -- startofpacket
			output_east_endofpacket     : out std_logic;                                        -- endofpacket
			output_east_empty           : out std_logic_vector(1 downto 0);                     -- empty
			output_south_data           : out std_logic_vector(31 downto 0);                    -- data
			output_south_valid          : out std_logic;                                        -- valid
			output_south_ready          : in  std_logic                     := 'X';             -- ready
			output_south_startofpacket  : out std_logic;                                        -- startofpacket
			output_south_endofpacket    : out std_logic;                                        -- endofpacket
			output_south_empty          : out std_logic_vector(1 downto 0);                     -- empty
			reset_reset_n               : in  std_logic                     := 'X';             -- reset_n
			address_address             : in  std_logic_vector(31 downto 0) := (others => 'X')  -- address
		);
	end component dircc_routing;

