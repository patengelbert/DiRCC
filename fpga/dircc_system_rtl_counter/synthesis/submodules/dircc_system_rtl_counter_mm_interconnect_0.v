// dircc_system_rtl_counter_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.1 203

`timescale 1 ps / 1 ps
module dircc_system_rtl_counter_mm_interconnect_0 (
		input  wire [11:0] HPS_h2f_axi_master_awid,                                        //                                       HPS_h2f_axi_master.awid
		input  wire [29:0] HPS_h2f_axi_master_awaddr,                                      //                                                         .awaddr
		input  wire [3:0]  HPS_h2f_axi_master_awlen,                                       //                                                         .awlen
		input  wire [2:0]  HPS_h2f_axi_master_awsize,                                      //                                                         .awsize
		input  wire [1:0]  HPS_h2f_axi_master_awburst,                                     //                                                         .awburst
		input  wire [1:0]  HPS_h2f_axi_master_awlock,                                      //                                                         .awlock
		input  wire [3:0]  HPS_h2f_axi_master_awcache,                                     //                                                         .awcache
		input  wire [2:0]  HPS_h2f_axi_master_awprot,                                      //                                                         .awprot
		input  wire        HPS_h2f_axi_master_awvalid,                                     //                                                         .awvalid
		output wire        HPS_h2f_axi_master_awready,                                     //                                                         .awready
		input  wire [11:0] HPS_h2f_axi_master_wid,                                         //                                                         .wid
		input  wire [31:0] HPS_h2f_axi_master_wdata,                                       //                                                         .wdata
		input  wire [3:0]  HPS_h2f_axi_master_wstrb,                                       //                                                         .wstrb
		input  wire        HPS_h2f_axi_master_wlast,                                       //                                                         .wlast
		input  wire        HPS_h2f_axi_master_wvalid,                                      //                                                         .wvalid
		output wire        HPS_h2f_axi_master_wready,                                      //                                                         .wready
		output wire [11:0] HPS_h2f_axi_master_bid,                                         //                                                         .bid
		output wire [1:0]  HPS_h2f_axi_master_bresp,                                       //                                                         .bresp
		output wire        HPS_h2f_axi_master_bvalid,                                      //                                                         .bvalid
		input  wire        HPS_h2f_axi_master_bready,                                      //                                                         .bready
		input  wire [11:0] HPS_h2f_axi_master_arid,                                        //                                                         .arid
		input  wire [29:0] HPS_h2f_axi_master_araddr,                                      //                                                         .araddr
		input  wire [3:0]  HPS_h2f_axi_master_arlen,                                       //                                                         .arlen
		input  wire [2:0]  HPS_h2f_axi_master_arsize,                                      //                                                         .arsize
		input  wire [1:0]  HPS_h2f_axi_master_arburst,                                     //                                                         .arburst
		input  wire [1:0]  HPS_h2f_axi_master_arlock,                                      //                                                         .arlock
		input  wire [3:0]  HPS_h2f_axi_master_arcache,                                     //                                                         .arcache
		input  wire [2:0]  HPS_h2f_axi_master_arprot,                                      //                                                         .arprot
		input  wire        HPS_h2f_axi_master_arvalid,                                     //                                                         .arvalid
		output wire        HPS_h2f_axi_master_arready,                                     //                                                         .arready
		output wire [11:0] HPS_h2f_axi_master_rid,                                         //                                                         .rid
		output wire [31:0] HPS_h2f_axi_master_rdata,                                       //                                                         .rdata
		output wire [1:0]  HPS_h2f_axi_master_rresp,                                       //                                                         .rresp
		output wire        HPS_h2f_axi_master_rlast,                                       //                                                         .rlast
		output wire        HPS_h2f_axi_master_rvalid,                                      //                                                         .rvalid
		input  wire        HPS_h2f_axi_master_rready,                                      //                                                         .rready
		input  wire        clk_0_clk_clk,                                                  //                                                clk_0_clk.clk
		input  wire        HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire        node_0_reset_reset_bridge_in_reset_reset,                       //                       node_0_reset_reset_bridge_in_reset.reset
		input  wire        terminal_north_0_reset_reset_bridge_in_reset_reset,             //             terminal_north_0_reset_reset_bridge_in_reset.reset
		output wire [14:0] node_0_processing_mem_address,                                  //                                    node_0_processing_mem.address
		output wire        node_0_processing_mem_write,                                    //                                                         .write
		input  wire [15:0] node_0_processing_mem_readdata,                                 //                                                         .readdata
		output wire [15:0] node_0_processing_mem_writedata,                                //                                                         .writedata
		output wire [14:0] node_1_processing_mem_address,                                  //                                    node_1_processing_mem.address
		output wire        node_1_processing_mem_write,                                    //                                                         .write
		input  wire [15:0] node_1_processing_mem_readdata,                                 //                                                         .readdata
		output wire [15:0] node_1_processing_mem_writedata,                                //                                                         .writedata
		output wire [14:0] node_65536_processing_mem_address,                              //                                node_65536_processing_mem.address
		output wire        node_65536_processing_mem_write,                                //                                                         .write
		input  wire [15:0] node_65536_processing_mem_readdata,                             //                                                         .readdata
		output wire [15:0] node_65536_processing_mem_writedata,                            //                                                         .writedata
		output wire [14:0] node_65537_processing_mem_address,                              //                                node_65537_processing_mem.address
		output wire        node_65537_processing_mem_write,                                //                                                         .write
		input  wire [15:0] node_65537_processing_mem_readdata,                             //                                                         .readdata
		output wire [15:0] node_65537_processing_mem_writedata,                            //                                                         .writedata
		output wire [0:0]  terminal_east_0_status_address,                                 //                                   terminal_east_0_status.address
		output wire        terminal_east_0_status_read,                                    //                                                         .read
		input  wire [15:0] terminal_east_0_status_readdata,                                //                                                         .readdata
		output wire [0:0]  terminal_east_1_status_address,                                 //                                   terminal_east_1_status.address
		output wire        terminal_east_1_status_read,                                    //                                                         .read
		input  wire [15:0] terminal_east_1_status_readdata,                                //                                                         .readdata
		output wire [0:0]  terminal_north_0_status_address,                                //                                  terminal_north_0_status.address
		output wire        terminal_north_0_status_read,                                   //                                                         .read
		input  wire [15:0] terminal_north_0_status_readdata,                               //                                                         .readdata
		output wire [0:0]  terminal_north_1_status_address,                                //                                  terminal_north_1_status.address
		output wire        terminal_north_1_status_read,                                   //                                                         .read
		input  wire [15:0] terminal_north_1_status_readdata,                               //                                                         .readdata
		output wire [0:0]  terminal_south_0_status_address,                                //                                  terminal_south_0_status.address
		output wire        terminal_south_0_status_read,                                   //                                                         .read
		input  wire [15:0] terminal_south_0_status_readdata,                               //                                                         .readdata
		output wire [0:0]  terminal_south_1_status_address,                                //                                  terminal_south_1_status.address
		output wire        terminal_south_1_status_read,                                   //                                                         .read
		input  wire [15:0] terminal_south_1_status_readdata,                               //                                                         .readdata
		output wire [0:0]  terminal_west_0_status_address,                                 //                                   terminal_west_0_status.address
		output wire        terminal_west_0_status_read,                                    //                                                         .read
		input  wire [15:0] terminal_west_0_status_readdata,                                //                                                         .readdata
		output wire [0:0]  terminal_west_1_status_address,                                 //                                   terminal_west_1_status.address
		output wire        terminal_west_1_status_read,                                    //                                                         .read
		input  wire [15:0] terminal_west_1_status_readdata                                 //                                                         .readdata
	);

	wire   [15:0] node_0_processing_mem_agent_m0_readdata;                       // node_0_processing_mem_translator:uav_readdata -> node_0_processing_mem_agent:m0_readdata
	wire          node_0_processing_mem_agent_m0_waitrequest;                    // node_0_processing_mem_translator:uav_waitrequest -> node_0_processing_mem_agent:m0_waitrequest
	wire          node_0_processing_mem_agent_m0_debugaccess;                    // node_0_processing_mem_agent:m0_debugaccess -> node_0_processing_mem_translator:uav_debugaccess
	wire   [29:0] node_0_processing_mem_agent_m0_address;                        // node_0_processing_mem_agent:m0_address -> node_0_processing_mem_translator:uav_address
	wire    [1:0] node_0_processing_mem_agent_m0_byteenable;                     // node_0_processing_mem_agent:m0_byteenable -> node_0_processing_mem_translator:uav_byteenable
	wire          node_0_processing_mem_agent_m0_read;                           // node_0_processing_mem_agent:m0_read -> node_0_processing_mem_translator:uav_read
	wire          node_0_processing_mem_agent_m0_readdatavalid;                  // node_0_processing_mem_translator:uav_readdatavalid -> node_0_processing_mem_agent:m0_readdatavalid
	wire          node_0_processing_mem_agent_m0_lock;                           // node_0_processing_mem_agent:m0_lock -> node_0_processing_mem_translator:uav_lock
	wire   [15:0] node_0_processing_mem_agent_m0_writedata;                      // node_0_processing_mem_agent:m0_writedata -> node_0_processing_mem_translator:uav_writedata
	wire          node_0_processing_mem_agent_m0_write;                          // node_0_processing_mem_agent:m0_write -> node_0_processing_mem_translator:uav_write
	wire    [1:0] node_0_processing_mem_agent_m0_burstcount;                     // node_0_processing_mem_agent:m0_burstcount -> node_0_processing_mem_translator:uav_burstcount
	wire          node_0_processing_mem_agent_rf_source_valid;                   // node_0_processing_mem_agent:rf_source_valid -> node_0_processing_mem_agent_rsp_fifo:in_valid
	wire  [109:0] node_0_processing_mem_agent_rf_source_data;                    // node_0_processing_mem_agent:rf_source_data -> node_0_processing_mem_agent_rsp_fifo:in_data
	wire          node_0_processing_mem_agent_rf_source_ready;                   // node_0_processing_mem_agent_rsp_fifo:in_ready -> node_0_processing_mem_agent:rf_source_ready
	wire          node_0_processing_mem_agent_rf_source_startofpacket;           // node_0_processing_mem_agent:rf_source_startofpacket -> node_0_processing_mem_agent_rsp_fifo:in_startofpacket
	wire          node_0_processing_mem_agent_rf_source_endofpacket;             // node_0_processing_mem_agent:rf_source_endofpacket -> node_0_processing_mem_agent_rsp_fifo:in_endofpacket
	wire          node_0_processing_mem_agent_rsp_fifo_out_valid;                // node_0_processing_mem_agent_rsp_fifo:out_valid -> node_0_processing_mem_agent:rf_sink_valid
	wire  [109:0] node_0_processing_mem_agent_rsp_fifo_out_data;                 // node_0_processing_mem_agent_rsp_fifo:out_data -> node_0_processing_mem_agent:rf_sink_data
	wire          node_0_processing_mem_agent_rsp_fifo_out_ready;                // node_0_processing_mem_agent:rf_sink_ready -> node_0_processing_mem_agent_rsp_fifo:out_ready
	wire          node_0_processing_mem_agent_rsp_fifo_out_startofpacket;        // node_0_processing_mem_agent_rsp_fifo:out_startofpacket -> node_0_processing_mem_agent:rf_sink_startofpacket
	wire          node_0_processing_mem_agent_rsp_fifo_out_endofpacket;          // node_0_processing_mem_agent_rsp_fifo:out_endofpacket -> node_0_processing_mem_agent:rf_sink_endofpacket
	wire          node_0_processing_mem_agent_rdata_fifo_src_valid;              // node_0_processing_mem_agent:rdata_fifo_src_valid -> node_0_processing_mem_agent_rdata_fifo:in_valid
	wire   [17:0] node_0_processing_mem_agent_rdata_fifo_src_data;               // node_0_processing_mem_agent:rdata_fifo_src_data -> node_0_processing_mem_agent_rdata_fifo:in_data
	wire          node_0_processing_mem_agent_rdata_fifo_src_ready;              // node_0_processing_mem_agent_rdata_fifo:in_ready -> node_0_processing_mem_agent:rdata_fifo_src_ready
	wire   [15:0] node_1_processing_mem_agent_m0_readdata;                       // node_1_processing_mem_translator:uav_readdata -> node_1_processing_mem_agent:m0_readdata
	wire          node_1_processing_mem_agent_m0_waitrequest;                    // node_1_processing_mem_translator:uav_waitrequest -> node_1_processing_mem_agent:m0_waitrequest
	wire          node_1_processing_mem_agent_m0_debugaccess;                    // node_1_processing_mem_agent:m0_debugaccess -> node_1_processing_mem_translator:uav_debugaccess
	wire   [29:0] node_1_processing_mem_agent_m0_address;                        // node_1_processing_mem_agent:m0_address -> node_1_processing_mem_translator:uav_address
	wire    [1:0] node_1_processing_mem_agent_m0_byteenable;                     // node_1_processing_mem_agent:m0_byteenable -> node_1_processing_mem_translator:uav_byteenable
	wire          node_1_processing_mem_agent_m0_read;                           // node_1_processing_mem_agent:m0_read -> node_1_processing_mem_translator:uav_read
	wire          node_1_processing_mem_agent_m0_readdatavalid;                  // node_1_processing_mem_translator:uav_readdatavalid -> node_1_processing_mem_agent:m0_readdatavalid
	wire          node_1_processing_mem_agent_m0_lock;                           // node_1_processing_mem_agent:m0_lock -> node_1_processing_mem_translator:uav_lock
	wire   [15:0] node_1_processing_mem_agent_m0_writedata;                      // node_1_processing_mem_agent:m0_writedata -> node_1_processing_mem_translator:uav_writedata
	wire          node_1_processing_mem_agent_m0_write;                          // node_1_processing_mem_agent:m0_write -> node_1_processing_mem_translator:uav_write
	wire    [1:0] node_1_processing_mem_agent_m0_burstcount;                     // node_1_processing_mem_agent:m0_burstcount -> node_1_processing_mem_translator:uav_burstcount
	wire          node_1_processing_mem_agent_rf_source_valid;                   // node_1_processing_mem_agent:rf_source_valid -> node_1_processing_mem_agent_rsp_fifo:in_valid
	wire  [109:0] node_1_processing_mem_agent_rf_source_data;                    // node_1_processing_mem_agent:rf_source_data -> node_1_processing_mem_agent_rsp_fifo:in_data
	wire          node_1_processing_mem_agent_rf_source_ready;                   // node_1_processing_mem_agent_rsp_fifo:in_ready -> node_1_processing_mem_agent:rf_source_ready
	wire          node_1_processing_mem_agent_rf_source_startofpacket;           // node_1_processing_mem_agent:rf_source_startofpacket -> node_1_processing_mem_agent_rsp_fifo:in_startofpacket
	wire          node_1_processing_mem_agent_rf_source_endofpacket;             // node_1_processing_mem_agent:rf_source_endofpacket -> node_1_processing_mem_agent_rsp_fifo:in_endofpacket
	wire          node_1_processing_mem_agent_rsp_fifo_out_valid;                // node_1_processing_mem_agent_rsp_fifo:out_valid -> node_1_processing_mem_agent:rf_sink_valid
	wire  [109:0] node_1_processing_mem_agent_rsp_fifo_out_data;                 // node_1_processing_mem_agent_rsp_fifo:out_data -> node_1_processing_mem_agent:rf_sink_data
	wire          node_1_processing_mem_agent_rsp_fifo_out_ready;                // node_1_processing_mem_agent:rf_sink_ready -> node_1_processing_mem_agent_rsp_fifo:out_ready
	wire          node_1_processing_mem_agent_rsp_fifo_out_startofpacket;        // node_1_processing_mem_agent_rsp_fifo:out_startofpacket -> node_1_processing_mem_agent:rf_sink_startofpacket
	wire          node_1_processing_mem_agent_rsp_fifo_out_endofpacket;          // node_1_processing_mem_agent_rsp_fifo:out_endofpacket -> node_1_processing_mem_agent:rf_sink_endofpacket
	wire          node_1_processing_mem_agent_rdata_fifo_src_valid;              // node_1_processing_mem_agent:rdata_fifo_src_valid -> node_1_processing_mem_agent_rdata_fifo:in_valid
	wire   [17:0] node_1_processing_mem_agent_rdata_fifo_src_data;               // node_1_processing_mem_agent:rdata_fifo_src_data -> node_1_processing_mem_agent_rdata_fifo:in_data
	wire          node_1_processing_mem_agent_rdata_fifo_src_ready;              // node_1_processing_mem_agent_rdata_fifo:in_ready -> node_1_processing_mem_agent:rdata_fifo_src_ready
	wire   [15:0] node_65536_processing_mem_agent_m0_readdata;                   // node_65536_processing_mem_translator:uav_readdata -> node_65536_processing_mem_agent:m0_readdata
	wire          node_65536_processing_mem_agent_m0_waitrequest;                // node_65536_processing_mem_translator:uav_waitrequest -> node_65536_processing_mem_agent:m0_waitrequest
	wire          node_65536_processing_mem_agent_m0_debugaccess;                // node_65536_processing_mem_agent:m0_debugaccess -> node_65536_processing_mem_translator:uav_debugaccess
	wire   [29:0] node_65536_processing_mem_agent_m0_address;                    // node_65536_processing_mem_agent:m0_address -> node_65536_processing_mem_translator:uav_address
	wire    [1:0] node_65536_processing_mem_agent_m0_byteenable;                 // node_65536_processing_mem_agent:m0_byteenable -> node_65536_processing_mem_translator:uav_byteenable
	wire          node_65536_processing_mem_agent_m0_read;                       // node_65536_processing_mem_agent:m0_read -> node_65536_processing_mem_translator:uav_read
	wire          node_65536_processing_mem_agent_m0_readdatavalid;              // node_65536_processing_mem_translator:uav_readdatavalid -> node_65536_processing_mem_agent:m0_readdatavalid
	wire          node_65536_processing_mem_agent_m0_lock;                       // node_65536_processing_mem_agent:m0_lock -> node_65536_processing_mem_translator:uav_lock
	wire   [15:0] node_65536_processing_mem_agent_m0_writedata;                  // node_65536_processing_mem_agent:m0_writedata -> node_65536_processing_mem_translator:uav_writedata
	wire          node_65536_processing_mem_agent_m0_write;                      // node_65536_processing_mem_agent:m0_write -> node_65536_processing_mem_translator:uav_write
	wire    [1:0] node_65536_processing_mem_agent_m0_burstcount;                 // node_65536_processing_mem_agent:m0_burstcount -> node_65536_processing_mem_translator:uav_burstcount
	wire          node_65536_processing_mem_agent_rf_source_valid;               // node_65536_processing_mem_agent:rf_source_valid -> node_65536_processing_mem_agent_rsp_fifo:in_valid
	wire  [109:0] node_65536_processing_mem_agent_rf_source_data;                // node_65536_processing_mem_agent:rf_source_data -> node_65536_processing_mem_agent_rsp_fifo:in_data
	wire          node_65536_processing_mem_agent_rf_source_ready;               // node_65536_processing_mem_agent_rsp_fifo:in_ready -> node_65536_processing_mem_agent:rf_source_ready
	wire          node_65536_processing_mem_agent_rf_source_startofpacket;       // node_65536_processing_mem_agent:rf_source_startofpacket -> node_65536_processing_mem_agent_rsp_fifo:in_startofpacket
	wire          node_65536_processing_mem_agent_rf_source_endofpacket;         // node_65536_processing_mem_agent:rf_source_endofpacket -> node_65536_processing_mem_agent_rsp_fifo:in_endofpacket
	wire          node_65536_processing_mem_agent_rsp_fifo_out_valid;            // node_65536_processing_mem_agent_rsp_fifo:out_valid -> node_65536_processing_mem_agent:rf_sink_valid
	wire  [109:0] node_65536_processing_mem_agent_rsp_fifo_out_data;             // node_65536_processing_mem_agent_rsp_fifo:out_data -> node_65536_processing_mem_agent:rf_sink_data
	wire          node_65536_processing_mem_agent_rsp_fifo_out_ready;            // node_65536_processing_mem_agent:rf_sink_ready -> node_65536_processing_mem_agent_rsp_fifo:out_ready
	wire          node_65536_processing_mem_agent_rsp_fifo_out_startofpacket;    // node_65536_processing_mem_agent_rsp_fifo:out_startofpacket -> node_65536_processing_mem_agent:rf_sink_startofpacket
	wire          node_65536_processing_mem_agent_rsp_fifo_out_endofpacket;      // node_65536_processing_mem_agent_rsp_fifo:out_endofpacket -> node_65536_processing_mem_agent:rf_sink_endofpacket
	wire          node_65536_processing_mem_agent_rdata_fifo_src_valid;          // node_65536_processing_mem_agent:rdata_fifo_src_valid -> node_65536_processing_mem_agent_rdata_fifo:in_valid
	wire   [17:0] node_65536_processing_mem_agent_rdata_fifo_src_data;           // node_65536_processing_mem_agent:rdata_fifo_src_data -> node_65536_processing_mem_agent_rdata_fifo:in_data
	wire          node_65536_processing_mem_agent_rdata_fifo_src_ready;          // node_65536_processing_mem_agent_rdata_fifo:in_ready -> node_65536_processing_mem_agent:rdata_fifo_src_ready
	wire   [15:0] node_65537_processing_mem_agent_m0_readdata;                   // node_65537_processing_mem_translator:uav_readdata -> node_65537_processing_mem_agent:m0_readdata
	wire          node_65537_processing_mem_agent_m0_waitrequest;                // node_65537_processing_mem_translator:uav_waitrequest -> node_65537_processing_mem_agent:m0_waitrequest
	wire          node_65537_processing_mem_agent_m0_debugaccess;                // node_65537_processing_mem_agent:m0_debugaccess -> node_65537_processing_mem_translator:uav_debugaccess
	wire   [29:0] node_65537_processing_mem_agent_m0_address;                    // node_65537_processing_mem_agent:m0_address -> node_65537_processing_mem_translator:uav_address
	wire    [1:0] node_65537_processing_mem_agent_m0_byteenable;                 // node_65537_processing_mem_agent:m0_byteenable -> node_65537_processing_mem_translator:uav_byteenable
	wire          node_65537_processing_mem_agent_m0_read;                       // node_65537_processing_mem_agent:m0_read -> node_65537_processing_mem_translator:uav_read
	wire          node_65537_processing_mem_agent_m0_readdatavalid;              // node_65537_processing_mem_translator:uav_readdatavalid -> node_65537_processing_mem_agent:m0_readdatavalid
	wire          node_65537_processing_mem_agent_m0_lock;                       // node_65537_processing_mem_agent:m0_lock -> node_65537_processing_mem_translator:uav_lock
	wire   [15:0] node_65537_processing_mem_agent_m0_writedata;                  // node_65537_processing_mem_agent:m0_writedata -> node_65537_processing_mem_translator:uav_writedata
	wire          node_65537_processing_mem_agent_m0_write;                      // node_65537_processing_mem_agent:m0_write -> node_65537_processing_mem_translator:uav_write
	wire    [1:0] node_65537_processing_mem_agent_m0_burstcount;                 // node_65537_processing_mem_agent:m0_burstcount -> node_65537_processing_mem_translator:uav_burstcount
	wire          node_65537_processing_mem_agent_rf_source_valid;               // node_65537_processing_mem_agent:rf_source_valid -> node_65537_processing_mem_agent_rsp_fifo:in_valid
	wire  [109:0] node_65537_processing_mem_agent_rf_source_data;                // node_65537_processing_mem_agent:rf_source_data -> node_65537_processing_mem_agent_rsp_fifo:in_data
	wire          node_65537_processing_mem_agent_rf_source_ready;               // node_65537_processing_mem_agent_rsp_fifo:in_ready -> node_65537_processing_mem_agent:rf_source_ready
	wire          node_65537_processing_mem_agent_rf_source_startofpacket;       // node_65537_processing_mem_agent:rf_source_startofpacket -> node_65537_processing_mem_agent_rsp_fifo:in_startofpacket
	wire          node_65537_processing_mem_agent_rf_source_endofpacket;         // node_65537_processing_mem_agent:rf_source_endofpacket -> node_65537_processing_mem_agent_rsp_fifo:in_endofpacket
	wire          node_65537_processing_mem_agent_rsp_fifo_out_valid;            // node_65537_processing_mem_agent_rsp_fifo:out_valid -> node_65537_processing_mem_agent:rf_sink_valid
	wire  [109:0] node_65537_processing_mem_agent_rsp_fifo_out_data;             // node_65537_processing_mem_agent_rsp_fifo:out_data -> node_65537_processing_mem_agent:rf_sink_data
	wire          node_65537_processing_mem_agent_rsp_fifo_out_ready;            // node_65537_processing_mem_agent:rf_sink_ready -> node_65537_processing_mem_agent_rsp_fifo:out_ready
	wire          node_65537_processing_mem_agent_rsp_fifo_out_startofpacket;    // node_65537_processing_mem_agent_rsp_fifo:out_startofpacket -> node_65537_processing_mem_agent:rf_sink_startofpacket
	wire          node_65537_processing_mem_agent_rsp_fifo_out_endofpacket;      // node_65537_processing_mem_agent_rsp_fifo:out_endofpacket -> node_65537_processing_mem_agent:rf_sink_endofpacket
	wire          node_65537_processing_mem_agent_rdata_fifo_src_valid;          // node_65537_processing_mem_agent:rdata_fifo_src_valid -> node_65537_processing_mem_agent_rdata_fifo:in_valid
	wire   [17:0] node_65537_processing_mem_agent_rdata_fifo_src_data;           // node_65537_processing_mem_agent:rdata_fifo_src_data -> node_65537_processing_mem_agent_rdata_fifo:in_data
	wire          node_65537_processing_mem_agent_rdata_fifo_src_ready;          // node_65537_processing_mem_agent_rdata_fifo:in_ready -> node_65537_processing_mem_agent:rdata_fifo_src_ready
	wire   [15:0] terminal_north_0_status_agent_m0_readdata;                     // terminal_north_0_status_translator:uav_readdata -> terminal_north_0_status_agent:m0_readdata
	wire          terminal_north_0_status_agent_m0_waitrequest;                  // terminal_north_0_status_translator:uav_waitrequest -> terminal_north_0_status_agent:m0_waitrequest
	wire          terminal_north_0_status_agent_m0_debugaccess;                  // terminal_north_0_status_agent:m0_debugaccess -> terminal_north_0_status_translator:uav_debugaccess
	wire   [29:0] terminal_north_0_status_agent_m0_address;                      // terminal_north_0_status_agent:m0_address -> terminal_north_0_status_translator:uav_address
	wire    [1:0] terminal_north_0_status_agent_m0_byteenable;                   // terminal_north_0_status_agent:m0_byteenable -> terminal_north_0_status_translator:uav_byteenable
	wire          terminal_north_0_status_agent_m0_read;                         // terminal_north_0_status_agent:m0_read -> terminal_north_0_status_translator:uav_read
	wire          terminal_north_0_status_agent_m0_readdatavalid;                // terminal_north_0_status_translator:uav_readdatavalid -> terminal_north_0_status_agent:m0_readdatavalid
	wire          terminal_north_0_status_agent_m0_lock;                         // terminal_north_0_status_agent:m0_lock -> terminal_north_0_status_translator:uav_lock
	wire   [15:0] terminal_north_0_status_agent_m0_writedata;                    // terminal_north_0_status_agent:m0_writedata -> terminal_north_0_status_translator:uav_writedata
	wire          terminal_north_0_status_agent_m0_write;                        // terminal_north_0_status_agent:m0_write -> terminal_north_0_status_translator:uav_write
	wire    [1:0] terminal_north_0_status_agent_m0_burstcount;                   // terminal_north_0_status_agent:m0_burstcount -> terminal_north_0_status_translator:uav_burstcount
	wire          terminal_north_0_status_agent_rf_source_valid;                 // terminal_north_0_status_agent:rf_source_valid -> terminal_north_0_status_agent_rsp_fifo:in_valid
	wire  [109:0] terminal_north_0_status_agent_rf_source_data;                  // terminal_north_0_status_agent:rf_source_data -> terminal_north_0_status_agent_rsp_fifo:in_data
	wire          terminal_north_0_status_agent_rf_source_ready;                 // terminal_north_0_status_agent_rsp_fifo:in_ready -> terminal_north_0_status_agent:rf_source_ready
	wire          terminal_north_0_status_agent_rf_source_startofpacket;         // terminal_north_0_status_agent:rf_source_startofpacket -> terminal_north_0_status_agent_rsp_fifo:in_startofpacket
	wire          terminal_north_0_status_agent_rf_source_endofpacket;           // terminal_north_0_status_agent:rf_source_endofpacket -> terminal_north_0_status_agent_rsp_fifo:in_endofpacket
	wire          terminal_north_0_status_agent_rsp_fifo_out_valid;              // terminal_north_0_status_agent_rsp_fifo:out_valid -> terminal_north_0_status_agent:rf_sink_valid
	wire  [109:0] terminal_north_0_status_agent_rsp_fifo_out_data;               // terminal_north_0_status_agent_rsp_fifo:out_data -> terminal_north_0_status_agent:rf_sink_data
	wire          terminal_north_0_status_agent_rsp_fifo_out_ready;              // terminal_north_0_status_agent:rf_sink_ready -> terminal_north_0_status_agent_rsp_fifo:out_ready
	wire          terminal_north_0_status_agent_rsp_fifo_out_startofpacket;      // terminal_north_0_status_agent_rsp_fifo:out_startofpacket -> terminal_north_0_status_agent:rf_sink_startofpacket
	wire          terminal_north_0_status_agent_rsp_fifo_out_endofpacket;        // terminal_north_0_status_agent_rsp_fifo:out_endofpacket -> terminal_north_0_status_agent:rf_sink_endofpacket
	wire          terminal_north_0_status_agent_rdata_fifo_src_valid;            // terminal_north_0_status_agent:rdata_fifo_src_valid -> terminal_north_0_status_agent_rdata_fifo:in_valid
	wire   [17:0] terminal_north_0_status_agent_rdata_fifo_src_data;             // terminal_north_0_status_agent:rdata_fifo_src_data -> terminal_north_0_status_agent_rdata_fifo:in_data
	wire          terminal_north_0_status_agent_rdata_fifo_src_ready;            // terminal_north_0_status_agent_rdata_fifo:in_ready -> terminal_north_0_status_agent:rdata_fifo_src_ready
	wire   [15:0] terminal_north_1_status_agent_m0_readdata;                     // terminal_north_1_status_translator:uav_readdata -> terminal_north_1_status_agent:m0_readdata
	wire          terminal_north_1_status_agent_m0_waitrequest;                  // terminal_north_1_status_translator:uav_waitrequest -> terminal_north_1_status_agent:m0_waitrequest
	wire          terminal_north_1_status_agent_m0_debugaccess;                  // terminal_north_1_status_agent:m0_debugaccess -> terminal_north_1_status_translator:uav_debugaccess
	wire   [29:0] terminal_north_1_status_agent_m0_address;                      // terminal_north_1_status_agent:m0_address -> terminal_north_1_status_translator:uav_address
	wire    [1:0] terminal_north_1_status_agent_m0_byteenable;                   // terminal_north_1_status_agent:m0_byteenable -> terminal_north_1_status_translator:uav_byteenable
	wire          terminal_north_1_status_agent_m0_read;                         // terminal_north_1_status_agent:m0_read -> terminal_north_1_status_translator:uav_read
	wire          terminal_north_1_status_agent_m0_readdatavalid;                // terminal_north_1_status_translator:uav_readdatavalid -> terminal_north_1_status_agent:m0_readdatavalid
	wire          terminal_north_1_status_agent_m0_lock;                         // terminal_north_1_status_agent:m0_lock -> terminal_north_1_status_translator:uav_lock
	wire   [15:0] terminal_north_1_status_agent_m0_writedata;                    // terminal_north_1_status_agent:m0_writedata -> terminal_north_1_status_translator:uav_writedata
	wire          terminal_north_1_status_agent_m0_write;                        // terminal_north_1_status_agent:m0_write -> terminal_north_1_status_translator:uav_write
	wire    [1:0] terminal_north_1_status_agent_m0_burstcount;                   // terminal_north_1_status_agent:m0_burstcount -> terminal_north_1_status_translator:uav_burstcount
	wire          terminal_north_1_status_agent_rf_source_valid;                 // terminal_north_1_status_agent:rf_source_valid -> terminal_north_1_status_agent_rsp_fifo:in_valid
	wire  [109:0] terminal_north_1_status_agent_rf_source_data;                  // terminal_north_1_status_agent:rf_source_data -> terminal_north_1_status_agent_rsp_fifo:in_data
	wire          terminal_north_1_status_agent_rf_source_ready;                 // terminal_north_1_status_agent_rsp_fifo:in_ready -> terminal_north_1_status_agent:rf_source_ready
	wire          terminal_north_1_status_agent_rf_source_startofpacket;         // terminal_north_1_status_agent:rf_source_startofpacket -> terminal_north_1_status_agent_rsp_fifo:in_startofpacket
	wire          terminal_north_1_status_agent_rf_source_endofpacket;           // terminal_north_1_status_agent:rf_source_endofpacket -> terminal_north_1_status_agent_rsp_fifo:in_endofpacket
	wire          terminal_north_1_status_agent_rsp_fifo_out_valid;              // terminal_north_1_status_agent_rsp_fifo:out_valid -> terminal_north_1_status_agent:rf_sink_valid
	wire  [109:0] terminal_north_1_status_agent_rsp_fifo_out_data;               // terminal_north_1_status_agent_rsp_fifo:out_data -> terminal_north_1_status_agent:rf_sink_data
	wire          terminal_north_1_status_agent_rsp_fifo_out_ready;              // terminal_north_1_status_agent:rf_sink_ready -> terminal_north_1_status_agent_rsp_fifo:out_ready
	wire          terminal_north_1_status_agent_rsp_fifo_out_startofpacket;      // terminal_north_1_status_agent_rsp_fifo:out_startofpacket -> terminal_north_1_status_agent:rf_sink_startofpacket
	wire          terminal_north_1_status_agent_rsp_fifo_out_endofpacket;        // terminal_north_1_status_agent_rsp_fifo:out_endofpacket -> terminal_north_1_status_agent:rf_sink_endofpacket
	wire          terminal_north_1_status_agent_rdata_fifo_src_valid;            // terminal_north_1_status_agent:rdata_fifo_src_valid -> terminal_north_1_status_agent_rdata_fifo:in_valid
	wire   [17:0] terminal_north_1_status_agent_rdata_fifo_src_data;             // terminal_north_1_status_agent:rdata_fifo_src_data -> terminal_north_1_status_agent_rdata_fifo:in_data
	wire          terminal_north_1_status_agent_rdata_fifo_src_ready;            // terminal_north_1_status_agent_rdata_fifo:in_ready -> terminal_north_1_status_agent:rdata_fifo_src_ready
	wire   [15:0] terminal_south_0_status_agent_m0_readdata;                     // terminal_south_0_status_translator:uav_readdata -> terminal_south_0_status_agent:m0_readdata
	wire          terminal_south_0_status_agent_m0_waitrequest;                  // terminal_south_0_status_translator:uav_waitrequest -> terminal_south_0_status_agent:m0_waitrequest
	wire          terminal_south_0_status_agent_m0_debugaccess;                  // terminal_south_0_status_agent:m0_debugaccess -> terminal_south_0_status_translator:uav_debugaccess
	wire   [29:0] terminal_south_0_status_agent_m0_address;                      // terminal_south_0_status_agent:m0_address -> terminal_south_0_status_translator:uav_address
	wire    [1:0] terminal_south_0_status_agent_m0_byteenable;                   // terminal_south_0_status_agent:m0_byteenable -> terminal_south_0_status_translator:uav_byteenable
	wire          terminal_south_0_status_agent_m0_read;                         // terminal_south_0_status_agent:m0_read -> terminal_south_0_status_translator:uav_read
	wire          terminal_south_0_status_agent_m0_readdatavalid;                // terminal_south_0_status_translator:uav_readdatavalid -> terminal_south_0_status_agent:m0_readdatavalid
	wire          terminal_south_0_status_agent_m0_lock;                         // terminal_south_0_status_agent:m0_lock -> terminal_south_0_status_translator:uav_lock
	wire   [15:0] terminal_south_0_status_agent_m0_writedata;                    // terminal_south_0_status_agent:m0_writedata -> terminal_south_0_status_translator:uav_writedata
	wire          terminal_south_0_status_agent_m0_write;                        // terminal_south_0_status_agent:m0_write -> terminal_south_0_status_translator:uav_write
	wire    [1:0] terminal_south_0_status_agent_m0_burstcount;                   // terminal_south_0_status_agent:m0_burstcount -> terminal_south_0_status_translator:uav_burstcount
	wire          terminal_south_0_status_agent_rf_source_valid;                 // terminal_south_0_status_agent:rf_source_valid -> terminal_south_0_status_agent_rsp_fifo:in_valid
	wire  [109:0] terminal_south_0_status_agent_rf_source_data;                  // terminal_south_0_status_agent:rf_source_data -> terminal_south_0_status_agent_rsp_fifo:in_data
	wire          terminal_south_0_status_agent_rf_source_ready;                 // terminal_south_0_status_agent_rsp_fifo:in_ready -> terminal_south_0_status_agent:rf_source_ready
	wire          terminal_south_0_status_agent_rf_source_startofpacket;         // terminal_south_0_status_agent:rf_source_startofpacket -> terminal_south_0_status_agent_rsp_fifo:in_startofpacket
	wire          terminal_south_0_status_agent_rf_source_endofpacket;           // terminal_south_0_status_agent:rf_source_endofpacket -> terminal_south_0_status_agent_rsp_fifo:in_endofpacket
	wire          terminal_south_0_status_agent_rsp_fifo_out_valid;              // terminal_south_0_status_agent_rsp_fifo:out_valid -> terminal_south_0_status_agent:rf_sink_valid
	wire  [109:0] terminal_south_0_status_agent_rsp_fifo_out_data;               // terminal_south_0_status_agent_rsp_fifo:out_data -> terminal_south_0_status_agent:rf_sink_data
	wire          terminal_south_0_status_agent_rsp_fifo_out_ready;              // terminal_south_0_status_agent:rf_sink_ready -> terminal_south_0_status_agent_rsp_fifo:out_ready
	wire          terminal_south_0_status_agent_rsp_fifo_out_startofpacket;      // terminal_south_0_status_agent_rsp_fifo:out_startofpacket -> terminal_south_0_status_agent:rf_sink_startofpacket
	wire          terminal_south_0_status_agent_rsp_fifo_out_endofpacket;        // terminal_south_0_status_agent_rsp_fifo:out_endofpacket -> terminal_south_0_status_agent:rf_sink_endofpacket
	wire          terminal_south_0_status_agent_rdata_fifo_src_valid;            // terminal_south_0_status_agent:rdata_fifo_src_valid -> terminal_south_0_status_agent_rdata_fifo:in_valid
	wire   [17:0] terminal_south_0_status_agent_rdata_fifo_src_data;             // terminal_south_0_status_agent:rdata_fifo_src_data -> terminal_south_0_status_agent_rdata_fifo:in_data
	wire          terminal_south_0_status_agent_rdata_fifo_src_ready;            // terminal_south_0_status_agent_rdata_fifo:in_ready -> terminal_south_0_status_agent:rdata_fifo_src_ready
	wire   [15:0] terminal_south_1_status_agent_m0_readdata;                     // terminal_south_1_status_translator:uav_readdata -> terminal_south_1_status_agent:m0_readdata
	wire          terminal_south_1_status_agent_m0_waitrequest;                  // terminal_south_1_status_translator:uav_waitrequest -> terminal_south_1_status_agent:m0_waitrequest
	wire          terminal_south_1_status_agent_m0_debugaccess;                  // terminal_south_1_status_agent:m0_debugaccess -> terminal_south_1_status_translator:uav_debugaccess
	wire   [29:0] terminal_south_1_status_agent_m0_address;                      // terminal_south_1_status_agent:m0_address -> terminal_south_1_status_translator:uav_address
	wire    [1:0] terminal_south_1_status_agent_m0_byteenable;                   // terminal_south_1_status_agent:m0_byteenable -> terminal_south_1_status_translator:uav_byteenable
	wire          terminal_south_1_status_agent_m0_read;                         // terminal_south_1_status_agent:m0_read -> terminal_south_1_status_translator:uav_read
	wire          terminal_south_1_status_agent_m0_readdatavalid;                // terminal_south_1_status_translator:uav_readdatavalid -> terminal_south_1_status_agent:m0_readdatavalid
	wire          terminal_south_1_status_agent_m0_lock;                         // terminal_south_1_status_agent:m0_lock -> terminal_south_1_status_translator:uav_lock
	wire   [15:0] terminal_south_1_status_agent_m0_writedata;                    // terminal_south_1_status_agent:m0_writedata -> terminal_south_1_status_translator:uav_writedata
	wire          terminal_south_1_status_agent_m0_write;                        // terminal_south_1_status_agent:m0_write -> terminal_south_1_status_translator:uav_write
	wire    [1:0] terminal_south_1_status_agent_m0_burstcount;                   // terminal_south_1_status_agent:m0_burstcount -> terminal_south_1_status_translator:uav_burstcount
	wire          terminal_south_1_status_agent_rf_source_valid;                 // terminal_south_1_status_agent:rf_source_valid -> terminal_south_1_status_agent_rsp_fifo:in_valid
	wire  [109:0] terminal_south_1_status_agent_rf_source_data;                  // terminal_south_1_status_agent:rf_source_data -> terminal_south_1_status_agent_rsp_fifo:in_data
	wire          terminal_south_1_status_agent_rf_source_ready;                 // terminal_south_1_status_agent_rsp_fifo:in_ready -> terminal_south_1_status_agent:rf_source_ready
	wire          terminal_south_1_status_agent_rf_source_startofpacket;         // terminal_south_1_status_agent:rf_source_startofpacket -> terminal_south_1_status_agent_rsp_fifo:in_startofpacket
	wire          terminal_south_1_status_agent_rf_source_endofpacket;           // terminal_south_1_status_agent:rf_source_endofpacket -> terminal_south_1_status_agent_rsp_fifo:in_endofpacket
	wire          terminal_south_1_status_agent_rsp_fifo_out_valid;              // terminal_south_1_status_agent_rsp_fifo:out_valid -> terminal_south_1_status_agent:rf_sink_valid
	wire  [109:0] terminal_south_1_status_agent_rsp_fifo_out_data;               // terminal_south_1_status_agent_rsp_fifo:out_data -> terminal_south_1_status_agent:rf_sink_data
	wire          terminal_south_1_status_agent_rsp_fifo_out_ready;              // terminal_south_1_status_agent:rf_sink_ready -> terminal_south_1_status_agent_rsp_fifo:out_ready
	wire          terminal_south_1_status_agent_rsp_fifo_out_startofpacket;      // terminal_south_1_status_agent_rsp_fifo:out_startofpacket -> terminal_south_1_status_agent:rf_sink_startofpacket
	wire          terminal_south_1_status_agent_rsp_fifo_out_endofpacket;        // terminal_south_1_status_agent_rsp_fifo:out_endofpacket -> terminal_south_1_status_agent:rf_sink_endofpacket
	wire          terminal_south_1_status_agent_rdata_fifo_src_valid;            // terminal_south_1_status_agent:rdata_fifo_src_valid -> terminal_south_1_status_agent_rdata_fifo:in_valid
	wire   [17:0] terminal_south_1_status_agent_rdata_fifo_src_data;             // terminal_south_1_status_agent:rdata_fifo_src_data -> terminal_south_1_status_agent_rdata_fifo:in_data
	wire          terminal_south_1_status_agent_rdata_fifo_src_ready;            // terminal_south_1_status_agent_rdata_fifo:in_ready -> terminal_south_1_status_agent:rdata_fifo_src_ready
	wire   [15:0] terminal_west_0_status_agent_m0_readdata;                      // terminal_west_0_status_translator:uav_readdata -> terminal_west_0_status_agent:m0_readdata
	wire          terminal_west_0_status_agent_m0_waitrequest;                   // terminal_west_0_status_translator:uav_waitrequest -> terminal_west_0_status_agent:m0_waitrequest
	wire          terminal_west_0_status_agent_m0_debugaccess;                   // terminal_west_0_status_agent:m0_debugaccess -> terminal_west_0_status_translator:uav_debugaccess
	wire   [29:0] terminal_west_0_status_agent_m0_address;                       // terminal_west_0_status_agent:m0_address -> terminal_west_0_status_translator:uav_address
	wire    [1:0] terminal_west_0_status_agent_m0_byteenable;                    // terminal_west_0_status_agent:m0_byteenable -> terminal_west_0_status_translator:uav_byteenable
	wire          terminal_west_0_status_agent_m0_read;                          // terminal_west_0_status_agent:m0_read -> terminal_west_0_status_translator:uav_read
	wire          terminal_west_0_status_agent_m0_readdatavalid;                 // terminal_west_0_status_translator:uav_readdatavalid -> terminal_west_0_status_agent:m0_readdatavalid
	wire          terminal_west_0_status_agent_m0_lock;                          // terminal_west_0_status_agent:m0_lock -> terminal_west_0_status_translator:uav_lock
	wire   [15:0] terminal_west_0_status_agent_m0_writedata;                     // terminal_west_0_status_agent:m0_writedata -> terminal_west_0_status_translator:uav_writedata
	wire          terminal_west_0_status_agent_m0_write;                         // terminal_west_0_status_agent:m0_write -> terminal_west_0_status_translator:uav_write
	wire    [1:0] terminal_west_0_status_agent_m0_burstcount;                    // terminal_west_0_status_agent:m0_burstcount -> terminal_west_0_status_translator:uav_burstcount
	wire          terminal_west_0_status_agent_rf_source_valid;                  // terminal_west_0_status_agent:rf_source_valid -> terminal_west_0_status_agent_rsp_fifo:in_valid
	wire  [109:0] terminal_west_0_status_agent_rf_source_data;                   // terminal_west_0_status_agent:rf_source_data -> terminal_west_0_status_agent_rsp_fifo:in_data
	wire          terminal_west_0_status_agent_rf_source_ready;                  // terminal_west_0_status_agent_rsp_fifo:in_ready -> terminal_west_0_status_agent:rf_source_ready
	wire          terminal_west_0_status_agent_rf_source_startofpacket;          // terminal_west_0_status_agent:rf_source_startofpacket -> terminal_west_0_status_agent_rsp_fifo:in_startofpacket
	wire          terminal_west_0_status_agent_rf_source_endofpacket;            // terminal_west_0_status_agent:rf_source_endofpacket -> terminal_west_0_status_agent_rsp_fifo:in_endofpacket
	wire          terminal_west_0_status_agent_rsp_fifo_out_valid;               // terminal_west_0_status_agent_rsp_fifo:out_valid -> terminal_west_0_status_agent:rf_sink_valid
	wire  [109:0] terminal_west_0_status_agent_rsp_fifo_out_data;                // terminal_west_0_status_agent_rsp_fifo:out_data -> terminal_west_0_status_agent:rf_sink_data
	wire          terminal_west_0_status_agent_rsp_fifo_out_ready;               // terminal_west_0_status_agent:rf_sink_ready -> terminal_west_0_status_agent_rsp_fifo:out_ready
	wire          terminal_west_0_status_agent_rsp_fifo_out_startofpacket;       // terminal_west_0_status_agent_rsp_fifo:out_startofpacket -> terminal_west_0_status_agent:rf_sink_startofpacket
	wire          terminal_west_0_status_agent_rsp_fifo_out_endofpacket;         // terminal_west_0_status_agent_rsp_fifo:out_endofpacket -> terminal_west_0_status_agent:rf_sink_endofpacket
	wire          terminal_west_0_status_agent_rdata_fifo_src_valid;             // terminal_west_0_status_agent:rdata_fifo_src_valid -> terminal_west_0_status_agent_rdata_fifo:in_valid
	wire   [17:0] terminal_west_0_status_agent_rdata_fifo_src_data;              // terminal_west_0_status_agent:rdata_fifo_src_data -> terminal_west_0_status_agent_rdata_fifo:in_data
	wire          terminal_west_0_status_agent_rdata_fifo_src_ready;             // terminal_west_0_status_agent_rdata_fifo:in_ready -> terminal_west_0_status_agent:rdata_fifo_src_ready
	wire   [15:0] terminal_east_1_status_agent_m0_readdata;                      // terminal_east_1_status_translator:uav_readdata -> terminal_east_1_status_agent:m0_readdata
	wire          terminal_east_1_status_agent_m0_waitrequest;                   // terminal_east_1_status_translator:uav_waitrequest -> terminal_east_1_status_agent:m0_waitrequest
	wire          terminal_east_1_status_agent_m0_debugaccess;                   // terminal_east_1_status_agent:m0_debugaccess -> terminal_east_1_status_translator:uav_debugaccess
	wire   [29:0] terminal_east_1_status_agent_m0_address;                       // terminal_east_1_status_agent:m0_address -> terminal_east_1_status_translator:uav_address
	wire    [1:0] terminal_east_1_status_agent_m0_byteenable;                    // terminal_east_1_status_agent:m0_byteenable -> terminal_east_1_status_translator:uav_byteenable
	wire          terminal_east_1_status_agent_m0_read;                          // terminal_east_1_status_agent:m0_read -> terminal_east_1_status_translator:uav_read
	wire          terminal_east_1_status_agent_m0_readdatavalid;                 // terminal_east_1_status_translator:uav_readdatavalid -> terminal_east_1_status_agent:m0_readdatavalid
	wire          terminal_east_1_status_agent_m0_lock;                          // terminal_east_1_status_agent:m0_lock -> terminal_east_1_status_translator:uav_lock
	wire   [15:0] terminal_east_1_status_agent_m0_writedata;                     // terminal_east_1_status_agent:m0_writedata -> terminal_east_1_status_translator:uav_writedata
	wire          terminal_east_1_status_agent_m0_write;                         // terminal_east_1_status_agent:m0_write -> terminal_east_1_status_translator:uav_write
	wire    [1:0] terminal_east_1_status_agent_m0_burstcount;                    // terminal_east_1_status_agent:m0_burstcount -> terminal_east_1_status_translator:uav_burstcount
	wire          terminal_east_1_status_agent_rf_source_valid;                  // terminal_east_1_status_agent:rf_source_valid -> terminal_east_1_status_agent_rsp_fifo:in_valid
	wire  [109:0] terminal_east_1_status_agent_rf_source_data;                   // terminal_east_1_status_agent:rf_source_data -> terminal_east_1_status_agent_rsp_fifo:in_data
	wire          terminal_east_1_status_agent_rf_source_ready;                  // terminal_east_1_status_agent_rsp_fifo:in_ready -> terminal_east_1_status_agent:rf_source_ready
	wire          terminal_east_1_status_agent_rf_source_startofpacket;          // terminal_east_1_status_agent:rf_source_startofpacket -> terminal_east_1_status_agent_rsp_fifo:in_startofpacket
	wire          terminal_east_1_status_agent_rf_source_endofpacket;            // terminal_east_1_status_agent:rf_source_endofpacket -> terminal_east_1_status_agent_rsp_fifo:in_endofpacket
	wire          terminal_east_1_status_agent_rsp_fifo_out_valid;               // terminal_east_1_status_agent_rsp_fifo:out_valid -> terminal_east_1_status_agent:rf_sink_valid
	wire  [109:0] terminal_east_1_status_agent_rsp_fifo_out_data;                // terminal_east_1_status_agent_rsp_fifo:out_data -> terminal_east_1_status_agent:rf_sink_data
	wire          terminal_east_1_status_agent_rsp_fifo_out_ready;               // terminal_east_1_status_agent:rf_sink_ready -> terminal_east_1_status_agent_rsp_fifo:out_ready
	wire          terminal_east_1_status_agent_rsp_fifo_out_startofpacket;       // terminal_east_1_status_agent_rsp_fifo:out_startofpacket -> terminal_east_1_status_agent:rf_sink_startofpacket
	wire          terminal_east_1_status_agent_rsp_fifo_out_endofpacket;         // terminal_east_1_status_agent_rsp_fifo:out_endofpacket -> terminal_east_1_status_agent:rf_sink_endofpacket
	wire          terminal_east_1_status_agent_rdata_fifo_src_valid;             // terminal_east_1_status_agent:rdata_fifo_src_valid -> terminal_east_1_status_agent_rdata_fifo:in_valid
	wire   [17:0] terminal_east_1_status_agent_rdata_fifo_src_data;              // terminal_east_1_status_agent:rdata_fifo_src_data -> terminal_east_1_status_agent_rdata_fifo:in_data
	wire          terminal_east_1_status_agent_rdata_fifo_src_ready;             // terminal_east_1_status_agent_rdata_fifo:in_ready -> terminal_east_1_status_agent:rdata_fifo_src_ready
	wire   [15:0] terminal_east_0_status_agent_m0_readdata;                      // terminal_east_0_status_translator:uav_readdata -> terminal_east_0_status_agent:m0_readdata
	wire          terminal_east_0_status_agent_m0_waitrequest;                   // terminal_east_0_status_translator:uav_waitrequest -> terminal_east_0_status_agent:m0_waitrequest
	wire          terminal_east_0_status_agent_m0_debugaccess;                   // terminal_east_0_status_agent:m0_debugaccess -> terminal_east_0_status_translator:uav_debugaccess
	wire   [29:0] terminal_east_0_status_agent_m0_address;                       // terminal_east_0_status_agent:m0_address -> terminal_east_0_status_translator:uav_address
	wire    [1:0] terminal_east_0_status_agent_m0_byteenable;                    // terminal_east_0_status_agent:m0_byteenable -> terminal_east_0_status_translator:uav_byteenable
	wire          terminal_east_0_status_agent_m0_read;                          // terminal_east_0_status_agent:m0_read -> terminal_east_0_status_translator:uav_read
	wire          terminal_east_0_status_agent_m0_readdatavalid;                 // terminal_east_0_status_translator:uav_readdatavalid -> terminal_east_0_status_agent:m0_readdatavalid
	wire          terminal_east_0_status_agent_m0_lock;                          // terminal_east_0_status_agent:m0_lock -> terminal_east_0_status_translator:uav_lock
	wire   [15:0] terminal_east_0_status_agent_m0_writedata;                     // terminal_east_0_status_agent:m0_writedata -> terminal_east_0_status_translator:uav_writedata
	wire          terminal_east_0_status_agent_m0_write;                         // terminal_east_0_status_agent:m0_write -> terminal_east_0_status_translator:uav_write
	wire    [1:0] terminal_east_0_status_agent_m0_burstcount;                    // terminal_east_0_status_agent:m0_burstcount -> terminal_east_0_status_translator:uav_burstcount
	wire          terminal_east_0_status_agent_rf_source_valid;                  // terminal_east_0_status_agent:rf_source_valid -> terminal_east_0_status_agent_rsp_fifo:in_valid
	wire  [109:0] terminal_east_0_status_agent_rf_source_data;                   // terminal_east_0_status_agent:rf_source_data -> terminal_east_0_status_agent_rsp_fifo:in_data
	wire          terminal_east_0_status_agent_rf_source_ready;                  // terminal_east_0_status_agent_rsp_fifo:in_ready -> terminal_east_0_status_agent:rf_source_ready
	wire          terminal_east_0_status_agent_rf_source_startofpacket;          // terminal_east_0_status_agent:rf_source_startofpacket -> terminal_east_0_status_agent_rsp_fifo:in_startofpacket
	wire          terminal_east_0_status_agent_rf_source_endofpacket;            // terminal_east_0_status_agent:rf_source_endofpacket -> terminal_east_0_status_agent_rsp_fifo:in_endofpacket
	wire          terminal_east_0_status_agent_rsp_fifo_out_valid;               // terminal_east_0_status_agent_rsp_fifo:out_valid -> terminal_east_0_status_agent:rf_sink_valid
	wire  [109:0] terminal_east_0_status_agent_rsp_fifo_out_data;                // terminal_east_0_status_agent_rsp_fifo:out_data -> terminal_east_0_status_agent:rf_sink_data
	wire          terminal_east_0_status_agent_rsp_fifo_out_ready;               // terminal_east_0_status_agent:rf_sink_ready -> terminal_east_0_status_agent_rsp_fifo:out_ready
	wire          terminal_east_0_status_agent_rsp_fifo_out_startofpacket;       // terminal_east_0_status_agent_rsp_fifo:out_startofpacket -> terminal_east_0_status_agent:rf_sink_startofpacket
	wire          terminal_east_0_status_agent_rsp_fifo_out_endofpacket;         // terminal_east_0_status_agent_rsp_fifo:out_endofpacket -> terminal_east_0_status_agent:rf_sink_endofpacket
	wire          terminal_east_0_status_agent_rdata_fifo_src_valid;             // terminal_east_0_status_agent:rdata_fifo_src_valid -> terminal_east_0_status_agent_rdata_fifo:in_valid
	wire   [17:0] terminal_east_0_status_agent_rdata_fifo_src_data;              // terminal_east_0_status_agent:rdata_fifo_src_data -> terminal_east_0_status_agent_rdata_fifo:in_data
	wire          terminal_east_0_status_agent_rdata_fifo_src_ready;             // terminal_east_0_status_agent_rdata_fifo:in_ready -> terminal_east_0_status_agent:rdata_fifo_src_ready
	wire   [15:0] terminal_west_1_status_agent_m0_readdata;                      // terminal_west_1_status_translator:uav_readdata -> terminal_west_1_status_agent:m0_readdata
	wire          terminal_west_1_status_agent_m0_waitrequest;                   // terminal_west_1_status_translator:uav_waitrequest -> terminal_west_1_status_agent:m0_waitrequest
	wire          terminal_west_1_status_agent_m0_debugaccess;                   // terminal_west_1_status_agent:m0_debugaccess -> terminal_west_1_status_translator:uav_debugaccess
	wire   [29:0] terminal_west_1_status_agent_m0_address;                       // terminal_west_1_status_agent:m0_address -> terminal_west_1_status_translator:uav_address
	wire    [1:0] terminal_west_1_status_agent_m0_byteenable;                    // terminal_west_1_status_agent:m0_byteenable -> terminal_west_1_status_translator:uav_byteenable
	wire          terminal_west_1_status_agent_m0_read;                          // terminal_west_1_status_agent:m0_read -> terminal_west_1_status_translator:uav_read
	wire          terminal_west_1_status_agent_m0_readdatavalid;                 // terminal_west_1_status_translator:uav_readdatavalid -> terminal_west_1_status_agent:m0_readdatavalid
	wire          terminal_west_1_status_agent_m0_lock;                          // terminal_west_1_status_agent:m0_lock -> terminal_west_1_status_translator:uav_lock
	wire   [15:0] terminal_west_1_status_agent_m0_writedata;                     // terminal_west_1_status_agent:m0_writedata -> terminal_west_1_status_translator:uav_writedata
	wire          terminal_west_1_status_agent_m0_write;                         // terminal_west_1_status_agent:m0_write -> terminal_west_1_status_translator:uav_write
	wire    [1:0] terminal_west_1_status_agent_m0_burstcount;                    // terminal_west_1_status_agent:m0_burstcount -> terminal_west_1_status_translator:uav_burstcount
	wire          terminal_west_1_status_agent_rf_source_valid;                  // terminal_west_1_status_agent:rf_source_valid -> terminal_west_1_status_agent_rsp_fifo:in_valid
	wire  [109:0] terminal_west_1_status_agent_rf_source_data;                   // terminal_west_1_status_agent:rf_source_data -> terminal_west_1_status_agent_rsp_fifo:in_data
	wire          terminal_west_1_status_agent_rf_source_ready;                  // terminal_west_1_status_agent_rsp_fifo:in_ready -> terminal_west_1_status_agent:rf_source_ready
	wire          terminal_west_1_status_agent_rf_source_startofpacket;          // terminal_west_1_status_agent:rf_source_startofpacket -> terminal_west_1_status_agent_rsp_fifo:in_startofpacket
	wire          terminal_west_1_status_agent_rf_source_endofpacket;            // terminal_west_1_status_agent:rf_source_endofpacket -> terminal_west_1_status_agent_rsp_fifo:in_endofpacket
	wire          terminal_west_1_status_agent_rsp_fifo_out_valid;               // terminal_west_1_status_agent_rsp_fifo:out_valid -> terminal_west_1_status_agent:rf_sink_valid
	wire  [109:0] terminal_west_1_status_agent_rsp_fifo_out_data;                // terminal_west_1_status_agent_rsp_fifo:out_data -> terminal_west_1_status_agent:rf_sink_data
	wire          terminal_west_1_status_agent_rsp_fifo_out_ready;               // terminal_west_1_status_agent:rf_sink_ready -> terminal_west_1_status_agent_rsp_fifo:out_ready
	wire          terminal_west_1_status_agent_rsp_fifo_out_startofpacket;       // terminal_west_1_status_agent_rsp_fifo:out_startofpacket -> terminal_west_1_status_agent:rf_sink_startofpacket
	wire          terminal_west_1_status_agent_rsp_fifo_out_endofpacket;         // terminal_west_1_status_agent_rsp_fifo:out_endofpacket -> terminal_west_1_status_agent:rf_sink_endofpacket
	wire          terminal_west_1_status_agent_rdata_fifo_src_valid;             // terminal_west_1_status_agent:rdata_fifo_src_valid -> terminal_west_1_status_agent_rdata_fifo:in_valid
	wire   [17:0] terminal_west_1_status_agent_rdata_fifo_src_data;              // terminal_west_1_status_agent:rdata_fifo_src_data -> terminal_west_1_status_agent_rdata_fifo:in_data
	wire          terminal_west_1_status_agent_rdata_fifo_src_ready;             // terminal_west_1_status_agent_rdata_fifo:in_ready -> terminal_west_1_status_agent:rdata_fifo_src_ready
	wire          hps_h2f_axi_master_agent_write_cp_valid;                       // HPS_h2f_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [126:0] hps_h2f_axi_master_agent_write_cp_data;                        // HPS_h2f_axi_master_agent:write_cp_data -> router:sink_data
	wire          hps_h2f_axi_master_agent_write_cp_ready;                       // router:sink_ready -> HPS_h2f_axi_master_agent:write_cp_ready
	wire          hps_h2f_axi_master_agent_write_cp_startofpacket;               // HPS_h2f_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          hps_h2f_axi_master_agent_write_cp_endofpacket;                 // HPS_h2f_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          hps_h2f_axi_master_agent_read_cp_valid;                        // HPS_h2f_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [126:0] hps_h2f_axi_master_agent_read_cp_data;                         // HPS_h2f_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          hps_h2f_axi_master_agent_read_cp_ready;                        // router_001:sink_ready -> HPS_h2f_axi_master_agent:read_cp_ready
	wire          hps_h2f_axi_master_agent_read_cp_startofpacket;                // HPS_h2f_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          hps_h2f_axi_master_agent_read_cp_endofpacket;                  // HPS_h2f_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          node_0_processing_mem_agent_rp_valid;                          // node_0_processing_mem_agent:rp_valid -> router_002:sink_valid
	wire  [108:0] node_0_processing_mem_agent_rp_data;                           // node_0_processing_mem_agent:rp_data -> router_002:sink_data
	wire          node_0_processing_mem_agent_rp_ready;                          // router_002:sink_ready -> node_0_processing_mem_agent:rp_ready
	wire          node_0_processing_mem_agent_rp_startofpacket;                  // node_0_processing_mem_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          node_0_processing_mem_agent_rp_endofpacket;                    // node_0_processing_mem_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          node_1_processing_mem_agent_rp_valid;                          // node_1_processing_mem_agent:rp_valid -> router_003:sink_valid
	wire  [108:0] node_1_processing_mem_agent_rp_data;                           // node_1_processing_mem_agent:rp_data -> router_003:sink_data
	wire          node_1_processing_mem_agent_rp_ready;                          // router_003:sink_ready -> node_1_processing_mem_agent:rp_ready
	wire          node_1_processing_mem_agent_rp_startofpacket;                  // node_1_processing_mem_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          node_1_processing_mem_agent_rp_endofpacket;                    // node_1_processing_mem_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          node_65536_processing_mem_agent_rp_valid;                      // node_65536_processing_mem_agent:rp_valid -> router_004:sink_valid
	wire  [108:0] node_65536_processing_mem_agent_rp_data;                       // node_65536_processing_mem_agent:rp_data -> router_004:sink_data
	wire          node_65536_processing_mem_agent_rp_ready;                      // router_004:sink_ready -> node_65536_processing_mem_agent:rp_ready
	wire          node_65536_processing_mem_agent_rp_startofpacket;              // node_65536_processing_mem_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          node_65536_processing_mem_agent_rp_endofpacket;                // node_65536_processing_mem_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          node_65537_processing_mem_agent_rp_valid;                      // node_65537_processing_mem_agent:rp_valid -> router_005:sink_valid
	wire  [108:0] node_65537_processing_mem_agent_rp_data;                       // node_65537_processing_mem_agent:rp_data -> router_005:sink_data
	wire          node_65537_processing_mem_agent_rp_ready;                      // router_005:sink_ready -> node_65537_processing_mem_agent:rp_ready
	wire          node_65537_processing_mem_agent_rp_startofpacket;              // node_65537_processing_mem_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          node_65537_processing_mem_agent_rp_endofpacket;                // node_65537_processing_mem_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          terminal_north_0_status_agent_rp_valid;                        // terminal_north_0_status_agent:rp_valid -> router_006:sink_valid
	wire  [108:0] terminal_north_0_status_agent_rp_data;                         // terminal_north_0_status_agent:rp_data -> router_006:sink_data
	wire          terminal_north_0_status_agent_rp_ready;                        // router_006:sink_ready -> terminal_north_0_status_agent:rp_ready
	wire          terminal_north_0_status_agent_rp_startofpacket;                // terminal_north_0_status_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          terminal_north_0_status_agent_rp_endofpacket;                  // terminal_north_0_status_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          terminal_north_1_status_agent_rp_valid;                        // terminal_north_1_status_agent:rp_valid -> router_007:sink_valid
	wire  [108:0] terminal_north_1_status_agent_rp_data;                         // terminal_north_1_status_agent:rp_data -> router_007:sink_data
	wire          terminal_north_1_status_agent_rp_ready;                        // router_007:sink_ready -> terminal_north_1_status_agent:rp_ready
	wire          terminal_north_1_status_agent_rp_startofpacket;                // terminal_north_1_status_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          terminal_north_1_status_agent_rp_endofpacket;                  // terminal_north_1_status_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          terminal_south_0_status_agent_rp_valid;                        // terminal_south_0_status_agent:rp_valid -> router_008:sink_valid
	wire  [108:0] terminal_south_0_status_agent_rp_data;                         // terminal_south_0_status_agent:rp_data -> router_008:sink_data
	wire          terminal_south_0_status_agent_rp_ready;                        // router_008:sink_ready -> terminal_south_0_status_agent:rp_ready
	wire          terminal_south_0_status_agent_rp_startofpacket;                // terminal_south_0_status_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          terminal_south_0_status_agent_rp_endofpacket;                  // terminal_south_0_status_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          terminal_south_1_status_agent_rp_valid;                        // terminal_south_1_status_agent:rp_valid -> router_009:sink_valid
	wire  [108:0] terminal_south_1_status_agent_rp_data;                         // terminal_south_1_status_agent:rp_data -> router_009:sink_data
	wire          terminal_south_1_status_agent_rp_ready;                        // router_009:sink_ready -> terminal_south_1_status_agent:rp_ready
	wire          terminal_south_1_status_agent_rp_startofpacket;                // terminal_south_1_status_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          terminal_south_1_status_agent_rp_endofpacket;                  // terminal_south_1_status_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          terminal_west_0_status_agent_rp_valid;                         // terminal_west_0_status_agent:rp_valid -> router_010:sink_valid
	wire  [108:0] terminal_west_0_status_agent_rp_data;                          // terminal_west_0_status_agent:rp_data -> router_010:sink_data
	wire          terminal_west_0_status_agent_rp_ready;                         // router_010:sink_ready -> terminal_west_0_status_agent:rp_ready
	wire          terminal_west_0_status_agent_rp_startofpacket;                 // terminal_west_0_status_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          terminal_west_0_status_agent_rp_endofpacket;                   // terminal_west_0_status_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          terminal_east_1_status_agent_rp_valid;                         // terminal_east_1_status_agent:rp_valid -> router_011:sink_valid
	wire  [108:0] terminal_east_1_status_agent_rp_data;                          // terminal_east_1_status_agent:rp_data -> router_011:sink_data
	wire          terminal_east_1_status_agent_rp_ready;                         // router_011:sink_ready -> terminal_east_1_status_agent:rp_ready
	wire          terminal_east_1_status_agent_rp_startofpacket;                 // terminal_east_1_status_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          terminal_east_1_status_agent_rp_endofpacket;                   // terminal_east_1_status_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          terminal_east_0_status_agent_rp_valid;                         // terminal_east_0_status_agent:rp_valid -> router_012:sink_valid
	wire  [108:0] terminal_east_0_status_agent_rp_data;                          // terminal_east_0_status_agent:rp_data -> router_012:sink_data
	wire          terminal_east_0_status_agent_rp_ready;                         // router_012:sink_ready -> terminal_east_0_status_agent:rp_ready
	wire          terminal_east_0_status_agent_rp_startofpacket;                 // terminal_east_0_status_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          terminal_east_0_status_agent_rp_endofpacket;                   // terminal_east_0_status_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          terminal_west_1_status_agent_rp_valid;                         // terminal_west_1_status_agent:rp_valid -> router_013:sink_valid
	wire  [108:0] terminal_west_1_status_agent_rp_data;                          // terminal_west_1_status_agent:rp_data -> router_013:sink_data
	wire          terminal_west_1_status_agent_rp_ready;                         // router_013:sink_ready -> terminal_west_1_status_agent:rp_ready
	wire          terminal_west_1_status_agent_rp_startofpacket;                 // terminal_west_1_status_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          terminal_west_1_status_agent_rp_endofpacket;                   // terminal_west_1_status_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_src_valid;                                              // router:src_valid -> HPS_h2f_axi_master_wr_limiter:cmd_sink_valid
	wire  [126:0] router_src_data;                                               // router:src_data -> HPS_h2f_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                              // HPS_h2f_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire   [11:0] router_src_channel;                                            // router:src_channel -> HPS_h2f_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                      // router:src_startofpacket -> HPS_h2f_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                        // router:src_endofpacket -> HPS_h2f_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [126:0] hps_h2f_axi_master_wr_limiter_cmd_src_data;                    // HPS_h2f_axi_master_wr_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          hps_h2f_axi_master_wr_limiter_cmd_src_ready;                   // cmd_demux:sink_ready -> HPS_h2f_axi_master_wr_limiter:cmd_src_ready
	wire   [11:0] hps_h2f_axi_master_wr_limiter_cmd_src_channel;                 // HPS_h2f_axi_master_wr_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          hps_h2f_axi_master_wr_limiter_cmd_src_startofpacket;           // HPS_h2f_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          hps_h2f_axi_master_wr_limiter_cmd_src_endofpacket;             // HPS_h2f_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                             // rsp_mux:src_valid -> HPS_h2f_axi_master_wr_limiter:rsp_sink_valid
	wire  [126:0] rsp_mux_src_data;                                              // rsp_mux:src_data -> HPS_h2f_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                             // HPS_h2f_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [11:0] rsp_mux_src_channel;                                           // rsp_mux:src_channel -> HPS_h2f_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                     // rsp_mux:src_startofpacket -> HPS_h2f_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                       // rsp_mux:src_endofpacket -> HPS_h2f_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          hps_h2f_axi_master_wr_limiter_rsp_src_valid;                   // HPS_h2f_axi_master_wr_limiter:rsp_src_valid -> HPS_h2f_axi_master_agent:write_rp_valid
	wire  [126:0] hps_h2f_axi_master_wr_limiter_rsp_src_data;                    // HPS_h2f_axi_master_wr_limiter:rsp_src_data -> HPS_h2f_axi_master_agent:write_rp_data
	wire          hps_h2f_axi_master_wr_limiter_rsp_src_ready;                   // HPS_h2f_axi_master_agent:write_rp_ready -> HPS_h2f_axi_master_wr_limiter:rsp_src_ready
	wire   [11:0] hps_h2f_axi_master_wr_limiter_rsp_src_channel;                 // HPS_h2f_axi_master_wr_limiter:rsp_src_channel -> HPS_h2f_axi_master_agent:write_rp_channel
	wire          hps_h2f_axi_master_wr_limiter_rsp_src_startofpacket;           // HPS_h2f_axi_master_wr_limiter:rsp_src_startofpacket -> HPS_h2f_axi_master_agent:write_rp_startofpacket
	wire          hps_h2f_axi_master_wr_limiter_rsp_src_endofpacket;             // HPS_h2f_axi_master_wr_limiter:rsp_src_endofpacket -> HPS_h2f_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                          // router_001:src_valid -> HPS_h2f_axi_master_rd_limiter:cmd_sink_valid
	wire  [126:0] router_001_src_data;                                           // router_001:src_data -> HPS_h2f_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                          // HPS_h2f_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [11:0] router_001_src_channel;                                        // router_001:src_channel -> HPS_h2f_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                  // router_001:src_startofpacket -> HPS_h2f_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                    // router_001:src_endofpacket -> HPS_h2f_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [126:0] hps_h2f_axi_master_rd_limiter_cmd_src_data;                    // HPS_h2f_axi_master_rd_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          hps_h2f_axi_master_rd_limiter_cmd_src_ready;                   // cmd_demux_001:sink_ready -> HPS_h2f_axi_master_rd_limiter:cmd_src_ready
	wire   [11:0] hps_h2f_axi_master_rd_limiter_cmd_src_channel;                 // HPS_h2f_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          hps_h2f_axi_master_rd_limiter_cmd_src_startofpacket;           // HPS_h2f_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          hps_h2f_axi_master_rd_limiter_cmd_src_endofpacket;             // HPS_h2f_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                         // rsp_mux_001:src_valid -> HPS_h2f_axi_master_rd_limiter:rsp_sink_valid
	wire  [126:0] rsp_mux_001_src_data;                                          // rsp_mux_001:src_data -> HPS_h2f_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                         // HPS_h2f_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [11:0] rsp_mux_001_src_channel;                                       // rsp_mux_001:src_channel -> HPS_h2f_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                 // rsp_mux_001:src_startofpacket -> HPS_h2f_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                   // rsp_mux_001:src_endofpacket -> HPS_h2f_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          hps_h2f_axi_master_rd_limiter_rsp_src_valid;                   // HPS_h2f_axi_master_rd_limiter:rsp_src_valid -> HPS_h2f_axi_master_agent:read_rp_valid
	wire  [126:0] hps_h2f_axi_master_rd_limiter_rsp_src_data;                    // HPS_h2f_axi_master_rd_limiter:rsp_src_data -> HPS_h2f_axi_master_agent:read_rp_data
	wire          hps_h2f_axi_master_rd_limiter_rsp_src_ready;                   // HPS_h2f_axi_master_agent:read_rp_ready -> HPS_h2f_axi_master_rd_limiter:rsp_src_ready
	wire   [11:0] hps_h2f_axi_master_rd_limiter_rsp_src_channel;                 // HPS_h2f_axi_master_rd_limiter:rsp_src_channel -> HPS_h2f_axi_master_agent:read_rp_channel
	wire          hps_h2f_axi_master_rd_limiter_rsp_src_startofpacket;           // HPS_h2f_axi_master_rd_limiter:rsp_src_startofpacket -> HPS_h2f_axi_master_agent:read_rp_startofpacket
	wire          hps_h2f_axi_master_rd_limiter_rsp_src_endofpacket;             // HPS_h2f_axi_master_rd_limiter:rsp_src_endofpacket -> HPS_h2f_axi_master_agent:read_rp_endofpacket
	wire          node_0_processing_mem_burst_adapter_source0_valid;             // node_0_processing_mem_burst_adapter:source0_valid -> node_0_processing_mem_agent:cp_valid
	wire  [108:0] node_0_processing_mem_burst_adapter_source0_data;              // node_0_processing_mem_burst_adapter:source0_data -> node_0_processing_mem_agent:cp_data
	wire          node_0_processing_mem_burst_adapter_source0_ready;             // node_0_processing_mem_agent:cp_ready -> node_0_processing_mem_burst_adapter:source0_ready
	wire   [11:0] node_0_processing_mem_burst_adapter_source0_channel;           // node_0_processing_mem_burst_adapter:source0_channel -> node_0_processing_mem_agent:cp_channel
	wire          node_0_processing_mem_burst_adapter_source0_startofpacket;     // node_0_processing_mem_burst_adapter:source0_startofpacket -> node_0_processing_mem_agent:cp_startofpacket
	wire          node_0_processing_mem_burst_adapter_source0_endofpacket;       // node_0_processing_mem_burst_adapter:source0_endofpacket -> node_0_processing_mem_agent:cp_endofpacket
	wire          node_1_processing_mem_burst_adapter_source0_valid;             // node_1_processing_mem_burst_adapter:source0_valid -> node_1_processing_mem_agent:cp_valid
	wire  [108:0] node_1_processing_mem_burst_adapter_source0_data;              // node_1_processing_mem_burst_adapter:source0_data -> node_1_processing_mem_agent:cp_data
	wire          node_1_processing_mem_burst_adapter_source0_ready;             // node_1_processing_mem_agent:cp_ready -> node_1_processing_mem_burst_adapter:source0_ready
	wire   [11:0] node_1_processing_mem_burst_adapter_source0_channel;           // node_1_processing_mem_burst_adapter:source0_channel -> node_1_processing_mem_agent:cp_channel
	wire          node_1_processing_mem_burst_adapter_source0_startofpacket;     // node_1_processing_mem_burst_adapter:source0_startofpacket -> node_1_processing_mem_agent:cp_startofpacket
	wire          node_1_processing_mem_burst_adapter_source0_endofpacket;       // node_1_processing_mem_burst_adapter:source0_endofpacket -> node_1_processing_mem_agent:cp_endofpacket
	wire          node_65536_processing_mem_burst_adapter_source0_valid;         // node_65536_processing_mem_burst_adapter:source0_valid -> node_65536_processing_mem_agent:cp_valid
	wire  [108:0] node_65536_processing_mem_burst_adapter_source0_data;          // node_65536_processing_mem_burst_adapter:source0_data -> node_65536_processing_mem_agent:cp_data
	wire          node_65536_processing_mem_burst_adapter_source0_ready;         // node_65536_processing_mem_agent:cp_ready -> node_65536_processing_mem_burst_adapter:source0_ready
	wire   [11:0] node_65536_processing_mem_burst_adapter_source0_channel;       // node_65536_processing_mem_burst_adapter:source0_channel -> node_65536_processing_mem_agent:cp_channel
	wire          node_65536_processing_mem_burst_adapter_source0_startofpacket; // node_65536_processing_mem_burst_adapter:source0_startofpacket -> node_65536_processing_mem_agent:cp_startofpacket
	wire          node_65536_processing_mem_burst_adapter_source0_endofpacket;   // node_65536_processing_mem_burst_adapter:source0_endofpacket -> node_65536_processing_mem_agent:cp_endofpacket
	wire          node_65537_processing_mem_burst_adapter_source0_valid;         // node_65537_processing_mem_burst_adapter:source0_valid -> node_65537_processing_mem_agent:cp_valid
	wire  [108:0] node_65537_processing_mem_burst_adapter_source0_data;          // node_65537_processing_mem_burst_adapter:source0_data -> node_65537_processing_mem_agent:cp_data
	wire          node_65537_processing_mem_burst_adapter_source0_ready;         // node_65537_processing_mem_agent:cp_ready -> node_65537_processing_mem_burst_adapter:source0_ready
	wire   [11:0] node_65537_processing_mem_burst_adapter_source0_channel;       // node_65537_processing_mem_burst_adapter:source0_channel -> node_65537_processing_mem_agent:cp_channel
	wire          node_65537_processing_mem_burst_adapter_source0_startofpacket; // node_65537_processing_mem_burst_adapter:source0_startofpacket -> node_65537_processing_mem_agent:cp_startofpacket
	wire          node_65537_processing_mem_burst_adapter_source0_endofpacket;   // node_65537_processing_mem_burst_adapter:source0_endofpacket -> node_65537_processing_mem_agent:cp_endofpacket
	wire          terminal_north_0_status_burst_adapter_source0_valid;           // terminal_north_0_status_burst_adapter:source0_valid -> terminal_north_0_status_agent:cp_valid
	wire  [108:0] terminal_north_0_status_burst_adapter_source0_data;            // terminal_north_0_status_burst_adapter:source0_data -> terminal_north_0_status_agent:cp_data
	wire          terminal_north_0_status_burst_adapter_source0_ready;           // terminal_north_0_status_agent:cp_ready -> terminal_north_0_status_burst_adapter:source0_ready
	wire   [11:0] terminal_north_0_status_burst_adapter_source0_channel;         // terminal_north_0_status_burst_adapter:source0_channel -> terminal_north_0_status_agent:cp_channel
	wire          terminal_north_0_status_burst_adapter_source0_startofpacket;   // terminal_north_0_status_burst_adapter:source0_startofpacket -> terminal_north_0_status_agent:cp_startofpacket
	wire          terminal_north_0_status_burst_adapter_source0_endofpacket;     // terminal_north_0_status_burst_adapter:source0_endofpacket -> terminal_north_0_status_agent:cp_endofpacket
	wire          terminal_north_1_status_burst_adapter_source0_valid;           // terminal_north_1_status_burst_adapter:source0_valid -> terminal_north_1_status_agent:cp_valid
	wire  [108:0] terminal_north_1_status_burst_adapter_source0_data;            // terminal_north_1_status_burst_adapter:source0_data -> terminal_north_1_status_agent:cp_data
	wire          terminal_north_1_status_burst_adapter_source0_ready;           // terminal_north_1_status_agent:cp_ready -> terminal_north_1_status_burst_adapter:source0_ready
	wire   [11:0] terminal_north_1_status_burst_adapter_source0_channel;         // terminal_north_1_status_burst_adapter:source0_channel -> terminal_north_1_status_agent:cp_channel
	wire          terminal_north_1_status_burst_adapter_source0_startofpacket;   // terminal_north_1_status_burst_adapter:source0_startofpacket -> terminal_north_1_status_agent:cp_startofpacket
	wire          terminal_north_1_status_burst_adapter_source0_endofpacket;     // terminal_north_1_status_burst_adapter:source0_endofpacket -> terminal_north_1_status_agent:cp_endofpacket
	wire          terminal_south_0_status_burst_adapter_source0_valid;           // terminal_south_0_status_burst_adapter:source0_valid -> terminal_south_0_status_agent:cp_valid
	wire  [108:0] terminal_south_0_status_burst_adapter_source0_data;            // terminal_south_0_status_burst_adapter:source0_data -> terminal_south_0_status_agent:cp_data
	wire          terminal_south_0_status_burst_adapter_source0_ready;           // terminal_south_0_status_agent:cp_ready -> terminal_south_0_status_burst_adapter:source0_ready
	wire   [11:0] terminal_south_0_status_burst_adapter_source0_channel;         // terminal_south_0_status_burst_adapter:source0_channel -> terminal_south_0_status_agent:cp_channel
	wire          terminal_south_0_status_burst_adapter_source0_startofpacket;   // terminal_south_0_status_burst_adapter:source0_startofpacket -> terminal_south_0_status_agent:cp_startofpacket
	wire          terminal_south_0_status_burst_adapter_source0_endofpacket;     // terminal_south_0_status_burst_adapter:source0_endofpacket -> terminal_south_0_status_agent:cp_endofpacket
	wire          terminal_south_1_status_burst_adapter_source0_valid;           // terminal_south_1_status_burst_adapter:source0_valid -> terminal_south_1_status_agent:cp_valid
	wire  [108:0] terminal_south_1_status_burst_adapter_source0_data;            // terminal_south_1_status_burst_adapter:source0_data -> terminal_south_1_status_agent:cp_data
	wire          terminal_south_1_status_burst_adapter_source0_ready;           // terminal_south_1_status_agent:cp_ready -> terminal_south_1_status_burst_adapter:source0_ready
	wire   [11:0] terminal_south_1_status_burst_adapter_source0_channel;         // terminal_south_1_status_burst_adapter:source0_channel -> terminal_south_1_status_agent:cp_channel
	wire          terminal_south_1_status_burst_adapter_source0_startofpacket;   // terminal_south_1_status_burst_adapter:source0_startofpacket -> terminal_south_1_status_agent:cp_startofpacket
	wire          terminal_south_1_status_burst_adapter_source0_endofpacket;     // terminal_south_1_status_burst_adapter:source0_endofpacket -> terminal_south_1_status_agent:cp_endofpacket
	wire          terminal_west_0_status_burst_adapter_source0_valid;            // terminal_west_0_status_burst_adapter:source0_valid -> terminal_west_0_status_agent:cp_valid
	wire  [108:0] terminal_west_0_status_burst_adapter_source0_data;             // terminal_west_0_status_burst_adapter:source0_data -> terminal_west_0_status_agent:cp_data
	wire          terminal_west_0_status_burst_adapter_source0_ready;            // terminal_west_0_status_agent:cp_ready -> terminal_west_0_status_burst_adapter:source0_ready
	wire   [11:0] terminal_west_0_status_burst_adapter_source0_channel;          // terminal_west_0_status_burst_adapter:source0_channel -> terminal_west_0_status_agent:cp_channel
	wire          terminal_west_0_status_burst_adapter_source0_startofpacket;    // terminal_west_0_status_burst_adapter:source0_startofpacket -> terminal_west_0_status_agent:cp_startofpacket
	wire          terminal_west_0_status_burst_adapter_source0_endofpacket;      // terminal_west_0_status_burst_adapter:source0_endofpacket -> terminal_west_0_status_agent:cp_endofpacket
	wire          terminal_east_1_status_burst_adapter_source0_valid;            // terminal_east_1_status_burst_adapter:source0_valid -> terminal_east_1_status_agent:cp_valid
	wire  [108:0] terminal_east_1_status_burst_adapter_source0_data;             // terminal_east_1_status_burst_adapter:source0_data -> terminal_east_1_status_agent:cp_data
	wire          terminal_east_1_status_burst_adapter_source0_ready;            // terminal_east_1_status_agent:cp_ready -> terminal_east_1_status_burst_adapter:source0_ready
	wire   [11:0] terminal_east_1_status_burst_adapter_source0_channel;          // terminal_east_1_status_burst_adapter:source0_channel -> terminal_east_1_status_agent:cp_channel
	wire          terminal_east_1_status_burst_adapter_source0_startofpacket;    // terminal_east_1_status_burst_adapter:source0_startofpacket -> terminal_east_1_status_agent:cp_startofpacket
	wire          terminal_east_1_status_burst_adapter_source0_endofpacket;      // terminal_east_1_status_burst_adapter:source0_endofpacket -> terminal_east_1_status_agent:cp_endofpacket
	wire          terminal_east_0_status_burst_adapter_source0_valid;            // terminal_east_0_status_burst_adapter:source0_valid -> terminal_east_0_status_agent:cp_valid
	wire  [108:0] terminal_east_0_status_burst_adapter_source0_data;             // terminal_east_0_status_burst_adapter:source0_data -> terminal_east_0_status_agent:cp_data
	wire          terminal_east_0_status_burst_adapter_source0_ready;            // terminal_east_0_status_agent:cp_ready -> terminal_east_0_status_burst_adapter:source0_ready
	wire   [11:0] terminal_east_0_status_burst_adapter_source0_channel;          // terminal_east_0_status_burst_adapter:source0_channel -> terminal_east_0_status_agent:cp_channel
	wire          terminal_east_0_status_burst_adapter_source0_startofpacket;    // terminal_east_0_status_burst_adapter:source0_startofpacket -> terminal_east_0_status_agent:cp_startofpacket
	wire          terminal_east_0_status_burst_adapter_source0_endofpacket;      // terminal_east_0_status_burst_adapter:source0_endofpacket -> terminal_east_0_status_agent:cp_endofpacket
	wire          terminal_west_1_status_burst_adapter_source0_valid;            // terminal_west_1_status_burst_adapter:source0_valid -> terminal_west_1_status_agent:cp_valid
	wire  [108:0] terminal_west_1_status_burst_adapter_source0_data;             // terminal_west_1_status_burst_adapter:source0_data -> terminal_west_1_status_agent:cp_data
	wire          terminal_west_1_status_burst_adapter_source0_ready;            // terminal_west_1_status_agent:cp_ready -> terminal_west_1_status_burst_adapter:source0_ready
	wire   [11:0] terminal_west_1_status_burst_adapter_source0_channel;          // terminal_west_1_status_burst_adapter:source0_channel -> terminal_west_1_status_agent:cp_channel
	wire          terminal_west_1_status_burst_adapter_source0_startofpacket;    // terminal_west_1_status_burst_adapter:source0_startofpacket -> terminal_west_1_status_agent:cp_startofpacket
	wire          terminal_west_1_status_burst_adapter_source0_endofpacket;      // terminal_west_1_status_burst_adapter:source0_endofpacket -> terminal_west_1_status_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                          // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [126:0] cmd_demux_src0_data;                                           // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                          // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [11:0] cmd_demux_src0_channel;                                        // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                  // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                    // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                          // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [126:0] cmd_demux_src1_data;                                           // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                          // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [11:0] cmd_demux_src1_channel;                                        // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                  // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                    // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                          // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [126:0] cmd_demux_src2_data;                                           // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                          // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [11:0] cmd_demux_src2_channel;                                        // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                  // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                    // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                          // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [126:0] cmd_demux_src3_data;                                           // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                          // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [11:0] cmd_demux_src3_channel;                                        // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                  // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                    // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                          // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [126:0] cmd_demux_src4_data;                                           // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                          // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [11:0] cmd_demux_src4_channel;                                        // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                  // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                    // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                          // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [126:0] cmd_demux_src5_data;                                           // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                          // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [11:0] cmd_demux_src5_channel;                                        // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                  // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                    // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                          // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [126:0] cmd_demux_src6_data;                                           // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                          // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [11:0] cmd_demux_src6_channel;                                        // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                  // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                    // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                          // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [126:0] cmd_demux_src7_data;                                           // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                          // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [11:0] cmd_demux_src7_channel;                                        // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                  // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                    // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                          // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [126:0] cmd_demux_src8_data;                                           // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                          // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [11:0] cmd_demux_src8_channel;                                        // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                  // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                    // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                          // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [126:0] cmd_demux_src9_data;                                           // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                          // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [11:0] cmd_demux_src9_channel;                                        // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                  // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                    // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                         // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [126:0] cmd_demux_src10_data;                                          // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                         // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [11:0] cmd_demux_src10_channel;                                       // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                                 // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                   // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                         // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [126:0] cmd_demux_src11_data;                                          // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_src11_ready;                                         // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire   [11:0] cmd_demux_src11_channel;                                       // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_startofpacket;                                 // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_src11_endofpacket;                                   // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                      // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [126:0] cmd_demux_001_src0_data;                                       // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                      // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire   [11:0] cmd_demux_001_src0_channel;                                    // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                              // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                      // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [126:0] cmd_demux_001_src1_data;                                       // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src1_ready;                                      // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire   [11:0] cmd_demux_001_src1_channel;                                    // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                              // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                      // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire  [126:0] cmd_demux_001_src2_data;                                       // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src2_ready;                                      // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire   [11:0] cmd_demux_001_src2_channel;                                    // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                              // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                      // cmd_demux_001:src3_valid -> cmd_mux_003:sink1_valid
	wire  [126:0] cmd_demux_001_src3_data;                                       // cmd_demux_001:src3_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src3_ready;                                      // cmd_mux_003:sink1_ready -> cmd_demux_001:src3_ready
	wire   [11:0] cmd_demux_001_src3_channel;                                    // cmd_demux_001:src3_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                              // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                      // cmd_demux_001:src4_valid -> cmd_mux_004:sink1_valid
	wire  [126:0] cmd_demux_001_src4_data;                                       // cmd_demux_001:src4_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_001_src4_ready;                                      // cmd_mux_004:sink1_ready -> cmd_demux_001:src4_ready
	wire   [11:0] cmd_demux_001_src4_channel;                                    // cmd_demux_001:src4_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src4_startofpacket;                              // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src5_valid;                                      // cmd_demux_001:src5_valid -> cmd_mux_005:sink1_valid
	wire  [126:0] cmd_demux_001_src5_data;                                       // cmd_demux_001:src5_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_001_src5_ready;                                      // cmd_mux_005:sink1_ready -> cmd_demux_001:src5_ready
	wire   [11:0] cmd_demux_001_src5_channel;                                    // cmd_demux_001:src5_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_001_src5_startofpacket;                              // cmd_demux_001:src5_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                // cmd_demux_001:src5_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_001_src6_valid;                                      // cmd_demux_001:src6_valid -> cmd_mux_006:sink1_valid
	wire  [126:0] cmd_demux_001_src6_data;                                       // cmd_demux_001:src6_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_001_src6_ready;                                      // cmd_mux_006:sink1_ready -> cmd_demux_001:src6_ready
	wire   [11:0] cmd_demux_001_src6_channel;                                    // cmd_demux_001:src6_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_001_src6_startofpacket;                              // cmd_demux_001:src6_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                // cmd_demux_001:src6_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_001_src7_valid;                                      // cmd_demux_001:src7_valid -> cmd_mux_007:sink1_valid
	wire  [126:0] cmd_demux_001_src7_data;                                       // cmd_demux_001:src7_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_001_src7_ready;                                      // cmd_mux_007:sink1_ready -> cmd_demux_001:src7_ready
	wire   [11:0] cmd_demux_001_src7_channel;                                    // cmd_demux_001:src7_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_001_src7_startofpacket;                              // cmd_demux_001:src7_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                // cmd_demux_001:src7_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_001_src8_valid;                                      // cmd_demux_001:src8_valid -> cmd_mux_008:sink1_valid
	wire  [126:0] cmd_demux_001_src8_data;                                       // cmd_demux_001:src8_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_001_src8_ready;                                      // cmd_mux_008:sink1_ready -> cmd_demux_001:src8_ready
	wire   [11:0] cmd_demux_001_src8_channel;                                    // cmd_demux_001:src8_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_001_src8_startofpacket;                              // cmd_demux_001:src8_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_001_src8_endofpacket;                                // cmd_demux_001:src8_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_001_src9_valid;                                      // cmd_demux_001:src9_valid -> cmd_mux_009:sink1_valid
	wire  [126:0] cmd_demux_001_src9_data;                                       // cmd_demux_001:src9_data -> cmd_mux_009:sink1_data
	wire          cmd_demux_001_src9_ready;                                      // cmd_mux_009:sink1_ready -> cmd_demux_001:src9_ready
	wire   [11:0] cmd_demux_001_src9_channel;                                    // cmd_demux_001:src9_channel -> cmd_mux_009:sink1_channel
	wire          cmd_demux_001_src9_startofpacket;                              // cmd_demux_001:src9_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire          cmd_demux_001_src9_endofpacket;                                // cmd_demux_001:src9_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          cmd_demux_001_src10_valid;                                     // cmd_demux_001:src10_valid -> cmd_mux_010:sink1_valid
	wire  [126:0] cmd_demux_001_src10_data;                                      // cmd_demux_001:src10_data -> cmd_mux_010:sink1_data
	wire          cmd_demux_001_src10_ready;                                     // cmd_mux_010:sink1_ready -> cmd_demux_001:src10_ready
	wire   [11:0] cmd_demux_001_src10_channel;                                   // cmd_demux_001:src10_channel -> cmd_mux_010:sink1_channel
	wire          cmd_demux_001_src10_startofpacket;                             // cmd_demux_001:src10_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire          cmd_demux_001_src10_endofpacket;                               // cmd_demux_001:src10_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          cmd_demux_001_src11_valid;                                     // cmd_demux_001:src11_valid -> cmd_mux_011:sink1_valid
	wire  [126:0] cmd_demux_001_src11_data;                                      // cmd_demux_001:src11_data -> cmd_mux_011:sink1_data
	wire          cmd_demux_001_src11_ready;                                     // cmd_mux_011:sink1_ready -> cmd_demux_001:src11_ready
	wire   [11:0] cmd_demux_001_src11_channel;                                   // cmd_demux_001:src11_channel -> cmd_mux_011:sink1_channel
	wire          cmd_demux_001_src11_startofpacket;                             // cmd_demux_001:src11_startofpacket -> cmd_mux_011:sink1_startofpacket
	wire          cmd_demux_001_src11_endofpacket;                               // cmd_demux_001:src11_endofpacket -> cmd_mux_011:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                          // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [126:0] rsp_demux_src0_data;                                           // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                          // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [11:0] rsp_demux_src0_channel;                                        // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                  // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                    // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                          // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [126:0] rsp_demux_src1_data;                                           // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                          // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire   [11:0] rsp_demux_src1_channel;                                        // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                  // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                    // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                      // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [126:0] rsp_demux_001_src0_data;                                       // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                      // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [11:0] rsp_demux_001_src0_channel;                                    // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                              // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                      // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [126:0] rsp_demux_001_src1_data;                                       // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src1_ready;                                      // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire   [11:0] rsp_demux_001_src1_channel;                                    // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                              // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                      // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [126:0] rsp_demux_002_src0_data;                                       // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                      // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [11:0] rsp_demux_002_src0_channel;                                    // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                              // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                      // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire  [126:0] rsp_demux_002_src1_data;                                       // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src1_ready;                                      // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire   [11:0] rsp_demux_002_src1_channel;                                    // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src1_startofpacket;                              // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                      // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [126:0] rsp_demux_003_src0_data;                                       // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                      // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [11:0] rsp_demux_003_src0_channel;                                    // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                              // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                      // rsp_demux_003:src1_valid -> rsp_mux_001:sink3_valid
	wire  [126:0] rsp_demux_003_src1_data;                                       // rsp_demux_003:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_003_src1_ready;                                      // rsp_mux_001:sink3_ready -> rsp_demux_003:src1_ready
	wire   [11:0] rsp_demux_003_src1_channel;                                    // rsp_demux_003:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src1_startofpacket;                              // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                      // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [126:0] rsp_demux_004_src0_data;                                       // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                      // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [11:0] rsp_demux_004_src0_channel;                                    // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                              // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                      // rsp_demux_004:src1_valid -> rsp_mux_001:sink4_valid
	wire  [126:0] rsp_demux_004_src1_data;                                       // rsp_demux_004:src1_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_004_src1_ready;                                      // rsp_mux_001:sink4_ready -> rsp_demux_004:src1_ready
	wire   [11:0] rsp_demux_004_src1_channel;                                    // rsp_demux_004:src1_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_004_src1_startofpacket;                              // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                      // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [126:0] rsp_demux_005_src0_data;                                       // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                      // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [11:0] rsp_demux_005_src0_channel;                                    // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                              // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                      // rsp_demux_005:src1_valid -> rsp_mux_001:sink5_valid
	wire  [126:0] rsp_demux_005_src1_data;                                       // rsp_demux_005:src1_data -> rsp_mux_001:sink5_data
	wire          rsp_demux_005_src1_ready;                                      // rsp_mux_001:sink5_ready -> rsp_demux_005:src1_ready
	wire   [11:0] rsp_demux_005_src1_channel;                                    // rsp_demux_005:src1_channel -> rsp_mux_001:sink5_channel
	wire          rsp_demux_005_src1_startofpacket;                              // rsp_demux_005:src1_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                // rsp_demux_005:src1_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                      // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [126:0] rsp_demux_006_src0_data;                                       // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                      // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [11:0] rsp_demux_006_src0_channel;                                    // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                              // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                      // rsp_demux_006:src1_valid -> rsp_mux_001:sink6_valid
	wire  [126:0] rsp_demux_006_src1_data;                                       // rsp_demux_006:src1_data -> rsp_mux_001:sink6_data
	wire          rsp_demux_006_src1_ready;                                      // rsp_mux_001:sink6_ready -> rsp_demux_006:src1_ready
	wire   [11:0] rsp_demux_006_src1_channel;                                    // rsp_demux_006:src1_channel -> rsp_mux_001:sink6_channel
	wire          rsp_demux_006_src1_startofpacket;                              // rsp_demux_006:src1_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                // rsp_demux_006:src1_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                      // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [126:0] rsp_demux_007_src0_data;                                       // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                      // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [11:0] rsp_demux_007_src0_channel;                                    // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                              // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                      // rsp_demux_007:src1_valid -> rsp_mux_001:sink7_valid
	wire  [126:0] rsp_demux_007_src1_data;                                       // rsp_demux_007:src1_data -> rsp_mux_001:sink7_data
	wire          rsp_demux_007_src1_ready;                                      // rsp_mux_001:sink7_ready -> rsp_demux_007:src1_ready
	wire   [11:0] rsp_demux_007_src1_channel;                                    // rsp_demux_007:src1_channel -> rsp_mux_001:sink7_channel
	wire          rsp_demux_007_src1_startofpacket;                              // rsp_demux_007:src1_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                // rsp_demux_007:src1_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                      // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [126:0] rsp_demux_008_src0_data;                                       // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                      // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [11:0] rsp_demux_008_src0_channel;                                    // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                              // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                      // rsp_demux_008:src1_valid -> rsp_mux_001:sink8_valid
	wire  [126:0] rsp_demux_008_src1_data;                                       // rsp_demux_008:src1_data -> rsp_mux_001:sink8_data
	wire          rsp_demux_008_src1_ready;                                      // rsp_mux_001:sink8_ready -> rsp_demux_008:src1_ready
	wire   [11:0] rsp_demux_008_src1_channel;                                    // rsp_demux_008:src1_channel -> rsp_mux_001:sink8_channel
	wire          rsp_demux_008_src1_startofpacket;                              // rsp_demux_008:src1_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                // rsp_demux_008:src1_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                      // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [126:0] rsp_demux_009_src0_data;                                       // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                      // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [11:0] rsp_demux_009_src0_channel;                                    // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                              // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_009_src1_valid;                                      // rsp_demux_009:src1_valid -> rsp_mux_001:sink9_valid
	wire  [126:0] rsp_demux_009_src1_data;                                       // rsp_demux_009:src1_data -> rsp_mux_001:sink9_data
	wire          rsp_demux_009_src1_ready;                                      // rsp_mux_001:sink9_ready -> rsp_demux_009:src1_ready
	wire   [11:0] rsp_demux_009_src1_channel;                                    // rsp_demux_009:src1_channel -> rsp_mux_001:sink9_channel
	wire          rsp_demux_009_src1_startofpacket;                              // rsp_demux_009:src1_startofpacket -> rsp_mux_001:sink9_startofpacket
	wire          rsp_demux_009_src1_endofpacket;                                // rsp_demux_009:src1_endofpacket -> rsp_mux_001:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                      // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [126:0] rsp_demux_010_src0_data;                                       // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                      // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [11:0] rsp_demux_010_src0_channel;                                    // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                              // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_010_src1_valid;                                      // rsp_demux_010:src1_valid -> rsp_mux_001:sink10_valid
	wire  [126:0] rsp_demux_010_src1_data;                                       // rsp_demux_010:src1_data -> rsp_mux_001:sink10_data
	wire          rsp_demux_010_src1_ready;                                      // rsp_mux_001:sink10_ready -> rsp_demux_010:src1_ready
	wire   [11:0] rsp_demux_010_src1_channel;                                    // rsp_demux_010:src1_channel -> rsp_mux_001:sink10_channel
	wire          rsp_demux_010_src1_startofpacket;                              // rsp_demux_010:src1_startofpacket -> rsp_mux_001:sink10_startofpacket
	wire          rsp_demux_010_src1_endofpacket;                                // rsp_demux_010:src1_endofpacket -> rsp_mux_001:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                      // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [126:0] rsp_demux_011_src0_data;                                       // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire          rsp_demux_011_src0_ready;                                      // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire   [11:0] rsp_demux_011_src0_channel;                                    // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                              // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_011_src1_valid;                                      // rsp_demux_011:src1_valid -> rsp_mux_001:sink11_valid
	wire  [126:0] rsp_demux_011_src1_data;                                       // rsp_demux_011:src1_data -> rsp_mux_001:sink11_data
	wire          rsp_demux_011_src1_ready;                                      // rsp_mux_001:sink11_ready -> rsp_demux_011:src1_ready
	wire   [11:0] rsp_demux_011_src1_channel;                                    // rsp_demux_011:src1_channel -> rsp_mux_001:sink11_channel
	wire          rsp_demux_011_src1_startofpacket;                              // rsp_demux_011:src1_startofpacket -> rsp_mux_001:sink11_startofpacket
	wire          rsp_demux_011_src1_endofpacket;                                // rsp_demux_011:src1_endofpacket -> rsp_mux_001:sink11_endofpacket
	wire          router_002_src_valid;                                          // router_002:src_valid -> node_0_processing_mem_rsp_width_adapter:in_valid
	wire  [108:0] router_002_src_data;                                           // router_002:src_data -> node_0_processing_mem_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                          // node_0_processing_mem_rsp_width_adapter:in_ready -> router_002:src_ready
	wire   [11:0] router_002_src_channel;                                        // router_002:src_channel -> node_0_processing_mem_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                  // router_002:src_startofpacket -> node_0_processing_mem_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                    // router_002:src_endofpacket -> node_0_processing_mem_rsp_width_adapter:in_endofpacket
	wire          node_0_processing_mem_rsp_width_adapter_src_valid;             // node_0_processing_mem_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [126:0] node_0_processing_mem_rsp_width_adapter_src_data;              // node_0_processing_mem_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          node_0_processing_mem_rsp_width_adapter_src_ready;             // rsp_demux:sink_ready -> node_0_processing_mem_rsp_width_adapter:out_ready
	wire   [11:0] node_0_processing_mem_rsp_width_adapter_src_channel;           // node_0_processing_mem_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          node_0_processing_mem_rsp_width_adapter_src_startofpacket;     // node_0_processing_mem_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          node_0_processing_mem_rsp_width_adapter_src_endofpacket;       // node_0_processing_mem_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_003_src_valid;                                          // router_003:src_valid -> node_1_processing_mem_rsp_width_adapter:in_valid
	wire  [108:0] router_003_src_data;                                           // router_003:src_data -> node_1_processing_mem_rsp_width_adapter:in_data
	wire          router_003_src_ready;                                          // node_1_processing_mem_rsp_width_adapter:in_ready -> router_003:src_ready
	wire   [11:0] router_003_src_channel;                                        // router_003:src_channel -> node_1_processing_mem_rsp_width_adapter:in_channel
	wire          router_003_src_startofpacket;                                  // router_003:src_startofpacket -> node_1_processing_mem_rsp_width_adapter:in_startofpacket
	wire          router_003_src_endofpacket;                                    // router_003:src_endofpacket -> node_1_processing_mem_rsp_width_adapter:in_endofpacket
	wire          node_1_processing_mem_rsp_width_adapter_src_valid;             // node_1_processing_mem_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire  [126:0] node_1_processing_mem_rsp_width_adapter_src_data;              // node_1_processing_mem_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire          node_1_processing_mem_rsp_width_adapter_src_ready;             // rsp_demux_001:sink_ready -> node_1_processing_mem_rsp_width_adapter:out_ready
	wire   [11:0] node_1_processing_mem_rsp_width_adapter_src_channel;           // node_1_processing_mem_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire          node_1_processing_mem_rsp_width_adapter_src_startofpacket;     // node_1_processing_mem_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          node_1_processing_mem_rsp_width_adapter_src_endofpacket;       // node_1_processing_mem_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_004_src_valid;                                          // router_004:src_valid -> node_65536_processing_mem_rsp_width_adapter:in_valid
	wire  [108:0] router_004_src_data;                                           // router_004:src_data -> node_65536_processing_mem_rsp_width_adapter:in_data
	wire          router_004_src_ready;                                          // node_65536_processing_mem_rsp_width_adapter:in_ready -> router_004:src_ready
	wire   [11:0] router_004_src_channel;                                        // router_004:src_channel -> node_65536_processing_mem_rsp_width_adapter:in_channel
	wire          router_004_src_startofpacket;                                  // router_004:src_startofpacket -> node_65536_processing_mem_rsp_width_adapter:in_startofpacket
	wire          router_004_src_endofpacket;                                    // router_004:src_endofpacket -> node_65536_processing_mem_rsp_width_adapter:in_endofpacket
	wire          node_65536_processing_mem_rsp_width_adapter_src_valid;         // node_65536_processing_mem_rsp_width_adapter:out_valid -> rsp_demux_002:sink_valid
	wire  [126:0] node_65536_processing_mem_rsp_width_adapter_src_data;          // node_65536_processing_mem_rsp_width_adapter:out_data -> rsp_demux_002:sink_data
	wire          node_65536_processing_mem_rsp_width_adapter_src_ready;         // rsp_demux_002:sink_ready -> node_65536_processing_mem_rsp_width_adapter:out_ready
	wire   [11:0] node_65536_processing_mem_rsp_width_adapter_src_channel;       // node_65536_processing_mem_rsp_width_adapter:out_channel -> rsp_demux_002:sink_channel
	wire          node_65536_processing_mem_rsp_width_adapter_src_startofpacket; // node_65536_processing_mem_rsp_width_adapter:out_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          node_65536_processing_mem_rsp_width_adapter_src_endofpacket;   // node_65536_processing_mem_rsp_width_adapter:out_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_005_src_valid;                                          // router_005:src_valid -> node_65537_processing_mem_rsp_width_adapter:in_valid
	wire  [108:0] router_005_src_data;                                           // router_005:src_data -> node_65537_processing_mem_rsp_width_adapter:in_data
	wire          router_005_src_ready;                                          // node_65537_processing_mem_rsp_width_adapter:in_ready -> router_005:src_ready
	wire   [11:0] router_005_src_channel;                                        // router_005:src_channel -> node_65537_processing_mem_rsp_width_adapter:in_channel
	wire          router_005_src_startofpacket;                                  // router_005:src_startofpacket -> node_65537_processing_mem_rsp_width_adapter:in_startofpacket
	wire          router_005_src_endofpacket;                                    // router_005:src_endofpacket -> node_65537_processing_mem_rsp_width_adapter:in_endofpacket
	wire          node_65537_processing_mem_rsp_width_adapter_src_valid;         // node_65537_processing_mem_rsp_width_adapter:out_valid -> rsp_demux_003:sink_valid
	wire  [126:0] node_65537_processing_mem_rsp_width_adapter_src_data;          // node_65537_processing_mem_rsp_width_adapter:out_data -> rsp_demux_003:sink_data
	wire          node_65537_processing_mem_rsp_width_adapter_src_ready;         // rsp_demux_003:sink_ready -> node_65537_processing_mem_rsp_width_adapter:out_ready
	wire   [11:0] node_65537_processing_mem_rsp_width_adapter_src_channel;       // node_65537_processing_mem_rsp_width_adapter:out_channel -> rsp_demux_003:sink_channel
	wire          node_65537_processing_mem_rsp_width_adapter_src_startofpacket; // node_65537_processing_mem_rsp_width_adapter:out_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          node_65537_processing_mem_rsp_width_adapter_src_endofpacket;   // node_65537_processing_mem_rsp_width_adapter:out_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_006_src_valid;                                          // router_006:src_valid -> terminal_north_0_status_rsp_width_adapter:in_valid
	wire  [108:0] router_006_src_data;                                           // router_006:src_data -> terminal_north_0_status_rsp_width_adapter:in_data
	wire          router_006_src_ready;                                          // terminal_north_0_status_rsp_width_adapter:in_ready -> router_006:src_ready
	wire   [11:0] router_006_src_channel;                                        // router_006:src_channel -> terminal_north_0_status_rsp_width_adapter:in_channel
	wire          router_006_src_startofpacket;                                  // router_006:src_startofpacket -> terminal_north_0_status_rsp_width_adapter:in_startofpacket
	wire          router_006_src_endofpacket;                                    // router_006:src_endofpacket -> terminal_north_0_status_rsp_width_adapter:in_endofpacket
	wire          terminal_north_0_status_rsp_width_adapter_src_valid;           // terminal_north_0_status_rsp_width_adapter:out_valid -> rsp_demux_004:sink_valid
	wire  [126:0] terminal_north_0_status_rsp_width_adapter_src_data;            // terminal_north_0_status_rsp_width_adapter:out_data -> rsp_demux_004:sink_data
	wire          terminal_north_0_status_rsp_width_adapter_src_ready;           // rsp_demux_004:sink_ready -> terminal_north_0_status_rsp_width_adapter:out_ready
	wire   [11:0] terminal_north_0_status_rsp_width_adapter_src_channel;         // terminal_north_0_status_rsp_width_adapter:out_channel -> rsp_demux_004:sink_channel
	wire          terminal_north_0_status_rsp_width_adapter_src_startofpacket;   // terminal_north_0_status_rsp_width_adapter:out_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          terminal_north_0_status_rsp_width_adapter_src_endofpacket;     // terminal_north_0_status_rsp_width_adapter:out_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          router_007_src_valid;                                          // router_007:src_valid -> terminal_north_1_status_rsp_width_adapter:in_valid
	wire  [108:0] router_007_src_data;                                           // router_007:src_data -> terminal_north_1_status_rsp_width_adapter:in_data
	wire          router_007_src_ready;                                          // terminal_north_1_status_rsp_width_adapter:in_ready -> router_007:src_ready
	wire   [11:0] router_007_src_channel;                                        // router_007:src_channel -> terminal_north_1_status_rsp_width_adapter:in_channel
	wire          router_007_src_startofpacket;                                  // router_007:src_startofpacket -> terminal_north_1_status_rsp_width_adapter:in_startofpacket
	wire          router_007_src_endofpacket;                                    // router_007:src_endofpacket -> terminal_north_1_status_rsp_width_adapter:in_endofpacket
	wire          terminal_north_1_status_rsp_width_adapter_src_valid;           // terminal_north_1_status_rsp_width_adapter:out_valid -> rsp_demux_005:sink_valid
	wire  [126:0] terminal_north_1_status_rsp_width_adapter_src_data;            // terminal_north_1_status_rsp_width_adapter:out_data -> rsp_demux_005:sink_data
	wire          terminal_north_1_status_rsp_width_adapter_src_ready;           // rsp_demux_005:sink_ready -> terminal_north_1_status_rsp_width_adapter:out_ready
	wire   [11:0] terminal_north_1_status_rsp_width_adapter_src_channel;         // terminal_north_1_status_rsp_width_adapter:out_channel -> rsp_demux_005:sink_channel
	wire          terminal_north_1_status_rsp_width_adapter_src_startofpacket;   // terminal_north_1_status_rsp_width_adapter:out_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          terminal_north_1_status_rsp_width_adapter_src_endofpacket;     // terminal_north_1_status_rsp_width_adapter:out_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          router_008_src_valid;                                          // router_008:src_valid -> terminal_south_0_status_rsp_width_adapter:in_valid
	wire  [108:0] router_008_src_data;                                           // router_008:src_data -> terminal_south_0_status_rsp_width_adapter:in_data
	wire          router_008_src_ready;                                          // terminal_south_0_status_rsp_width_adapter:in_ready -> router_008:src_ready
	wire   [11:0] router_008_src_channel;                                        // router_008:src_channel -> terminal_south_0_status_rsp_width_adapter:in_channel
	wire          router_008_src_startofpacket;                                  // router_008:src_startofpacket -> terminal_south_0_status_rsp_width_adapter:in_startofpacket
	wire          router_008_src_endofpacket;                                    // router_008:src_endofpacket -> terminal_south_0_status_rsp_width_adapter:in_endofpacket
	wire          terminal_south_0_status_rsp_width_adapter_src_valid;           // terminal_south_0_status_rsp_width_adapter:out_valid -> rsp_demux_006:sink_valid
	wire  [126:0] terminal_south_0_status_rsp_width_adapter_src_data;            // terminal_south_0_status_rsp_width_adapter:out_data -> rsp_demux_006:sink_data
	wire          terminal_south_0_status_rsp_width_adapter_src_ready;           // rsp_demux_006:sink_ready -> terminal_south_0_status_rsp_width_adapter:out_ready
	wire   [11:0] terminal_south_0_status_rsp_width_adapter_src_channel;         // terminal_south_0_status_rsp_width_adapter:out_channel -> rsp_demux_006:sink_channel
	wire          terminal_south_0_status_rsp_width_adapter_src_startofpacket;   // terminal_south_0_status_rsp_width_adapter:out_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          terminal_south_0_status_rsp_width_adapter_src_endofpacket;     // terminal_south_0_status_rsp_width_adapter:out_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          router_009_src_valid;                                          // router_009:src_valid -> terminal_south_1_status_rsp_width_adapter:in_valid
	wire  [108:0] router_009_src_data;                                           // router_009:src_data -> terminal_south_1_status_rsp_width_adapter:in_data
	wire          router_009_src_ready;                                          // terminal_south_1_status_rsp_width_adapter:in_ready -> router_009:src_ready
	wire   [11:0] router_009_src_channel;                                        // router_009:src_channel -> terminal_south_1_status_rsp_width_adapter:in_channel
	wire          router_009_src_startofpacket;                                  // router_009:src_startofpacket -> terminal_south_1_status_rsp_width_adapter:in_startofpacket
	wire          router_009_src_endofpacket;                                    // router_009:src_endofpacket -> terminal_south_1_status_rsp_width_adapter:in_endofpacket
	wire          terminal_south_1_status_rsp_width_adapter_src_valid;           // terminal_south_1_status_rsp_width_adapter:out_valid -> rsp_demux_007:sink_valid
	wire  [126:0] terminal_south_1_status_rsp_width_adapter_src_data;            // terminal_south_1_status_rsp_width_adapter:out_data -> rsp_demux_007:sink_data
	wire          terminal_south_1_status_rsp_width_adapter_src_ready;           // rsp_demux_007:sink_ready -> terminal_south_1_status_rsp_width_adapter:out_ready
	wire   [11:0] terminal_south_1_status_rsp_width_adapter_src_channel;         // terminal_south_1_status_rsp_width_adapter:out_channel -> rsp_demux_007:sink_channel
	wire          terminal_south_1_status_rsp_width_adapter_src_startofpacket;   // terminal_south_1_status_rsp_width_adapter:out_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          terminal_south_1_status_rsp_width_adapter_src_endofpacket;     // terminal_south_1_status_rsp_width_adapter:out_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          router_010_src_valid;                                          // router_010:src_valid -> terminal_west_0_status_rsp_width_adapter:in_valid
	wire  [108:0] router_010_src_data;                                           // router_010:src_data -> terminal_west_0_status_rsp_width_adapter:in_data
	wire          router_010_src_ready;                                          // terminal_west_0_status_rsp_width_adapter:in_ready -> router_010:src_ready
	wire   [11:0] router_010_src_channel;                                        // router_010:src_channel -> terminal_west_0_status_rsp_width_adapter:in_channel
	wire          router_010_src_startofpacket;                                  // router_010:src_startofpacket -> terminal_west_0_status_rsp_width_adapter:in_startofpacket
	wire          router_010_src_endofpacket;                                    // router_010:src_endofpacket -> terminal_west_0_status_rsp_width_adapter:in_endofpacket
	wire          terminal_west_0_status_rsp_width_adapter_src_valid;            // terminal_west_0_status_rsp_width_adapter:out_valid -> rsp_demux_008:sink_valid
	wire  [126:0] terminal_west_0_status_rsp_width_adapter_src_data;             // terminal_west_0_status_rsp_width_adapter:out_data -> rsp_demux_008:sink_data
	wire          terminal_west_0_status_rsp_width_adapter_src_ready;            // rsp_demux_008:sink_ready -> terminal_west_0_status_rsp_width_adapter:out_ready
	wire   [11:0] terminal_west_0_status_rsp_width_adapter_src_channel;          // terminal_west_0_status_rsp_width_adapter:out_channel -> rsp_demux_008:sink_channel
	wire          terminal_west_0_status_rsp_width_adapter_src_startofpacket;    // terminal_west_0_status_rsp_width_adapter:out_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          terminal_west_0_status_rsp_width_adapter_src_endofpacket;      // terminal_west_0_status_rsp_width_adapter:out_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          router_011_src_valid;                                          // router_011:src_valid -> terminal_east_1_status_rsp_width_adapter:in_valid
	wire  [108:0] router_011_src_data;                                           // router_011:src_data -> terminal_east_1_status_rsp_width_adapter:in_data
	wire          router_011_src_ready;                                          // terminal_east_1_status_rsp_width_adapter:in_ready -> router_011:src_ready
	wire   [11:0] router_011_src_channel;                                        // router_011:src_channel -> terminal_east_1_status_rsp_width_adapter:in_channel
	wire          router_011_src_startofpacket;                                  // router_011:src_startofpacket -> terminal_east_1_status_rsp_width_adapter:in_startofpacket
	wire          router_011_src_endofpacket;                                    // router_011:src_endofpacket -> terminal_east_1_status_rsp_width_adapter:in_endofpacket
	wire          terminal_east_1_status_rsp_width_adapter_src_valid;            // terminal_east_1_status_rsp_width_adapter:out_valid -> rsp_demux_009:sink_valid
	wire  [126:0] terminal_east_1_status_rsp_width_adapter_src_data;             // terminal_east_1_status_rsp_width_adapter:out_data -> rsp_demux_009:sink_data
	wire          terminal_east_1_status_rsp_width_adapter_src_ready;            // rsp_demux_009:sink_ready -> terminal_east_1_status_rsp_width_adapter:out_ready
	wire   [11:0] terminal_east_1_status_rsp_width_adapter_src_channel;          // terminal_east_1_status_rsp_width_adapter:out_channel -> rsp_demux_009:sink_channel
	wire          terminal_east_1_status_rsp_width_adapter_src_startofpacket;    // terminal_east_1_status_rsp_width_adapter:out_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          terminal_east_1_status_rsp_width_adapter_src_endofpacket;      // terminal_east_1_status_rsp_width_adapter:out_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          router_012_src_valid;                                          // router_012:src_valid -> terminal_east_0_status_rsp_width_adapter:in_valid
	wire  [108:0] router_012_src_data;                                           // router_012:src_data -> terminal_east_0_status_rsp_width_adapter:in_data
	wire          router_012_src_ready;                                          // terminal_east_0_status_rsp_width_adapter:in_ready -> router_012:src_ready
	wire   [11:0] router_012_src_channel;                                        // router_012:src_channel -> terminal_east_0_status_rsp_width_adapter:in_channel
	wire          router_012_src_startofpacket;                                  // router_012:src_startofpacket -> terminal_east_0_status_rsp_width_adapter:in_startofpacket
	wire          router_012_src_endofpacket;                                    // router_012:src_endofpacket -> terminal_east_0_status_rsp_width_adapter:in_endofpacket
	wire          terminal_east_0_status_rsp_width_adapter_src_valid;            // terminal_east_0_status_rsp_width_adapter:out_valid -> rsp_demux_010:sink_valid
	wire  [126:0] terminal_east_0_status_rsp_width_adapter_src_data;             // terminal_east_0_status_rsp_width_adapter:out_data -> rsp_demux_010:sink_data
	wire          terminal_east_0_status_rsp_width_adapter_src_ready;            // rsp_demux_010:sink_ready -> terminal_east_0_status_rsp_width_adapter:out_ready
	wire   [11:0] terminal_east_0_status_rsp_width_adapter_src_channel;          // terminal_east_0_status_rsp_width_adapter:out_channel -> rsp_demux_010:sink_channel
	wire          terminal_east_0_status_rsp_width_adapter_src_startofpacket;    // terminal_east_0_status_rsp_width_adapter:out_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          terminal_east_0_status_rsp_width_adapter_src_endofpacket;      // terminal_east_0_status_rsp_width_adapter:out_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          router_013_src_valid;                                          // router_013:src_valid -> terminal_west_1_status_rsp_width_adapter:in_valid
	wire  [108:0] router_013_src_data;                                           // router_013:src_data -> terminal_west_1_status_rsp_width_adapter:in_data
	wire          router_013_src_ready;                                          // terminal_west_1_status_rsp_width_adapter:in_ready -> router_013:src_ready
	wire   [11:0] router_013_src_channel;                                        // router_013:src_channel -> terminal_west_1_status_rsp_width_adapter:in_channel
	wire          router_013_src_startofpacket;                                  // router_013:src_startofpacket -> terminal_west_1_status_rsp_width_adapter:in_startofpacket
	wire          router_013_src_endofpacket;                                    // router_013:src_endofpacket -> terminal_west_1_status_rsp_width_adapter:in_endofpacket
	wire          terminal_west_1_status_rsp_width_adapter_src_valid;            // terminal_west_1_status_rsp_width_adapter:out_valid -> rsp_demux_011:sink_valid
	wire  [126:0] terminal_west_1_status_rsp_width_adapter_src_data;             // terminal_west_1_status_rsp_width_adapter:out_data -> rsp_demux_011:sink_data
	wire          terminal_west_1_status_rsp_width_adapter_src_ready;            // rsp_demux_011:sink_ready -> terminal_west_1_status_rsp_width_adapter:out_ready
	wire   [11:0] terminal_west_1_status_rsp_width_adapter_src_channel;          // terminal_west_1_status_rsp_width_adapter:out_channel -> rsp_demux_011:sink_channel
	wire          terminal_west_1_status_rsp_width_adapter_src_startofpacket;    // terminal_west_1_status_rsp_width_adapter:out_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          terminal_west_1_status_rsp_width_adapter_src_endofpacket;      // terminal_west_1_status_rsp_width_adapter:out_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          cmd_mux_src_valid;                                             // cmd_mux:src_valid -> node_0_processing_mem_cmd_width_adapter:in_valid
	wire  [126:0] cmd_mux_src_data;                                              // cmd_mux:src_data -> node_0_processing_mem_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                             // node_0_processing_mem_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire   [11:0] cmd_mux_src_channel;                                           // cmd_mux:src_channel -> node_0_processing_mem_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                     // cmd_mux:src_startofpacket -> node_0_processing_mem_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                       // cmd_mux:src_endofpacket -> node_0_processing_mem_cmd_width_adapter:in_endofpacket
	wire          node_0_processing_mem_cmd_width_adapter_src_valid;             // node_0_processing_mem_cmd_width_adapter:out_valid -> node_0_processing_mem_burst_adapter:sink0_valid
	wire  [108:0] node_0_processing_mem_cmd_width_adapter_src_data;              // node_0_processing_mem_cmd_width_adapter:out_data -> node_0_processing_mem_burst_adapter:sink0_data
	wire          node_0_processing_mem_cmd_width_adapter_src_ready;             // node_0_processing_mem_burst_adapter:sink0_ready -> node_0_processing_mem_cmd_width_adapter:out_ready
	wire   [11:0] node_0_processing_mem_cmd_width_adapter_src_channel;           // node_0_processing_mem_cmd_width_adapter:out_channel -> node_0_processing_mem_burst_adapter:sink0_channel
	wire          node_0_processing_mem_cmd_width_adapter_src_startofpacket;     // node_0_processing_mem_cmd_width_adapter:out_startofpacket -> node_0_processing_mem_burst_adapter:sink0_startofpacket
	wire          node_0_processing_mem_cmd_width_adapter_src_endofpacket;       // node_0_processing_mem_cmd_width_adapter:out_endofpacket -> node_0_processing_mem_burst_adapter:sink0_endofpacket
	wire          cmd_mux_001_src_valid;                                         // cmd_mux_001:src_valid -> node_1_processing_mem_cmd_width_adapter:in_valid
	wire  [126:0] cmd_mux_001_src_data;                                          // cmd_mux_001:src_data -> node_1_processing_mem_cmd_width_adapter:in_data
	wire          cmd_mux_001_src_ready;                                         // node_1_processing_mem_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire   [11:0] cmd_mux_001_src_channel;                                       // cmd_mux_001:src_channel -> node_1_processing_mem_cmd_width_adapter:in_channel
	wire          cmd_mux_001_src_startofpacket;                                 // cmd_mux_001:src_startofpacket -> node_1_processing_mem_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                   // cmd_mux_001:src_endofpacket -> node_1_processing_mem_cmd_width_adapter:in_endofpacket
	wire          node_1_processing_mem_cmd_width_adapter_src_valid;             // node_1_processing_mem_cmd_width_adapter:out_valid -> node_1_processing_mem_burst_adapter:sink0_valid
	wire  [108:0] node_1_processing_mem_cmd_width_adapter_src_data;              // node_1_processing_mem_cmd_width_adapter:out_data -> node_1_processing_mem_burst_adapter:sink0_data
	wire          node_1_processing_mem_cmd_width_adapter_src_ready;             // node_1_processing_mem_burst_adapter:sink0_ready -> node_1_processing_mem_cmd_width_adapter:out_ready
	wire   [11:0] node_1_processing_mem_cmd_width_adapter_src_channel;           // node_1_processing_mem_cmd_width_adapter:out_channel -> node_1_processing_mem_burst_adapter:sink0_channel
	wire          node_1_processing_mem_cmd_width_adapter_src_startofpacket;     // node_1_processing_mem_cmd_width_adapter:out_startofpacket -> node_1_processing_mem_burst_adapter:sink0_startofpacket
	wire          node_1_processing_mem_cmd_width_adapter_src_endofpacket;       // node_1_processing_mem_cmd_width_adapter:out_endofpacket -> node_1_processing_mem_burst_adapter:sink0_endofpacket
	wire          cmd_mux_002_src_valid;                                         // cmd_mux_002:src_valid -> node_65536_processing_mem_cmd_width_adapter:in_valid
	wire  [126:0] cmd_mux_002_src_data;                                          // cmd_mux_002:src_data -> node_65536_processing_mem_cmd_width_adapter:in_data
	wire          cmd_mux_002_src_ready;                                         // node_65536_processing_mem_cmd_width_adapter:in_ready -> cmd_mux_002:src_ready
	wire   [11:0] cmd_mux_002_src_channel;                                       // cmd_mux_002:src_channel -> node_65536_processing_mem_cmd_width_adapter:in_channel
	wire          cmd_mux_002_src_startofpacket;                                 // cmd_mux_002:src_startofpacket -> node_65536_processing_mem_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                   // cmd_mux_002:src_endofpacket -> node_65536_processing_mem_cmd_width_adapter:in_endofpacket
	wire          node_65536_processing_mem_cmd_width_adapter_src_valid;         // node_65536_processing_mem_cmd_width_adapter:out_valid -> node_65536_processing_mem_burst_adapter:sink0_valid
	wire  [108:0] node_65536_processing_mem_cmd_width_adapter_src_data;          // node_65536_processing_mem_cmd_width_adapter:out_data -> node_65536_processing_mem_burst_adapter:sink0_data
	wire          node_65536_processing_mem_cmd_width_adapter_src_ready;         // node_65536_processing_mem_burst_adapter:sink0_ready -> node_65536_processing_mem_cmd_width_adapter:out_ready
	wire   [11:0] node_65536_processing_mem_cmd_width_adapter_src_channel;       // node_65536_processing_mem_cmd_width_adapter:out_channel -> node_65536_processing_mem_burst_adapter:sink0_channel
	wire          node_65536_processing_mem_cmd_width_adapter_src_startofpacket; // node_65536_processing_mem_cmd_width_adapter:out_startofpacket -> node_65536_processing_mem_burst_adapter:sink0_startofpacket
	wire          node_65536_processing_mem_cmd_width_adapter_src_endofpacket;   // node_65536_processing_mem_cmd_width_adapter:out_endofpacket -> node_65536_processing_mem_burst_adapter:sink0_endofpacket
	wire          cmd_mux_003_src_valid;                                         // cmd_mux_003:src_valid -> node_65537_processing_mem_cmd_width_adapter:in_valid
	wire  [126:0] cmd_mux_003_src_data;                                          // cmd_mux_003:src_data -> node_65537_processing_mem_cmd_width_adapter:in_data
	wire          cmd_mux_003_src_ready;                                         // node_65537_processing_mem_cmd_width_adapter:in_ready -> cmd_mux_003:src_ready
	wire   [11:0] cmd_mux_003_src_channel;                                       // cmd_mux_003:src_channel -> node_65537_processing_mem_cmd_width_adapter:in_channel
	wire          cmd_mux_003_src_startofpacket;                                 // cmd_mux_003:src_startofpacket -> node_65537_processing_mem_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                   // cmd_mux_003:src_endofpacket -> node_65537_processing_mem_cmd_width_adapter:in_endofpacket
	wire          node_65537_processing_mem_cmd_width_adapter_src_valid;         // node_65537_processing_mem_cmd_width_adapter:out_valid -> node_65537_processing_mem_burst_adapter:sink0_valid
	wire  [108:0] node_65537_processing_mem_cmd_width_adapter_src_data;          // node_65537_processing_mem_cmd_width_adapter:out_data -> node_65537_processing_mem_burst_adapter:sink0_data
	wire          node_65537_processing_mem_cmd_width_adapter_src_ready;         // node_65537_processing_mem_burst_adapter:sink0_ready -> node_65537_processing_mem_cmd_width_adapter:out_ready
	wire   [11:0] node_65537_processing_mem_cmd_width_adapter_src_channel;       // node_65537_processing_mem_cmd_width_adapter:out_channel -> node_65537_processing_mem_burst_adapter:sink0_channel
	wire          node_65537_processing_mem_cmd_width_adapter_src_startofpacket; // node_65537_processing_mem_cmd_width_adapter:out_startofpacket -> node_65537_processing_mem_burst_adapter:sink0_startofpacket
	wire          node_65537_processing_mem_cmd_width_adapter_src_endofpacket;   // node_65537_processing_mem_cmd_width_adapter:out_endofpacket -> node_65537_processing_mem_burst_adapter:sink0_endofpacket
	wire          cmd_mux_004_src_valid;                                         // cmd_mux_004:src_valid -> terminal_north_0_status_cmd_width_adapter:in_valid
	wire  [126:0] cmd_mux_004_src_data;                                          // cmd_mux_004:src_data -> terminal_north_0_status_cmd_width_adapter:in_data
	wire          cmd_mux_004_src_ready;                                         // terminal_north_0_status_cmd_width_adapter:in_ready -> cmd_mux_004:src_ready
	wire   [11:0] cmd_mux_004_src_channel;                                       // cmd_mux_004:src_channel -> terminal_north_0_status_cmd_width_adapter:in_channel
	wire          cmd_mux_004_src_startofpacket;                                 // cmd_mux_004:src_startofpacket -> terminal_north_0_status_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                   // cmd_mux_004:src_endofpacket -> terminal_north_0_status_cmd_width_adapter:in_endofpacket
	wire          terminal_north_0_status_cmd_width_adapter_src_valid;           // terminal_north_0_status_cmd_width_adapter:out_valid -> terminal_north_0_status_burst_adapter:sink0_valid
	wire  [108:0] terminal_north_0_status_cmd_width_adapter_src_data;            // terminal_north_0_status_cmd_width_adapter:out_data -> terminal_north_0_status_burst_adapter:sink0_data
	wire          terminal_north_0_status_cmd_width_adapter_src_ready;           // terminal_north_0_status_burst_adapter:sink0_ready -> terminal_north_0_status_cmd_width_adapter:out_ready
	wire   [11:0] terminal_north_0_status_cmd_width_adapter_src_channel;         // terminal_north_0_status_cmd_width_adapter:out_channel -> terminal_north_0_status_burst_adapter:sink0_channel
	wire          terminal_north_0_status_cmd_width_adapter_src_startofpacket;   // terminal_north_0_status_cmd_width_adapter:out_startofpacket -> terminal_north_0_status_burst_adapter:sink0_startofpacket
	wire          terminal_north_0_status_cmd_width_adapter_src_endofpacket;     // terminal_north_0_status_cmd_width_adapter:out_endofpacket -> terminal_north_0_status_burst_adapter:sink0_endofpacket
	wire          cmd_mux_005_src_valid;                                         // cmd_mux_005:src_valid -> terminal_north_1_status_cmd_width_adapter:in_valid
	wire  [126:0] cmd_mux_005_src_data;                                          // cmd_mux_005:src_data -> terminal_north_1_status_cmd_width_adapter:in_data
	wire          cmd_mux_005_src_ready;                                         // terminal_north_1_status_cmd_width_adapter:in_ready -> cmd_mux_005:src_ready
	wire   [11:0] cmd_mux_005_src_channel;                                       // cmd_mux_005:src_channel -> terminal_north_1_status_cmd_width_adapter:in_channel
	wire          cmd_mux_005_src_startofpacket;                                 // cmd_mux_005:src_startofpacket -> terminal_north_1_status_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                   // cmd_mux_005:src_endofpacket -> terminal_north_1_status_cmd_width_adapter:in_endofpacket
	wire          terminal_north_1_status_cmd_width_adapter_src_valid;           // terminal_north_1_status_cmd_width_adapter:out_valid -> terminal_north_1_status_burst_adapter:sink0_valid
	wire  [108:0] terminal_north_1_status_cmd_width_adapter_src_data;            // terminal_north_1_status_cmd_width_adapter:out_data -> terminal_north_1_status_burst_adapter:sink0_data
	wire          terminal_north_1_status_cmd_width_adapter_src_ready;           // terminal_north_1_status_burst_adapter:sink0_ready -> terminal_north_1_status_cmd_width_adapter:out_ready
	wire   [11:0] terminal_north_1_status_cmd_width_adapter_src_channel;         // terminal_north_1_status_cmd_width_adapter:out_channel -> terminal_north_1_status_burst_adapter:sink0_channel
	wire          terminal_north_1_status_cmd_width_adapter_src_startofpacket;   // terminal_north_1_status_cmd_width_adapter:out_startofpacket -> terminal_north_1_status_burst_adapter:sink0_startofpacket
	wire          terminal_north_1_status_cmd_width_adapter_src_endofpacket;     // terminal_north_1_status_cmd_width_adapter:out_endofpacket -> terminal_north_1_status_burst_adapter:sink0_endofpacket
	wire          cmd_mux_006_src_valid;                                         // cmd_mux_006:src_valid -> terminal_south_0_status_cmd_width_adapter:in_valid
	wire  [126:0] cmd_mux_006_src_data;                                          // cmd_mux_006:src_data -> terminal_south_0_status_cmd_width_adapter:in_data
	wire          cmd_mux_006_src_ready;                                         // terminal_south_0_status_cmd_width_adapter:in_ready -> cmd_mux_006:src_ready
	wire   [11:0] cmd_mux_006_src_channel;                                       // cmd_mux_006:src_channel -> terminal_south_0_status_cmd_width_adapter:in_channel
	wire          cmd_mux_006_src_startofpacket;                                 // cmd_mux_006:src_startofpacket -> terminal_south_0_status_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                   // cmd_mux_006:src_endofpacket -> terminal_south_0_status_cmd_width_adapter:in_endofpacket
	wire          terminal_south_0_status_cmd_width_adapter_src_valid;           // terminal_south_0_status_cmd_width_adapter:out_valid -> terminal_south_0_status_burst_adapter:sink0_valid
	wire  [108:0] terminal_south_0_status_cmd_width_adapter_src_data;            // terminal_south_0_status_cmd_width_adapter:out_data -> terminal_south_0_status_burst_adapter:sink0_data
	wire          terminal_south_0_status_cmd_width_adapter_src_ready;           // terminal_south_0_status_burst_adapter:sink0_ready -> terminal_south_0_status_cmd_width_adapter:out_ready
	wire   [11:0] terminal_south_0_status_cmd_width_adapter_src_channel;         // terminal_south_0_status_cmd_width_adapter:out_channel -> terminal_south_0_status_burst_adapter:sink0_channel
	wire          terminal_south_0_status_cmd_width_adapter_src_startofpacket;   // terminal_south_0_status_cmd_width_adapter:out_startofpacket -> terminal_south_0_status_burst_adapter:sink0_startofpacket
	wire          terminal_south_0_status_cmd_width_adapter_src_endofpacket;     // terminal_south_0_status_cmd_width_adapter:out_endofpacket -> terminal_south_0_status_burst_adapter:sink0_endofpacket
	wire          cmd_mux_007_src_valid;                                         // cmd_mux_007:src_valid -> terminal_south_1_status_cmd_width_adapter:in_valid
	wire  [126:0] cmd_mux_007_src_data;                                          // cmd_mux_007:src_data -> terminal_south_1_status_cmd_width_adapter:in_data
	wire          cmd_mux_007_src_ready;                                         // terminal_south_1_status_cmd_width_adapter:in_ready -> cmd_mux_007:src_ready
	wire   [11:0] cmd_mux_007_src_channel;                                       // cmd_mux_007:src_channel -> terminal_south_1_status_cmd_width_adapter:in_channel
	wire          cmd_mux_007_src_startofpacket;                                 // cmd_mux_007:src_startofpacket -> terminal_south_1_status_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                   // cmd_mux_007:src_endofpacket -> terminal_south_1_status_cmd_width_adapter:in_endofpacket
	wire          terminal_south_1_status_cmd_width_adapter_src_valid;           // terminal_south_1_status_cmd_width_adapter:out_valid -> terminal_south_1_status_burst_adapter:sink0_valid
	wire  [108:0] terminal_south_1_status_cmd_width_adapter_src_data;            // terminal_south_1_status_cmd_width_adapter:out_data -> terminal_south_1_status_burst_adapter:sink0_data
	wire          terminal_south_1_status_cmd_width_adapter_src_ready;           // terminal_south_1_status_burst_adapter:sink0_ready -> terminal_south_1_status_cmd_width_adapter:out_ready
	wire   [11:0] terminal_south_1_status_cmd_width_adapter_src_channel;         // terminal_south_1_status_cmd_width_adapter:out_channel -> terminal_south_1_status_burst_adapter:sink0_channel
	wire          terminal_south_1_status_cmd_width_adapter_src_startofpacket;   // terminal_south_1_status_cmd_width_adapter:out_startofpacket -> terminal_south_1_status_burst_adapter:sink0_startofpacket
	wire          terminal_south_1_status_cmd_width_adapter_src_endofpacket;     // terminal_south_1_status_cmd_width_adapter:out_endofpacket -> terminal_south_1_status_burst_adapter:sink0_endofpacket
	wire          cmd_mux_008_src_valid;                                         // cmd_mux_008:src_valid -> terminal_west_0_status_cmd_width_adapter:in_valid
	wire  [126:0] cmd_mux_008_src_data;                                          // cmd_mux_008:src_data -> terminal_west_0_status_cmd_width_adapter:in_data
	wire          cmd_mux_008_src_ready;                                         // terminal_west_0_status_cmd_width_adapter:in_ready -> cmd_mux_008:src_ready
	wire   [11:0] cmd_mux_008_src_channel;                                       // cmd_mux_008:src_channel -> terminal_west_0_status_cmd_width_adapter:in_channel
	wire          cmd_mux_008_src_startofpacket;                                 // cmd_mux_008:src_startofpacket -> terminal_west_0_status_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                   // cmd_mux_008:src_endofpacket -> terminal_west_0_status_cmd_width_adapter:in_endofpacket
	wire          terminal_west_0_status_cmd_width_adapter_src_valid;            // terminal_west_0_status_cmd_width_adapter:out_valid -> terminal_west_0_status_burst_adapter:sink0_valid
	wire  [108:0] terminal_west_0_status_cmd_width_adapter_src_data;             // terminal_west_0_status_cmd_width_adapter:out_data -> terminal_west_0_status_burst_adapter:sink0_data
	wire          terminal_west_0_status_cmd_width_adapter_src_ready;            // terminal_west_0_status_burst_adapter:sink0_ready -> terminal_west_0_status_cmd_width_adapter:out_ready
	wire   [11:0] terminal_west_0_status_cmd_width_adapter_src_channel;          // terminal_west_0_status_cmd_width_adapter:out_channel -> terminal_west_0_status_burst_adapter:sink0_channel
	wire          terminal_west_0_status_cmd_width_adapter_src_startofpacket;    // terminal_west_0_status_cmd_width_adapter:out_startofpacket -> terminal_west_0_status_burst_adapter:sink0_startofpacket
	wire          terminal_west_0_status_cmd_width_adapter_src_endofpacket;      // terminal_west_0_status_cmd_width_adapter:out_endofpacket -> terminal_west_0_status_burst_adapter:sink0_endofpacket
	wire          cmd_mux_009_src_valid;                                         // cmd_mux_009:src_valid -> terminal_east_1_status_cmd_width_adapter:in_valid
	wire  [126:0] cmd_mux_009_src_data;                                          // cmd_mux_009:src_data -> terminal_east_1_status_cmd_width_adapter:in_data
	wire          cmd_mux_009_src_ready;                                         // terminal_east_1_status_cmd_width_adapter:in_ready -> cmd_mux_009:src_ready
	wire   [11:0] cmd_mux_009_src_channel;                                       // cmd_mux_009:src_channel -> terminal_east_1_status_cmd_width_adapter:in_channel
	wire          cmd_mux_009_src_startofpacket;                                 // cmd_mux_009:src_startofpacket -> terminal_east_1_status_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                   // cmd_mux_009:src_endofpacket -> terminal_east_1_status_cmd_width_adapter:in_endofpacket
	wire          terminal_east_1_status_cmd_width_adapter_src_valid;            // terminal_east_1_status_cmd_width_adapter:out_valid -> terminal_east_1_status_burst_adapter:sink0_valid
	wire  [108:0] terminal_east_1_status_cmd_width_adapter_src_data;             // terminal_east_1_status_cmd_width_adapter:out_data -> terminal_east_1_status_burst_adapter:sink0_data
	wire          terminal_east_1_status_cmd_width_adapter_src_ready;            // terminal_east_1_status_burst_adapter:sink0_ready -> terminal_east_1_status_cmd_width_adapter:out_ready
	wire   [11:0] terminal_east_1_status_cmd_width_adapter_src_channel;          // terminal_east_1_status_cmd_width_adapter:out_channel -> terminal_east_1_status_burst_adapter:sink0_channel
	wire          terminal_east_1_status_cmd_width_adapter_src_startofpacket;    // terminal_east_1_status_cmd_width_adapter:out_startofpacket -> terminal_east_1_status_burst_adapter:sink0_startofpacket
	wire          terminal_east_1_status_cmd_width_adapter_src_endofpacket;      // terminal_east_1_status_cmd_width_adapter:out_endofpacket -> terminal_east_1_status_burst_adapter:sink0_endofpacket
	wire          cmd_mux_010_src_valid;                                         // cmd_mux_010:src_valid -> terminal_east_0_status_cmd_width_adapter:in_valid
	wire  [126:0] cmd_mux_010_src_data;                                          // cmd_mux_010:src_data -> terminal_east_0_status_cmd_width_adapter:in_data
	wire          cmd_mux_010_src_ready;                                         // terminal_east_0_status_cmd_width_adapter:in_ready -> cmd_mux_010:src_ready
	wire   [11:0] cmd_mux_010_src_channel;                                       // cmd_mux_010:src_channel -> terminal_east_0_status_cmd_width_adapter:in_channel
	wire          cmd_mux_010_src_startofpacket;                                 // cmd_mux_010:src_startofpacket -> terminal_east_0_status_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                   // cmd_mux_010:src_endofpacket -> terminal_east_0_status_cmd_width_adapter:in_endofpacket
	wire          terminal_east_0_status_cmd_width_adapter_src_valid;            // terminal_east_0_status_cmd_width_adapter:out_valid -> terminal_east_0_status_burst_adapter:sink0_valid
	wire  [108:0] terminal_east_0_status_cmd_width_adapter_src_data;             // terminal_east_0_status_cmd_width_adapter:out_data -> terminal_east_0_status_burst_adapter:sink0_data
	wire          terminal_east_0_status_cmd_width_adapter_src_ready;            // terminal_east_0_status_burst_adapter:sink0_ready -> terminal_east_0_status_cmd_width_adapter:out_ready
	wire   [11:0] terminal_east_0_status_cmd_width_adapter_src_channel;          // terminal_east_0_status_cmd_width_adapter:out_channel -> terminal_east_0_status_burst_adapter:sink0_channel
	wire          terminal_east_0_status_cmd_width_adapter_src_startofpacket;    // terminal_east_0_status_cmd_width_adapter:out_startofpacket -> terminal_east_0_status_burst_adapter:sink0_startofpacket
	wire          terminal_east_0_status_cmd_width_adapter_src_endofpacket;      // terminal_east_0_status_cmd_width_adapter:out_endofpacket -> terminal_east_0_status_burst_adapter:sink0_endofpacket
	wire          cmd_mux_011_src_valid;                                         // cmd_mux_011:src_valid -> terminal_west_1_status_cmd_width_adapter:in_valid
	wire  [126:0] cmd_mux_011_src_data;                                          // cmd_mux_011:src_data -> terminal_west_1_status_cmd_width_adapter:in_data
	wire          cmd_mux_011_src_ready;                                         // terminal_west_1_status_cmd_width_adapter:in_ready -> cmd_mux_011:src_ready
	wire   [11:0] cmd_mux_011_src_channel;                                       // cmd_mux_011:src_channel -> terminal_west_1_status_cmd_width_adapter:in_channel
	wire          cmd_mux_011_src_startofpacket;                                 // cmd_mux_011:src_startofpacket -> terminal_west_1_status_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                   // cmd_mux_011:src_endofpacket -> terminal_west_1_status_cmd_width_adapter:in_endofpacket
	wire          terminal_west_1_status_cmd_width_adapter_src_valid;            // terminal_west_1_status_cmd_width_adapter:out_valid -> terminal_west_1_status_burst_adapter:sink0_valid
	wire  [108:0] terminal_west_1_status_cmd_width_adapter_src_data;             // terminal_west_1_status_cmd_width_adapter:out_data -> terminal_west_1_status_burst_adapter:sink0_data
	wire          terminal_west_1_status_cmd_width_adapter_src_ready;            // terminal_west_1_status_burst_adapter:sink0_ready -> terminal_west_1_status_cmd_width_adapter:out_ready
	wire   [11:0] terminal_west_1_status_cmd_width_adapter_src_channel;          // terminal_west_1_status_cmd_width_adapter:out_channel -> terminal_west_1_status_burst_adapter:sink0_channel
	wire          terminal_west_1_status_cmd_width_adapter_src_startofpacket;    // terminal_west_1_status_cmd_width_adapter:out_startofpacket -> terminal_west_1_status_burst_adapter:sink0_startofpacket
	wire          terminal_west_1_status_cmd_width_adapter_src_endofpacket;      // terminal_west_1_status_cmd_width_adapter:out_endofpacket -> terminal_west_1_status_burst_adapter:sink0_endofpacket
	wire   [11:0] hps_h2f_axi_master_wr_limiter_cmd_valid_data;                  // HPS_h2f_axi_master_wr_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire   [11:0] hps_h2f_axi_master_rd_limiter_cmd_valid_data;                  // HPS_h2f_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          node_0_processing_mem_agent_rdata_fifo_out_valid;              // node_0_processing_mem_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [17:0] node_0_processing_mem_agent_rdata_fifo_out_data;               // node_0_processing_mem_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          node_0_processing_mem_agent_rdata_fifo_out_ready;              // avalon_st_adapter:in_0_ready -> node_0_processing_mem_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                 // avalon_st_adapter:out_0_valid -> node_0_processing_mem_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_out_0_data;                                  // avalon_st_adapter:out_0_data -> node_0_processing_mem_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                 // node_0_processing_mem_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                 // avalon_st_adapter:out_0_error -> node_0_processing_mem_agent:rdata_fifo_sink_error
	wire          node_1_processing_mem_agent_rdata_fifo_out_valid;              // node_1_processing_mem_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [17:0] node_1_processing_mem_agent_rdata_fifo_out_data;               // node_1_processing_mem_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          node_1_processing_mem_agent_rdata_fifo_out_ready;              // avalon_st_adapter_001:in_0_ready -> node_1_processing_mem_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                             // avalon_st_adapter_001:out_0_valid -> node_1_processing_mem_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_001_out_0_data;                              // avalon_st_adapter_001:out_0_data -> node_1_processing_mem_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                             // node_1_processing_mem_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                             // avalon_st_adapter_001:out_0_error -> node_1_processing_mem_agent:rdata_fifo_sink_error
	wire          node_65536_processing_mem_agent_rdata_fifo_out_valid;          // node_65536_processing_mem_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [17:0] node_65536_processing_mem_agent_rdata_fifo_out_data;           // node_65536_processing_mem_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          node_65536_processing_mem_agent_rdata_fifo_out_ready;          // avalon_st_adapter_002:in_0_ready -> node_65536_processing_mem_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                             // avalon_st_adapter_002:out_0_valid -> node_65536_processing_mem_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_002_out_0_data;                              // avalon_st_adapter_002:out_0_data -> node_65536_processing_mem_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                             // node_65536_processing_mem_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                             // avalon_st_adapter_002:out_0_error -> node_65536_processing_mem_agent:rdata_fifo_sink_error
	wire          node_65537_processing_mem_agent_rdata_fifo_out_valid;          // node_65537_processing_mem_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [17:0] node_65537_processing_mem_agent_rdata_fifo_out_data;           // node_65537_processing_mem_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          node_65537_processing_mem_agent_rdata_fifo_out_ready;          // avalon_st_adapter_003:in_0_ready -> node_65537_processing_mem_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                             // avalon_st_adapter_003:out_0_valid -> node_65537_processing_mem_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_003_out_0_data;                              // avalon_st_adapter_003:out_0_data -> node_65537_processing_mem_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                             // node_65537_processing_mem_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                             // avalon_st_adapter_003:out_0_error -> node_65537_processing_mem_agent:rdata_fifo_sink_error
	wire          terminal_north_0_status_agent_rdata_fifo_out_valid;            // terminal_north_0_status_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [17:0] terminal_north_0_status_agent_rdata_fifo_out_data;             // terminal_north_0_status_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          terminal_north_0_status_agent_rdata_fifo_out_ready;            // avalon_st_adapter_004:in_0_ready -> terminal_north_0_status_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                             // avalon_st_adapter_004:out_0_valid -> terminal_north_0_status_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_004_out_0_data;                              // avalon_st_adapter_004:out_0_data -> terminal_north_0_status_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                             // terminal_north_0_status_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                             // avalon_st_adapter_004:out_0_error -> terminal_north_0_status_agent:rdata_fifo_sink_error
	wire          terminal_north_1_status_agent_rdata_fifo_out_valid;            // terminal_north_1_status_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [17:0] terminal_north_1_status_agent_rdata_fifo_out_data;             // terminal_north_1_status_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          terminal_north_1_status_agent_rdata_fifo_out_ready;            // avalon_st_adapter_005:in_0_ready -> terminal_north_1_status_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                             // avalon_st_adapter_005:out_0_valid -> terminal_north_1_status_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_005_out_0_data;                              // avalon_st_adapter_005:out_0_data -> terminal_north_1_status_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                             // terminal_north_1_status_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                             // avalon_st_adapter_005:out_0_error -> terminal_north_1_status_agent:rdata_fifo_sink_error
	wire          terminal_south_0_status_agent_rdata_fifo_out_valid;            // terminal_south_0_status_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [17:0] terminal_south_0_status_agent_rdata_fifo_out_data;             // terminal_south_0_status_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          terminal_south_0_status_agent_rdata_fifo_out_ready;            // avalon_st_adapter_006:in_0_ready -> terminal_south_0_status_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                             // avalon_st_adapter_006:out_0_valid -> terminal_south_0_status_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_006_out_0_data;                              // avalon_st_adapter_006:out_0_data -> terminal_south_0_status_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                             // terminal_south_0_status_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                             // avalon_st_adapter_006:out_0_error -> terminal_south_0_status_agent:rdata_fifo_sink_error
	wire          terminal_south_1_status_agent_rdata_fifo_out_valid;            // terminal_south_1_status_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [17:0] terminal_south_1_status_agent_rdata_fifo_out_data;             // terminal_south_1_status_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          terminal_south_1_status_agent_rdata_fifo_out_ready;            // avalon_st_adapter_007:in_0_ready -> terminal_south_1_status_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                             // avalon_st_adapter_007:out_0_valid -> terminal_south_1_status_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_007_out_0_data;                              // avalon_st_adapter_007:out_0_data -> terminal_south_1_status_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                             // terminal_south_1_status_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                             // avalon_st_adapter_007:out_0_error -> terminal_south_1_status_agent:rdata_fifo_sink_error
	wire          terminal_west_0_status_agent_rdata_fifo_out_valid;             // terminal_west_0_status_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire   [17:0] terminal_west_0_status_agent_rdata_fifo_out_data;              // terminal_west_0_status_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          terminal_west_0_status_agent_rdata_fifo_out_ready;             // avalon_st_adapter_008:in_0_ready -> terminal_west_0_status_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                             // avalon_st_adapter_008:out_0_valid -> terminal_west_0_status_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_008_out_0_data;                              // avalon_st_adapter_008:out_0_data -> terminal_west_0_status_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                             // terminal_west_0_status_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                             // avalon_st_adapter_008:out_0_error -> terminal_west_0_status_agent:rdata_fifo_sink_error
	wire          terminal_east_1_status_agent_rdata_fifo_out_valid;             // terminal_east_1_status_agent_rdata_fifo:out_valid -> avalon_st_adapter_009:in_0_valid
	wire   [17:0] terminal_east_1_status_agent_rdata_fifo_out_data;              // terminal_east_1_status_agent_rdata_fifo:out_data -> avalon_st_adapter_009:in_0_data
	wire          terminal_east_1_status_agent_rdata_fifo_out_ready;             // avalon_st_adapter_009:in_0_ready -> terminal_east_1_status_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_009_out_0_valid;                             // avalon_st_adapter_009:out_0_valid -> terminal_east_1_status_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_009_out_0_data;                              // avalon_st_adapter_009:out_0_data -> terminal_east_1_status_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                             // terminal_east_1_status_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                             // avalon_st_adapter_009:out_0_error -> terminal_east_1_status_agent:rdata_fifo_sink_error
	wire          terminal_east_0_status_agent_rdata_fifo_out_valid;             // terminal_east_0_status_agent_rdata_fifo:out_valid -> avalon_st_adapter_010:in_0_valid
	wire   [17:0] terminal_east_0_status_agent_rdata_fifo_out_data;              // terminal_east_0_status_agent_rdata_fifo:out_data -> avalon_st_adapter_010:in_0_data
	wire          terminal_east_0_status_agent_rdata_fifo_out_ready;             // avalon_st_adapter_010:in_0_ready -> terminal_east_0_status_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_010_out_0_valid;                             // avalon_st_adapter_010:out_0_valid -> terminal_east_0_status_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_010_out_0_data;                              // avalon_st_adapter_010:out_0_data -> terminal_east_0_status_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                             // terminal_east_0_status_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                             // avalon_st_adapter_010:out_0_error -> terminal_east_0_status_agent:rdata_fifo_sink_error
	wire          terminal_west_1_status_agent_rdata_fifo_out_valid;             // terminal_west_1_status_agent_rdata_fifo:out_valid -> avalon_st_adapter_011:in_0_valid
	wire   [17:0] terminal_west_1_status_agent_rdata_fifo_out_data;              // terminal_west_1_status_agent_rdata_fifo:out_data -> avalon_st_adapter_011:in_0_data
	wire          terminal_west_1_status_agent_rdata_fifo_out_ready;             // avalon_st_adapter_011:in_0_ready -> terminal_west_1_status_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_011_out_0_valid;                             // avalon_st_adapter_011:out_0_valid -> terminal_west_1_status_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_011_out_0_data;                              // avalon_st_adapter_011:out_0_data -> terminal_west_1_status_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                             // terminal_west_1_status_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                             // avalon_st_adapter_011:out_0_error -> terminal_west_1_status_agent:rdata_fifo_sink_error

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (15),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) node_0_processing_mem_translator (
		.clk                    (clk_0_clk_clk),                                      //                      clk.clk
		.reset                  (terminal_north_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (node_0_processing_mem_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (node_0_processing_mem_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (node_0_processing_mem_agent_m0_read),                //                         .read
		.uav_write              (node_0_processing_mem_agent_m0_write),               //                         .write
		.uav_waitrequest        (node_0_processing_mem_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (node_0_processing_mem_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (node_0_processing_mem_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (node_0_processing_mem_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (node_0_processing_mem_agent_m0_writedata),           //                         .writedata
		.uav_lock               (node_0_processing_mem_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (node_0_processing_mem_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (node_0_processing_mem_address),                      //      avalon_anti_slave_0.address
		.av_write               (node_0_processing_mem_write),                        //                         .write
		.av_readdata            (node_0_processing_mem_readdata),                     //                         .readdata
		.av_writedata           (node_0_processing_mem_writedata),                    //                         .writedata
		.av_read                (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_chipselect          (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (15),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) node_1_processing_mem_translator (
		.clk                    (clk_0_clk_clk),                                      //                      clk.clk
		.reset                  (terminal_north_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (node_1_processing_mem_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (node_1_processing_mem_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (node_1_processing_mem_agent_m0_read),                //                         .read
		.uav_write              (node_1_processing_mem_agent_m0_write),               //                         .write
		.uav_waitrequest        (node_1_processing_mem_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (node_1_processing_mem_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (node_1_processing_mem_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (node_1_processing_mem_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (node_1_processing_mem_agent_m0_writedata),           //                         .writedata
		.uav_lock               (node_1_processing_mem_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (node_1_processing_mem_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (node_1_processing_mem_address),                      //      avalon_anti_slave_0.address
		.av_write               (node_1_processing_mem_write),                        //                         .write
		.av_readdata            (node_1_processing_mem_readdata),                     //                         .readdata
		.av_writedata           (node_1_processing_mem_writedata),                    //                         .writedata
		.av_read                (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_chipselect          (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (15),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) node_65536_processing_mem_translator (
		.clk                    (clk_0_clk_clk),                                      //                      clk.clk
		.reset                  (terminal_north_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (node_65536_processing_mem_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (node_65536_processing_mem_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (node_65536_processing_mem_agent_m0_read),            //                         .read
		.uav_write              (node_65536_processing_mem_agent_m0_write),           //                         .write
		.uav_waitrequest        (node_65536_processing_mem_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (node_65536_processing_mem_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (node_65536_processing_mem_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (node_65536_processing_mem_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (node_65536_processing_mem_agent_m0_writedata),       //                         .writedata
		.uav_lock               (node_65536_processing_mem_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (node_65536_processing_mem_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (node_65536_processing_mem_address),                  //      avalon_anti_slave_0.address
		.av_write               (node_65536_processing_mem_write),                    //                         .write
		.av_readdata            (node_65536_processing_mem_readdata),                 //                         .readdata
		.av_writedata           (node_65536_processing_mem_writedata),                //                         .writedata
		.av_read                (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_chipselect          (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (15),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) node_65537_processing_mem_translator (
		.clk                    (clk_0_clk_clk),                                      //                      clk.clk
		.reset                  (terminal_north_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (node_65537_processing_mem_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (node_65537_processing_mem_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (node_65537_processing_mem_agent_m0_read),            //                         .read
		.uav_write              (node_65537_processing_mem_agent_m0_write),           //                         .write
		.uav_waitrequest        (node_65537_processing_mem_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (node_65537_processing_mem_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (node_65537_processing_mem_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (node_65537_processing_mem_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (node_65537_processing_mem_agent_m0_writedata),       //                         .writedata
		.uav_lock               (node_65537_processing_mem_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (node_65537_processing_mem_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (node_65537_processing_mem_address),                  //      avalon_anti_slave_0.address
		.av_write               (node_65537_processing_mem_write),                    //                         .write
		.av_readdata            (node_65537_processing_mem_readdata),                 //                         .readdata
		.av_writedata           (node_65537_processing_mem_writedata),                //                         .writedata
		.av_read                (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_chipselect          (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) terminal_north_0_status_translator (
		.clk                    (clk_0_clk_clk),                                      //                      clk.clk
		.reset                  (terminal_north_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (terminal_north_0_status_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (terminal_north_0_status_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (terminal_north_0_status_agent_m0_read),              //                         .read
		.uav_write              (terminal_north_0_status_agent_m0_write),             //                         .write
		.uav_waitrequest        (terminal_north_0_status_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (terminal_north_0_status_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (terminal_north_0_status_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (terminal_north_0_status_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (terminal_north_0_status_agent_m0_writedata),         //                         .writedata
		.uav_lock               (terminal_north_0_status_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (terminal_north_0_status_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (terminal_north_0_status_address),                    //      avalon_anti_slave_0.address
		.av_read                (terminal_north_0_status_read),                       //                         .read
		.av_readdata            (terminal_north_0_status_readdata),                   //                         .readdata
		.av_write               (),                                                   //              (terminated)
		.av_writedata           (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_chipselect          (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) terminal_north_1_status_translator (
		.clk                    (clk_0_clk_clk),                                      //                      clk.clk
		.reset                  (terminal_north_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (terminal_north_1_status_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (terminal_north_1_status_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (terminal_north_1_status_agent_m0_read),              //                         .read
		.uav_write              (terminal_north_1_status_agent_m0_write),             //                         .write
		.uav_waitrequest        (terminal_north_1_status_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (terminal_north_1_status_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (terminal_north_1_status_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (terminal_north_1_status_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (terminal_north_1_status_agent_m0_writedata),         //                         .writedata
		.uav_lock               (terminal_north_1_status_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (terminal_north_1_status_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (terminal_north_1_status_address),                    //      avalon_anti_slave_0.address
		.av_read                (terminal_north_1_status_read),                       //                         .read
		.av_readdata            (terminal_north_1_status_readdata),                   //                         .readdata
		.av_write               (),                                                   //              (terminated)
		.av_writedata           (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_chipselect          (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) terminal_south_0_status_translator (
		.clk                    (clk_0_clk_clk),                                      //                      clk.clk
		.reset                  (terminal_north_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (terminal_south_0_status_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (terminal_south_0_status_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (terminal_south_0_status_agent_m0_read),              //                         .read
		.uav_write              (terminal_south_0_status_agent_m0_write),             //                         .write
		.uav_waitrequest        (terminal_south_0_status_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (terminal_south_0_status_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (terminal_south_0_status_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (terminal_south_0_status_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (terminal_south_0_status_agent_m0_writedata),         //                         .writedata
		.uav_lock               (terminal_south_0_status_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (terminal_south_0_status_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (terminal_south_0_status_address),                    //      avalon_anti_slave_0.address
		.av_read                (terminal_south_0_status_read),                       //                         .read
		.av_readdata            (terminal_south_0_status_readdata),                   //                         .readdata
		.av_write               (),                                                   //              (terminated)
		.av_writedata           (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_chipselect          (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) terminal_south_1_status_translator (
		.clk                    (clk_0_clk_clk),                                      //                      clk.clk
		.reset                  (terminal_north_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (terminal_south_1_status_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (terminal_south_1_status_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (terminal_south_1_status_agent_m0_read),              //                         .read
		.uav_write              (terminal_south_1_status_agent_m0_write),             //                         .write
		.uav_waitrequest        (terminal_south_1_status_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (terminal_south_1_status_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (terminal_south_1_status_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (terminal_south_1_status_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (terminal_south_1_status_agent_m0_writedata),         //                         .writedata
		.uav_lock               (terminal_south_1_status_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (terminal_south_1_status_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (terminal_south_1_status_address),                    //      avalon_anti_slave_0.address
		.av_read                (terminal_south_1_status_read),                       //                         .read
		.av_readdata            (terminal_south_1_status_readdata),                   //                         .readdata
		.av_write               (),                                                   //              (terminated)
		.av_writedata           (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_chipselect          (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) terminal_west_0_status_translator (
		.clk                    (clk_0_clk_clk),                                      //                      clk.clk
		.reset                  (terminal_north_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (terminal_west_0_status_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (terminal_west_0_status_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (terminal_west_0_status_agent_m0_read),               //                         .read
		.uav_write              (terminal_west_0_status_agent_m0_write),              //                         .write
		.uav_waitrequest        (terminal_west_0_status_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (terminal_west_0_status_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (terminal_west_0_status_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (terminal_west_0_status_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (terminal_west_0_status_agent_m0_writedata),          //                         .writedata
		.uav_lock               (terminal_west_0_status_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (terminal_west_0_status_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (terminal_west_0_status_address),                     //      avalon_anti_slave_0.address
		.av_read                (terminal_west_0_status_read),                        //                         .read
		.av_readdata            (terminal_west_0_status_readdata),                    //                         .readdata
		.av_write               (),                                                   //              (terminated)
		.av_writedata           (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_chipselect          (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) terminal_east_1_status_translator (
		.clk                    (clk_0_clk_clk),                                      //                      clk.clk
		.reset                  (terminal_north_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (terminal_east_1_status_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (terminal_east_1_status_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (terminal_east_1_status_agent_m0_read),               //                         .read
		.uav_write              (terminal_east_1_status_agent_m0_write),              //                         .write
		.uav_waitrequest        (terminal_east_1_status_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (terminal_east_1_status_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (terminal_east_1_status_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (terminal_east_1_status_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (terminal_east_1_status_agent_m0_writedata),          //                         .writedata
		.uav_lock               (terminal_east_1_status_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (terminal_east_1_status_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (terminal_east_1_status_address),                     //      avalon_anti_slave_0.address
		.av_read                (terminal_east_1_status_read),                        //                         .read
		.av_readdata            (terminal_east_1_status_readdata),                    //                         .readdata
		.av_write               (),                                                   //              (terminated)
		.av_writedata           (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_chipselect          (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) terminal_east_0_status_translator (
		.clk                    (clk_0_clk_clk),                                      //                      clk.clk
		.reset                  (terminal_north_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (terminal_east_0_status_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (terminal_east_0_status_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (terminal_east_0_status_agent_m0_read),               //                         .read
		.uav_write              (terminal_east_0_status_agent_m0_write),              //                         .write
		.uav_waitrequest        (terminal_east_0_status_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (terminal_east_0_status_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (terminal_east_0_status_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (terminal_east_0_status_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (terminal_east_0_status_agent_m0_writedata),          //                         .writedata
		.uav_lock               (terminal_east_0_status_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (terminal_east_0_status_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (terminal_east_0_status_address),                     //      avalon_anti_slave_0.address
		.av_read                (terminal_east_0_status_read),                        //                         .read
		.av_readdata            (terminal_east_0_status_readdata),                    //                         .readdata
		.av_write               (),                                                   //              (terminated)
		.av_writedata           (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_chipselect          (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) terminal_west_1_status_translator (
		.clk                    (clk_0_clk_clk),                                      //                      clk.clk
		.reset                  (terminal_north_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (terminal_west_1_status_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (terminal_west_1_status_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (terminal_west_1_status_agent_m0_read),               //                         .read
		.uav_write              (terminal_west_1_status_agent_m0_write),              //                         .write
		.uav_waitrequest        (terminal_west_1_status_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (terminal_west_1_status_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (terminal_west_1_status_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (terminal_west_1_status_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (terminal_west_1_status_agent_m0_writedata),          //                         .writedata
		.uav_lock               (terminal_west_1_status_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (terminal_west_1_status_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (terminal_west_1_status_address),                     //      avalon_anti_slave_0.address
		.av_read                (terminal_west_1_status_read),                        //                         .read
		.av_readdata            (terminal_west_1_status_readdata),                    //                         .readdata
		.av_write               (),                                                   //              (terminated)
		.av_writedata           (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_chipselect          (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (30),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (93),
		.PKT_CACHE_H               (121),
		.PKT_CACHE_L               (118),
		.PKT_ADDR_SIDEBAND_H       (91),
		.PKT_ADDR_SIDEBAND_L       (91),
		.PKT_PROTECTION_H          (117),
		.PKT_PROTECTION_L          (115),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_RESPONSE_STATUS_L     (122),
		.PKT_RESPONSE_STATUS_H     (123),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (71),
		.PKT_TRANS_LOCK            (70),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (99),
		.PKT_THREAD_ID_H           (114),
		.PKT_THREAD_ID_L           (103),
		.PKT_QOS_L                 (94),
		.PKT_QOS_H                 (94),
		.PKT_ORI_BURST_SIZE_L      (124),
		.PKT_ORI_BURST_SIZE_H      (126),
		.PKT_DATA_SIDEBAND_H       (92),
		.PKT_DATA_SIDEBAND_L       (92),
		.ST_DATA_W                 (127),
		.ST_CHANNEL_W              (12),
		.ID                        (0)
	) hps_h2f_axi_master_agent (
		.aclk                   (clk_0_clk_clk),                                                   //              clk.clk
		.aresetn                (~HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_h2f_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (hps_h2f_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (hps_h2f_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (hps_h2f_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (hps_h2f_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (hps_h2f_axi_master_wr_limiter_rsp_src_valid),                     //         write_rp.valid
		.write_rp_data          (hps_h2f_axi_master_wr_limiter_rsp_src_data),                      //                 .data
		.write_rp_channel       (hps_h2f_axi_master_wr_limiter_rsp_src_channel),                   //                 .channel
		.write_rp_startofpacket (hps_h2f_axi_master_wr_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.write_rp_endofpacket   (hps_h2f_axi_master_wr_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.write_rp_ready         (hps_h2f_axi_master_wr_limiter_rsp_src_ready),                     //                 .ready
		.read_cp_valid          (hps_h2f_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (hps_h2f_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (hps_h2f_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (hps_h2f_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (hps_h2f_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (hps_h2f_axi_master_rd_limiter_rsp_src_valid),                     //          read_rp.valid
		.read_rp_data           (hps_h2f_axi_master_rd_limiter_rsp_src_data),                      //                 .data
		.read_rp_channel        (hps_h2f_axi_master_rd_limiter_rsp_src_channel),                   //                 .channel
		.read_rp_startofpacket  (hps_h2f_axi_master_rd_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.read_rp_endofpacket    (hps_h2f_axi_master_rd_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.read_rp_ready          (hps_h2f_axi_master_rd_limiter_rsp_src_ready),                     //                 .ready
		.awid                   (HPS_h2f_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (HPS_h2f_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (HPS_h2f_axi_master_awlen),                                        //                 .awlen
		.awsize                 (HPS_h2f_axi_master_awsize),                                       //                 .awsize
		.awburst                (HPS_h2f_axi_master_awburst),                                      //                 .awburst
		.awlock                 (HPS_h2f_axi_master_awlock),                                       //                 .awlock
		.awcache                (HPS_h2f_axi_master_awcache),                                      //                 .awcache
		.awprot                 (HPS_h2f_axi_master_awprot),                                       //                 .awprot
		.awvalid                (HPS_h2f_axi_master_awvalid),                                      //                 .awvalid
		.awready                (HPS_h2f_axi_master_awready),                                      //                 .awready
		.wid                    (HPS_h2f_axi_master_wid),                                          //                 .wid
		.wdata                  (HPS_h2f_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (HPS_h2f_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (HPS_h2f_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (HPS_h2f_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (HPS_h2f_axi_master_wready),                                       //                 .wready
		.bid                    (HPS_h2f_axi_master_bid),                                          //                 .bid
		.bresp                  (HPS_h2f_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (HPS_h2f_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (HPS_h2f_axi_master_bready),                                       //                 .bready
		.arid                   (HPS_h2f_axi_master_arid),                                         //                 .arid
		.araddr                 (HPS_h2f_axi_master_araddr),                                       //                 .araddr
		.arlen                  (HPS_h2f_axi_master_arlen),                                        //                 .arlen
		.arsize                 (HPS_h2f_axi_master_arsize),                                       //                 .arsize
		.arburst                (HPS_h2f_axi_master_arburst),                                      //                 .arburst
		.arlock                 (HPS_h2f_axi_master_arlock),                                       //                 .arlock
		.arcache                (HPS_h2f_axi_master_arcache),                                      //                 .arcache
		.arprot                 (HPS_h2f_axi_master_arprot),                                       //                 .arprot
		.arvalid                (HPS_h2f_axi_master_arvalid),                                      //                 .arvalid
		.arready                (HPS_h2f_axi_master_arready),                                      //                 .arready
		.rid                    (HPS_h2f_axi_master_rid),                                          //                 .rid
		.rdata                  (HPS_h2f_axi_master_rdata),                                        //                 .rdata
		.rresp                  (HPS_h2f_axi_master_rresp),                                        //                 .rresp
		.rlast                  (HPS_h2f_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (HPS_h2f_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (HPS_h2f_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                            //      (terminated)
		.aruser                 (1'b0),                                                            //      (terminated)
		.awqos                  (4'b0000),                                                         //      (terminated)
		.arqos                  (4'b0000),                                                         //      (terminated)
		.awregion               (4'b0000),                                                         //      (terminated)
		.arregion               (4'b0000),                                                         //      (terminated)
		.wuser                  (1'b0),                                                            //      (terminated)
		.ruser                  (),                                                                //      (terminated)
		.buser                  ()                                                                 //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (108),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) node_0_processing_mem_agent (
		.clk                     (clk_0_clk_clk),                                             //             clk.clk
		.reset                   (terminal_north_0_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (node_0_processing_mem_agent_m0_address),                    //              m0.address
		.m0_burstcount           (node_0_processing_mem_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (node_0_processing_mem_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (node_0_processing_mem_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (node_0_processing_mem_agent_m0_lock),                       //                .lock
		.m0_readdata             (node_0_processing_mem_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (node_0_processing_mem_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (node_0_processing_mem_agent_m0_read),                       //                .read
		.m0_waitrequest          (node_0_processing_mem_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (node_0_processing_mem_agent_m0_writedata),                  //                .writedata
		.m0_write                (node_0_processing_mem_agent_m0_write),                      //                .write
		.rp_endofpacket          (node_0_processing_mem_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (node_0_processing_mem_agent_rp_ready),                      //                .ready
		.rp_valid                (node_0_processing_mem_agent_rp_valid),                      //                .valid
		.rp_data                 (node_0_processing_mem_agent_rp_data),                       //                .data
		.rp_startofpacket        (node_0_processing_mem_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (node_0_processing_mem_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (node_0_processing_mem_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (node_0_processing_mem_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (node_0_processing_mem_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (node_0_processing_mem_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (node_0_processing_mem_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (node_0_processing_mem_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (node_0_processing_mem_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (node_0_processing_mem_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (node_0_processing_mem_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (node_0_processing_mem_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (node_0_processing_mem_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (node_0_processing_mem_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (node_0_processing_mem_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (node_0_processing_mem_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (node_0_processing_mem_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (node_0_processing_mem_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (node_0_processing_mem_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (node_0_processing_mem_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) node_0_processing_mem_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                          //       clk.clk
		.reset             (terminal_north_0_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (node_0_processing_mem_agent_rf_source_data),             //        in.data
		.in_valid          (node_0_processing_mem_agent_rf_source_valid),            //          .valid
		.in_ready          (node_0_processing_mem_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (node_0_processing_mem_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (node_0_processing_mem_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (node_0_processing_mem_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (node_0_processing_mem_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (node_0_processing_mem_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (node_0_processing_mem_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (node_0_processing_mem_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) node_0_processing_mem_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                      //       clk.clk
		.reset             (terminal_north_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (node_0_processing_mem_agent_rdata_fifo_src_data),    //        in.data
		.in_valid          (node_0_processing_mem_agent_rdata_fifo_src_valid),   //          .valid
		.in_ready          (node_0_processing_mem_agent_rdata_fifo_src_ready),   //          .ready
		.out_data          (node_0_processing_mem_agent_rdata_fifo_out_data),    //       out.data
		.out_valid         (node_0_processing_mem_agent_rdata_fifo_out_valid),   //          .valid
		.out_ready         (node_0_processing_mem_agent_rdata_fifo_out_ready),   //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (108),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) node_1_processing_mem_agent (
		.clk                     (clk_0_clk_clk),                                             //             clk.clk
		.reset                   (terminal_north_0_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (node_1_processing_mem_agent_m0_address),                    //              m0.address
		.m0_burstcount           (node_1_processing_mem_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (node_1_processing_mem_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (node_1_processing_mem_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (node_1_processing_mem_agent_m0_lock),                       //                .lock
		.m0_readdata             (node_1_processing_mem_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (node_1_processing_mem_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (node_1_processing_mem_agent_m0_read),                       //                .read
		.m0_waitrequest          (node_1_processing_mem_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (node_1_processing_mem_agent_m0_writedata),                  //                .writedata
		.m0_write                (node_1_processing_mem_agent_m0_write),                      //                .write
		.rp_endofpacket          (node_1_processing_mem_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (node_1_processing_mem_agent_rp_ready),                      //                .ready
		.rp_valid                (node_1_processing_mem_agent_rp_valid),                      //                .valid
		.rp_data                 (node_1_processing_mem_agent_rp_data),                       //                .data
		.rp_startofpacket        (node_1_processing_mem_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (node_1_processing_mem_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (node_1_processing_mem_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (node_1_processing_mem_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (node_1_processing_mem_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (node_1_processing_mem_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (node_1_processing_mem_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (node_1_processing_mem_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (node_1_processing_mem_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (node_1_processing_mem_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (node_1_processing_mem_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (node_1_processing_mem_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (node_1_processing_mem_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (node_1_processing_mem_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (node_1_processing_mem_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (node_1_processing_mem_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (node_1_processing_mem_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (node_1_processing_mem_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (node_1_processing_mem_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (node_1_processing_mem_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) node_1_processing_mem_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                          //       clk.clk
		.reset             (terminal_north_0_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (node_1_processing_mem_agent_rf_source_data),             //        in.data
		.in_valid          (node_1_processing_mem_agent_rf_source_valid),            //          .valid
		.in_ready          (node_1_processing_mem_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (node_1_processing_mem_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (node_1_processing_mem_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (node_1_processing_mem_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (node_1_processing_mem_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (node_1_processing_mem_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (node_1_processing_mem_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (node_1_processing_mem_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) node_1_processing_mem_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                      //       clk.clk
		.reset             (terminal_north_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (node_1_processing_mem_agent_rdata_fifo_src_data),    //        in.data
		.in_valid          (node_1_processing_mem_agent_rdata_fifo_src_valid),   //          .valid
		.in_ready          (node_1_processing_mem_agent_rdata_fifo_src_ready),   //          .ready
		.out_data          (node_1_processing_mem_agent_rdata_fifo_out_data),    //       out.data
		.out_valid         (node_1_processing_mem_agent_rdata_fifo_out_valid),   //          .valid
		.out_ready         (node_1_processing_mem_agent_rdata_fifo_out_ready),   //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (108),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) node_65536_processing_mem_agent (
		.clk                     (clk_0_clk_clk),                                                 //             clk.clk
		.reset                   (terminal_north_0_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (node_65536_processing_mem_agent_m0_address),                    //              m0.address
		.m0_burstcount           (node_65536_processing_mem_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (node_65536_processing_mem_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (node_65536_processing_mem_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (node_65536_processing_mem_agent_m0_lock),                       //                .lock
		.m0_readdata             (node_65536_processing_mem_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (node_65536_processing_mem_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (node_65536_processing_mem_agent_m0_read),                       //                .read
		.m0_waitrequest          (node_65536_processing_mem_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (node_65536_processing_mem_agent_m0_writedata),                  //                .writedata
		.m0_write                (node_65536_processing_mem_agent_m0_write),                      //                .write
		.rp_endofpacket          (node_65536_processing_mem_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (node_65536_processing_mem_agent_rp_ready),                      //                .ready
		.rp_valid                (node_65536_processing_mem_agent_rp_valid),                      //                .valid
		.rp_data                 (node_65536_processing_mem_agent_rp_data),                       //                .data
		.rp_startofpacket        (node_65536_processing_mem_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (node_65536_processing_mem_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (node_65536_processing_mem_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (node_65536_processing_mem_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (node_65536_processing_mem_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (node_65536_processing_mem_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (node_65536_processing_mem_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (node_65536_processing_mem_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (node_65536_processing_mem_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (node_65536_processing_mem_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (node_65536_processing_mem_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (node_65536_processing_mem_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (node_65536_processing_mem_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (node_65536_processing_mem_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (node_65536_processing_mem_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (node_65536_processing_mem_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (node_65536_processing_mem_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (node_65536_processing_mem_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (node_65536_processing_mem_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (node_65536_processing_mem_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) node_65536_processing_mem_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                              //       clk.clk
		.reset             (terminal_north_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (node_65536_processing_mem_agent_rf_source_data),             //        in.data
		.in_valid          (node_65536_processing_mem_agent_rf_source_valid),            //          .valid
		.in_ready          (node_65536_processing_mem_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (node_65536_processing_mem_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (node_65536_processing_mem_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (node_65536_processing_mem_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (node_65536_processing_mem_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (node_65536_processing_mem_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (node_65536_processing_mem_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (node_65536_processing_mem_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) node_65536_processing_mem_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (terminal_north_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (node_65536_processing_mem_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (node_65536_processing_mem_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (node_65536_processing_mem_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (node_65536_processing_mem_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (node_65536_processing_mem_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (node_65536_processing_mem_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                 // (terminated)
		.out_startofpacket (),                                                     // (terminated)
		.out_endofpacket   (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (108),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) node_65537_processing_mem_agent (
		.clk                     (clk_0_clk_clk),                                                 //             clk.clk
		.reset                   (terminal_north_0_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (node_65537_processing_mem_agent_m0_address),                    //              m0.address
		.m0_burstcount           (node_65537_processing_mem_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (node_65537_processing_mem_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (node_65537_processing_mem_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (node_65537_processing_mem_agent_m0_lock),                       //                .lock
		.m0_readdata             (node_65537_processing_mem_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (node_65537_processing_mem_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (node_65537_processing_mem_agent_m0_read),                       //                .read
		.m0_waitrequest          (node_65537_processing_mem_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (node_65537_processing_mem_agent_m0_writedata),                  //                .writedata
		.m0_write                (node_65537_processing_mem_agent_m0_write),                      //                .write
		.rp_endofpacket          (node_65537_processing_mem_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (node_65537_processing_mem_agent_rp_ready),                      //                .ready
		.rp_valid                (node_65537_processing_mem_agent_rp_valid),                      //                .valid
		.rp_data                 (node_65537_processing_mem_agent_rp_data),                       //                .data
		.rp_startofpacket        (node_65537_processing_mem_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (node_65537_processing_mem_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (node_65537_processing_mem_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (node_65537_processing_mem_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (node_65537_processing_mem_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (node_65537_processing_mem_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (node_65537_processing_mem_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (node_65537_processing_mem_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (node_65537_processing_mem_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (node_65537_processing_mem_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (node_65537_processing_mem_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (node_65537_processing_mem_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (node_65537_processing_mem_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (node_65537_processing_mem_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (node_65537_processing_mem_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (node_65537_processing_mem_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (node_65537_processing_mem_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (node_65537_processing_mem_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (node_65537_processing_mem_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (node_65537_processing_mem_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) node_65537_processing_mem_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                              //       clk.clk
		.reset             (terminal_north_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (node_65537_processing_mem_agent_rf_source_data),             //        in.data
		.in_valid          (node_65537_processing_mem_agent_rf_source_valid),            //          .valid
		.in_ready          (node_65537_processing_mem_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (node_65537_processing_mem_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (node_65537_processing_mem_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (node_65537_processing_mem_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (node_65537_processing_mem_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (node_65537_processing_mem_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (node_65537_processing_mem_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (node_65537_processing_mem_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) node_65537_processing_mem_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (terminal_north_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (node_65537_processing_mem_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (node_65537_processing_mem_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (node_65537_processing_mem_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (node_65537_processing_mem_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (node_65537_processing_mem_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (node_65537_processing_mem_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                 // (terminated)
		.out_startofpacket (),                                                     // (terminated)
		.out_endofpacket   (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (108),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) terminal_north_0_status_agent (
		.clk                     (clk_0_clk_clk),                                               //             clk.clk
		.reset                   (terminal_north_0_reset_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (terminal_north_0_status_agent_m0_address),                    //              m0.address
		.m0_burstcount           (terminal_north_0_status_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (terminal_north_0_status_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (terminal_north_0_status_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (terminal_north_0_status_agent_m0_lock),                       //                .lock
		.m0_readdata             (terminal_north_0_status_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (terminal_north_0_status_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (terminal_north_0_status_agent_m0_read),                       //                .read
		.m0_waitrequest          (terminal_north_0_status_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (terminal_north_0_status_agent_m0_writedata),                  //                .writedata
		.m0_write                (terminal_north_0_status_agent_m0_write),                      //                .write
		.rp_endofpacket          (terminal_north_0_status_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (terminal_north_0_status_agent_rp_ready),                      //                .ready
		.rp_valid                (terminal_north_0_status_agent_rp_valid),                      //                .valid
		.rp_data                 (terminal_north_0_status_agent_rp_data),                       //                .data
		.rp_startofpacket        (terminal_north_0_status_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (terminal_north_0_status_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (terminal_north_0_status_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (terminal_north_0_status_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (terminal_north_0_status_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (terminal_north_0_status_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (terminal_north_0_status_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (terminal_north_0_status_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (terminal_north_0_status_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (terminal_north_0_status_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (terminal_north_0_status_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (terminal_north_0_status_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (terminal_north_0_status_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (terminal_north_0_status_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (terminal_north_0_status_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (terminal_north_0_status_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (terminal_north_0_status_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (terminal_north_0_status_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (terminal_north_0_status_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (terminal_north_0_status_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) terminal_north_0_status_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (terminal_north_0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (terminal_north_0_status_agent_rf_source_data),             //        in.data
		.in_valid          (terminal_north_0_status_agent_rf_source_valid),            //          .valid
		.in_ready          (terminal_north_0_status_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (terminal_north_0_status_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (terminal_north_0_status_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (terminal_north_0_status_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (terminal_north_0_status_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (terminal_north_0_status_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (terminal_north_0_status_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (terminal_north_0_status_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) terminal_north_0_status_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                      //       clk.clk
		.reset             (terminal_north_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (terminal_north_0_status_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (terminal_north_0_status_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (terminal_north_0_status_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (terminal_north_0_status_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (terminal_north_0_status_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (terminal_north_0_status_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (108),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) terminal_north_1_status_agent (
		.clk                     (clk_0_clk_clk),                                               //             clk.clk
		.reset                   (terminal_north_0_reset_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (terminal_north_1_status_agent_m0_address),                    //              m0.address
		.m0_burstcount           (terminal_north_1_status_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (terminal_north_1_status_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (terminal_north_1_status_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (terminal_north_1_status_agent_m0_lock),                       //                .lock
		.m0_readdata             (terminal_north_1_status_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (terminal_north_1_status_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (terminal_north_1_status_agent_m0_read),                       //                .read
		.m0_waitrequest          (terminal_north_1_status_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (terminal_north_1_status_agent_m0_writedata),                  //                .writedata
		.m0_write                (terminal_north_1_status_agent_m0_write),                      //                .write
		.rp_endofpacket          (terminal_north_1_status_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (terminal_north_1_status_agent_rp_ready),                      //                .ready
		.rp_valid                (terminal_north_1_status_agent_rp_valid),                      //                .valid
		.rp_data                 (terminal_north_1_status_agent_rp_data),                       //                .data
		.rp_startofpacket        (terminal_north_1_status_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (terminal_north_1_status_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (terminal_north_1_status_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (terminal_north_1_status_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (terminal_north_1_status_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (terminal_north_1_status_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (terminal_north_1_status_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (terminal_north_1_status_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (terminal_north_1_status_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (terminal_north_1_status_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (terminal_north_1_status_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (terminal_north_1_status_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (terminal_north_1_status_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (terminal_north_1_status_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (terminal_north_1_status_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (terminal_north_1_status_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (terminal_north_1_status_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (terminal_north_1_status_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (terminal_north_1_status_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (terminal_north_1_status_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) terminal_north_1_status_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (terminal_north_0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (terminal_north_1_status_agent_rf_source_data),             //        in.data
		.in_valid          (terminal_north_1_status_agent_rf_source_valid),            //          .valid
		.in_ready          (terminal_north_1_status_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (terminal_north_1_status_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (terminal_north_1_status_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (terminal_north_1_status_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (terminal_north_1_status_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (terminal_north_1_status_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (terminal_north_1_status_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (terminal_north_1_status_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) terminal_north_1_status_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                      //       clk.clk
		.reset             (terminal_north_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (terminal_north_1_status_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (terminal_north_1_status_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (terminal_north_1_status_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (terminal_north_1_status_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (terminal_north_1_status_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (terminal_north_1_status_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (108),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) terminal_south_0_status_agent (
		.clk                     (clk_0_clk_clk),                                               //             clk.clk
		.reset                   (terminal_north_0_reset_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (terminal_south_0_status_agent_m0_address),                    //              m0.address
		.m0_burstcount           (terminal_south_0_status_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (terminal_south_0_status_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (terminal_south_0_status_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (terminal_south_0_status_agent_m0_lock),                       //                .lock
		.m0_readdata             (terminal_south_0_status_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (terminal_south_0_status_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (terminal_south_0_status_agent_m0_read),                       //                .read
		.m0_waitrequest          (terminal_south_0_status_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (terminal_south_0_status_agent_m0_writedata),                  //                .writedata
		.m0_write                (terminal_south_0_status_agent_m0_write),                      //                .write
		.rp_endofpacket          (terminal_south_0_status_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (terminal_south_0_status_agent_rp_ready),                      //                .ready
		.rp_valid                (terminal_south_0_status_agent_rp_valid),                      //                .valid
		.rp_data                 (terminal_south_0_status_agent_rp_data),                       //                .data
		.rp_startofpacket        (terminal_south_0_status_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (terminal_south_0_status_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (terminal_south_0_status_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (terminal_south_0_status_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (terminal_south_0_status_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (terminal_south_0_status_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (terminal_south_0_status_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (terminal_south_0_status_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (terminal_south_0_status_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (terminal_south_0_status_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (terminal_south_0_status_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (terminal_south_0_status_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (terminal_south_0_status_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (terminal_south_0_status_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (terminal_south_0_status_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (terminal_south_0_status_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (terminal_south_0_status_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (terminal_south_0_status_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (terminal_south_0_status_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (terminal_south_0_status_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) terminal_south_0_status_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (terminal_north_0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (terminal_south_0_status_agent_rf_source_data),             //        in.data
		.in_valid          (terminal_south_0_status_agent_rf_source_valid),            //          .valid
		.in_ready          (terminal_south_0_status_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (terminal_south_0_status_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (terminal_south_0_status_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (terminal_south_0_status_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (terminal_south_0_status_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (terminal_south_0_status_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (terminal_south_0_status_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (terminal_south_0_status_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) terminal_south_0_status_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                      //       clk.clk
		.reset             (terminal_north_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (terminal_south_0_status_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (terminal_south_0_status_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (terminal_south_0_status_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (terminal_south_0_status_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (terminal_south_0_status_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (terminal_south_0_status_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (108),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) terminal_south_1_status_agent (
		.clk                     (clk_0_clk_clk),                                               //             clk.clk
		.reset                   (terminal_north_0_reset_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (terminal_south_1_status_agent_m0_address),                    //              m0.address
		.m0_burstcount           (terminal_south_1_status_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (terminal_south_1_status_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (terminal_south_1_status_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (terminal_south_1_status_agent_m0_lock),                       //                .lock
		.m0_readdata             (terminal_south_1_status_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (terminal_south_1_status_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (terminal_south_1_status_agent_m0_read),                       //                .read
		.m0_waitrequest          (terminal_south_1_status_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (terminal_south_1_status_agent_m0_writedata),                  //                .writedata
		.m0_write                (terminal_south_1_status_agent_m0_write),                      //                .write
		.rp_endofpacket          (terminal_south_1_status_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (terminal_south_1_status_agent_rp_ready),                      //                .ready
		.rp_valid                (terminal_south_1_status_agent_rp_valid),                      //                .valid
		.rp_data                 (terminal_south_1_status_agent_rp_data),                       //                .data
		.rp_startofpacket        (terminal_south_1_status_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (terminal_south_1_status_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (terminal_south_1_status_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (terminal_south_1_status_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (terminal_south_1_status_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (terminal_south_1_status_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (terminal_south_1_status_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (terminal_south_1_status_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (terminal_south_1_status_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (terminal_south_1_status_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (terminal_south_1_status_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (terminal_south_1_status_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (terminal_south_1_status_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (terminal_south_1_status_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (terminal_south_1_status_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (terminal_south_1_status_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (terminal_south_1_status_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (terminal_south_1_status_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (terminal_south_1_status_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (terminal_south_1_status_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) terminal_south_1_status_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (terminal_north_0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (terminal_south_1_status_agent_rf_source_data),             //        in.data
		.in_valid          (terminal_south_1_status_agent_rf_source_valid),            //          .valid
		.in_ready          (terminal_south_1_status_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (terminal_south_1_status_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (terminal_south_1_status_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (terminal_south_1_status_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (terminal_south_1_status_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (terminal_south_1_status_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (terminal_south_1_status_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (terminal_south_1_status_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) terminal_south_1_status_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                      //       clk.clk
		.reset             (terminal_north_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (terminal_south_1_status_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (terminal_south_1_status_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (terminal_south_1_status_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (terminal_south_1_status_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (terminal_south_1_status_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (terminal_south_1_status_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (108),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) terminal_west_0_status_agent (
		.clk                     (clk_0_clk_clk),                                              //             clk.clk
		.reset                   (terminal_north_0_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (terminal_west_0_status_agent_m0_address),                    //              m0.address
		.m0_burstcount           (terminal_west_0_status_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (terminal_west_0_status_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (terminal_west_0_status_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (terminal_west_0_status_agent_m0_lock),                       //                .lock
		.m0_readdata             (terminal_west_0_status_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (terminal_west_0_status_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (terminal_west_0_status_agent_m0_read),                       //                .read
		.m0_waitrequest          (terminal_west_0_status_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (terminal_west_0_status_agent_m0_writedata),                  //                .writedata
		.m0_write                (terminal_west_0_status_agent_m0_write),                      //                .write
		.rp_endofpacket          (terminal_west_0_status_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (terminal_west_0_status_agent_rp_ready),                      //                .ready
		.rp_valid                (terminal_west_0_status_agent_rp_valid),                      //                .valid
		.rp_data                 (terminal_west_0_status_agent_rp_data),                       //                .data
		.rp_startofpacket        (terminal_west_0_status_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (terminal_west_0_status_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (terminal_west_0_status_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (terminal_west_0_status_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (terminal_west_0_status_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (terminal_west_0_status_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (terminal_west_0_status_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (terminal_west_0_status_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (terminal_west_0_status_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (terminal_west_0_status_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (terminal_west_0_status_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (terminal_west_0_status_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (terminal_west_0_status_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (terminal_west_0_status_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (terminal_west_0_status_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (terminal_west_0_status_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (terminal_west_0_status_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (terminal_west_0_status_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (terminal_west_0_status_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (terminal_west_0_status_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) terminal_west_0_status_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                           //       clk.clk
		.reset             (terminal_north_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (terminal_west_0_status_agent_rf_source_data),             //        in.data
		.in_valid          (terminal_west_0_status_agent_rf_source_valid),            //          .valid
		.in_ready          (terminal_west_0_status_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (terminal_west_0_status_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (terminal_west_0_status_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (terminal_west_0_status_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (terminal_west_0_status_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (terminal_west_0_status_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (terminal_west_0_status_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (terminal_west_0_status_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) terminal_west_0_status_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                      //       clk.clk
		.reset             (terminal_north_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (terminal_west_0_status_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (terminal_west_0_status_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (terminal_west_0_status_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (terminal_west_0_status_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (terminal_west_0_status_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (terminal_west_0_status_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (108),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) terminal_east_1_status_agent (
		.clk                     (clk_0_clk_clk),                                              //             clk.clk
		.reset                   (terminal_north_0_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (terminal_east_1_status_agent_m0_address),                    //              m0.address
		.m0_burstcount           (terminal_east_1_status_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (terminal_east_1_status_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (terminal_east_1_status_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (terminal_east_1_status_agent_m0_lock),                       //                .lock
		.m0_readdata             (terminal_east_1_status_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (terminal_east_1_status_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (terminal_east_1_status_agent_m0_read),                       //                .read
		.m0_waitrequest          (terminal_east_1_status_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (terminal_east_1_status_agent_m0_writedata),                  //                .writedata
		.m0_write                (terminal_east_1_status_agent_m0_write),                      //                .write
		.rp_endofpacket          (terminal_east_1_status_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (terminal_east_1_status_agent_rp_ready),                      //                .ready
		.rp_valid                (terminal_east_1_status_agent_rp_valid),                      //                .valid
		.rp_data                 (terminal_east_1_status_agent_rp_data),                       //                .data
		.rp_startofpacket        (terminal_east_1_status_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (terminal_east_1_status_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (terminal_east_1_status_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (terminal_east_1_status_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (terminal_east_1_status_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (terminal_east_1_status_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (terminal_east_1_status_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (terminal_east_1_status_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (terminal_east_1_status_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (terminal_east_1_status_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (terminal_east_1_status_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (terminal_east_1_status_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (terminal_east_1_status_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (terminal_east_1_status_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (terminal_east_1_status_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (terminal_east_1_status_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (terminal_east_1_status_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (terminal_east_1_status_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (terminal_east_1_status_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (terminal_east_1_status_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) terminal_east_1_status_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                           //       clk.clk
		.reset             (terminal_north_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (terminal_east_1_status_agent_rf_source_data),             //        in.data
		.in_valid          (terminal_east_1_status_agent_rf_source_valid),            //          .valid
		.in_ready          (terminal_east_1_status_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (terminal_east_1_status_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (terminal_east_1_status_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (terminal_east_1_status_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (terminal_east_1_status_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (terminal_east_1_status_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (terminal_east_1_status_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (terminal_east_1_status_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) terminal_east_1_status_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                      //       clk.clk
		.reset             (terminal_north_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (terminal_east_1_status_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (terminal_east_1_status_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (terminal_east_1_status_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (terminal_east_1_status_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (terminal_east_1_status_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (terminal_east_1_status_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (108),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) terminal_east_0_status_agent (
		.clk                     (clk_0_clk_clk),                                              //             clk.clk
		.reset                   (terminal_north_0_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (terminal_east_0_status_agent_m0_address),                    //              m0.address
		.m0_burstcount           (terminal_east_0_status_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (terminal_east_0_status_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (terminal_east_0_status_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (terminal_east_0_status_agent_m0_lock),                       //                .lock
		.m0_readdata             (terminal_east_0_status_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (terminal_east_0_status_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (terminal_east_0_status_agent_m0_read),                       //                .read
		.m0_waitrequest          (terminal_east_0_status_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (terminal_east_0_status_agent_m0_writedata),                  //                .writedata
		.m0_write                (terminal_east_0_status_agent_m0_write),                      //                .write
		.rp_endofpacket          (terminal_east_0_status_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (terminal_east_0_status_agent_rp_ready),                      //                .ready
		.rp_valid                (terminal_east_0_status_agent_rp_valid),                      //                .valid
		.rp_data                 (terminal_east_0_status_agent_rp_data),                       //                .data
		.rp_startofpacket        (terminal_east_0_status_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (terminal_east_0_status_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (terminal_east_0_status_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (terminal_east_0_status_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (terminal_east_0_status_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (terminal_east_0_status_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (terminal_east_0_status_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (terminal_east_0_status_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (terminal_east_0_status_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (terminal_east_0_status_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (terminal_east_0_status_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (terminal_east_0_status_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (terminal_east_0_status_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (terminal_east_0_status_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (terminal_east_0_status_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (terminal_east_0_status_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (terminal_east_0_status_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (terminal_east_0_status_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (terminal_east_0_status_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (terminal_east_0_status_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) terminal_east_0_status_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                           //       clk.clk
		.reset             (terminal_north_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (terminal_east_0_status_agent_rf_source_data),             //        in.data
		.in_valid          (terminal_east_0_status_agent_rf_source_valid),            //          .valid
		.in_ready          (terminal_east_0_status_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (terminal_east_0_status_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (terminal_east_0_status_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (terminal_east_0_status_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (terminal_east_0_status_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (terminal_east_0_status_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (terminal_east_0_status_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (terminal_east_0_status_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) terminal_east_0_status_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                      //       clk.clk
		.reset             (terminal_north_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (terminal_east_0_status_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (terminal_east_0_status_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (terminal_east_0_status_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (terminal_east_0_status_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (terminal_east_0_status_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (terminal_east_0_status_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (108),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) terminal_west_1_status_agent (
		.clk                     (clk_0_clk_clk),                                              //             clk.clk
		.reset                   (terminal_north_0_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (terminal_west_1_status_agent_m0_address),                    //              m0.address
		.m0_burstcount           (terminal_west_1_status_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (terminal_west_1_status_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (terminal_west_1_status_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (terminal_west_1_status_agent_m0_lock),                       //                .lock
		.m0_readdata             (terminal_west_1_status_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (terminal_west_1_status_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (terminal_west_1_status_agent_m0_read),                       //                .read
		.m0_waitrequest          (terminal_west_1_status_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (terminal_west_1_status_agent_m0_writedata),                  //                .writedata
		.m0_write                (terminal_west_1_status_agent_m0_write),                      //                .write
		.rp_endofpacket          (terminal_west_1_status_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (terminal_west_1_status_agent_rp_ready),                      //                .ready
		.rp_valid                (terminal_west_1_status_agent_rp_valid),                      //                .valid
		.rp_data                 (terminal_west_1_status_agent_rp_data),                       //                .data
		.rp_startofpacket        (terminal_west_1_status_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (terminal_west_1_status_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (terminal_west_1_status_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (terminal_west_1_status_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (terminal_west_1_status_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (terminal_west_1_status_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (terminal_west_1_status_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (terminal_west_1_status_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (terminal_west_1_status_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (terminal_west_1_status_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (terminal_west_1_status_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (terminal_west_1_status_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (terminal_west_1_status_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (terminal_west_1_status_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (terminal_west_1_status_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (terminal_west_1_status_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (terminal_west_1_status_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (terminal_west_1_status_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (terminal_west_1_status_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (terminal_west_1_status_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) terminal_west_1_status_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                           //       clk.clk
		.reset             (terminal_north_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (terminal_west_1_status_agent_rf_source_data),             //        in.data
		.in_valid          (terminal_west_1_status_agent_rf_source_valid),            //          .valid
		.in_ready          (terminal_west_1_status_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (terminal_west_1_status_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (terminal_west_1_status_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (terminal_west_1_status_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (terminal_west_1_status_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (terminal_west_1_status_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (terminal_west_1_status_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (terminal_west_1_status_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) terminal_west_1_status_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                      //       clk.clk
		.reset             (terminal_north_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (terminal_west_1_status_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (terminal_west_1_status_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (terminal_west_1_status_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (terminal_west_1_status_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (terminal_west_1_status_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (terminal_west_1_status_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	dircc_system_rtl_counter_mm_interconnect_0_router router (
		.sink_ready         (hps_h2f_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (hps_h2f_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (hps_h2f_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (hps_h2f_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (hps_h2f_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                                  //       clk.clk
		.reset              (HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                               //       src.ready
		.src_valid          (router_src_valid),                                               //          .valid
		.src_data           (router_src_data),                                                //          .data
		.src_channel        (router_src_channel),                                             //          .channel
		.src_startofpacket  (router_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                          //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_router router_001 (
		.sink_ready         (hps_h2f_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (hps_h2f_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (hps_h2f_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (hps_h2f_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_h2f_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                  //       clk.clk
		.reset              (HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                           //       src.ready
		.src_valid          (router_001_src_valid),                                           //          .valid
		.src_data           (router_001_src_data),                                            //          .data
		.src_channel        (router_001_src_channel),                                         //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                      //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (node_0_processing_mem_agent_rp_ready),               //      sink.ready
		.sink_valid         (node_0_processing_mem_agent_rp_valid),               //          .valid
		.sink_data          (node_0_processing_mem_agent_rp_data),                //          .data
		.sink_startofpacket (node_0_processing_mem_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (node_0_processing_mem_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clk_0_clk_clk),                                      //       clk.clk
		.reset              (terminal_north_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                               //       src.ready
		.src_valid          (router_002_src_valid),                               //          .valid
		.src_data           (router_002_src_data),                                //          .data
		.src_channel        (router_002_src_channel),                             //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                          //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (node_1_processing_mem_agent_rp_ready),               //      sink.ready
		.sink_valid         (node_1_processing_mem_agent_rp_valid),               //          .valid
		.sink_data          (node_1_processing_mem_agent_rp_data),                //          .data
		.sink_startofpacket (node_1_processing_mem_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (node_1_processing_mem_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clk_0_clk_clk),                                      //       clk.clk
		.reset              (terminal_north_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                               //       src.ready
		.src_valid          (router_003_src_valid),                               //          .valid
		.src_data           (router_003_src_data),                                //          .data
		.src_channel        (router_003_src_channel),                             //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                          //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_router_002 router_004 (
		.sink_ready         (node_65536_processing_mem_agent_rp_ready),           //      sink.ready
		.sink_valid         (node_65536_processing_mem_agent_rp_valid),           //          .valid
		.sink_data          (node_65536_processing_mem_agent_rp_data),            //          .data
		.sink_startofpacket (node_65536_processing_mem_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (node_65536_processing_mem_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_0_clk_clk),                                      //       clk.clk
		.reset              (terminal_north_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                               //       src.ready
		.src_valid          (router_004_src_valid),                               //          .valid
		.src_data           (router_004_src_data),                                //          .data
		.src_channel        (router_004_src_channel),                             //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                          //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_router_002 router_005 (
		.sink_ready         (node_65537_processing_mem_agent_rp_ready),           //      sink.ready
		.sink_valid         (node_65537_processing_mem_agent_rp_valid),           //          .valid
		.sink_data          (node_65537_processing_mem_agent_rp_data),            //          .data
		.sink_startofpacket (node_65537_processing_mem_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (node_65537_processing_mem_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_0_clk_clk),                                      //       clk.clk
		.reset              (terminal_north_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                               //       src.ready
		.src_valid          (router_005_src_valid),                               //          .valid
		.src_data           (router_005_src_data),                                //          .data
		.src_channel        (router_005_src_channel),                             //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                          //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_router_002 router_006 (
		.sink_ready         (terminal_north_0_status_agent_rp_ready),             //      sink.ready
		.sink_valid         (terminal_north_0_status_agent_rp_valid),             //          .valid
		.sink_data          (terminal_north_0_status_agent_rp_data),              //          .data
		.sink_startofpacket (terminal_north_0_status_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (terminal_north_0_status_agent_rp_endofpacket),       //          .endofpacket
		.clk                (clk_0_clk_clk),                                      //       clk.clk
		.reset              (terminal_north_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                               //       src.ready
		.src_valid          (router_006_src_valid),                               //          .valid
		.src_data           (router_006_src_data),                                //          .data
		.src_channel        (router_006_src_channel),                             //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                          //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_router_002 router_007 (
		.sink_ready         (terminal_north_1_status_agent_rp_ready),             //      sink.ready
		.sink_valid         (terminal_north_1_status_agent_rp_valid),             //          .valid
		.sink_data          (terminal_north_1_status_agent_rp_data),              //          .data
		.sink_startofpacket (terminal_north_1_status_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (terminal_north_1_status_agent_rp_endofpacket),       //          .endofpacket
		.clk                (clk_0_clk_clk),                                      //       clk.clk
		.reset              (terminal_north_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                               //       src.ready
		.src_valid          (router_007_src_valid),                               //          .valid
		.src_data           (router_007_src_data),                                //          .data
		.src_channel        (router_007_src_channel),                             //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                          //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_router_002 router_008 (
		.sink_ready         (terminal_south_0_status_agent_rp_ready),             //      sink.ready
		.sink_valid         (terminal_south_0_status_agent_rp_valid),             //          .valid
		.sink_data          (terminal_south_0_status_agent_rp_data),              //          .data
		.sink_startofpacket (terminal_south_0_status_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (terminal_south_0_status_agent_rp_endofpacket),       //          .endofpacket
		.clk                (clk_0_clk_clk),                                      //       clk.clk
		.reset              (terminal_north_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                               //       src.ready
		.src_valid          (router_008_src_valid),                               //          .valid
		.src_data           (router_008_src_data),                                //          .data
		.src_channel        (router_008_src_channel),                             //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                          //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_router_002 router_009 (
		.sink_ready         (terminal_south_1_status_agent_rp_ready),             //      sink.ready
		.sink_valid         (terminal_south_1_status_agent_rp_valid),             //          .valid
		.sink_data          (terminal_south_1_status_agent_rp_data),              //          .data
		.sink_startofpacket (terminal_south_1_status_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (terminal_south_1_status_agent_rp_endofpacket),       //          .endofpacket
		.clk                (clk_0_clk_clk),                                      //       clk.clk
		.reset              (terminal_north_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                               //       src.ready
		.src_valid          (router_009_src_valid),                               //          .valid
		.src_data           (router_009_src_data),                                //          .data
		.src_channel        (router_009_src_channel),                             //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                          //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_router_002 router_010 (
		.sink_ready         (terminal_west_0_status_agent_rp_ready),              //      sink.ready
		.sink_valid         (terminal_west_0_status_agent_rp_valid),              //          .valid
		.sink_data          (terminal_west_0_status_agent_rp_data),               //          .data
		.sink_startofpacket (terminal_west_0_status_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (terminal_west_0_status_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_0_clk_clk),                                      //       clk.clk
		.reset              (terminal_north_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                               //       src.ready
		.src_valid          (router_010_src_valid),                               //          .valid
		.src_data           (router_010_src_data),                                //          .data
		.src_channel        (router_010_src_channel),                             //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                          //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_router_002 router_011 (
		.sink_ready         (terminal_east_1_status_agent_rp_ready),              //      sink.ready
		.sink_valid         (terminal_east_1_status_agent_rp_valid),              //          .valid
		.sink_data          (terminal_east_1_status_agent_rp_data),               //          .data
		.sink_startofpacket (terminal_east_1_status_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (terminal_east_1_status_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_0_clk_clk),                                      //       clk.clk
		.reset              (terminal_north_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                               //       src.ready
		.src_valid          (router_011_src_valid),                               //          .valid
		.src_data           (router_011_src_data),                                //          .data
		.src_channel        (router_011_src_channel),                             //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                          //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_router_002 router_012 (
		.sink_ready         (terminal_east_0_status_agent_rp_ready),              //      sink.ready
		.sink_valid         (terminal_east_0_status_agent_rp_valid),              //          .valid
		.sink_data          (terminal_east_0_status_agent_rp_data),               //          .data
		.sink_startofpacket (terminal_east_0_status_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (terminal_east_0_status_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_0_clk_clk),                                      //       clk.clk
		.reset              (terminal_north_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                               //       src.ready
		.src_valid          (router_012_src_valid),                               //          .valid
		.src_data           (router_012_src_data),                                //          .data
		.src_channel        (router_012_src_channel),                             //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                          //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_router_002 router_013 (
		.sink_ready         (terminal_west_1_status_agent_rp_ready),              //      sink.ready
		.sink_valid         (terminal_west_1_status_agent_rp_valid),              //          .valid
		.sink_data          (terminal_west_1_status_agent_rp_data),               //          .data
		.sink_startofpacket (terminal_west_1_status_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (terminal_west_1_status_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_0_clk_clk),                                      //       clk.clk
		.reset              (terminal_north_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                               //       src.ready
		.src_valid          (router_013_src_valid),                               //          .valid
		.src_data           (router_013_src_data),                                //          .data
		.src_channel        (router_013_src_channel),                             //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                          //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (99),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (95),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (127),
		.ST_CHANNEL_W              (12),
		.VALID_WIDTH               (12),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_h2f_axi_master_wr_limiter (
		.clk                    (clk_0_clk_clk),                                                  //       clk.clk
		.reset                  (HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                               //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                               //          .valid
		.cmd_sink_data          (router_src_data),                                                //          .data
		.cmd_sink_channel       (router_src_channel),                                             //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                       //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                         //          .endofpacket
		.cmd_src_ready          (hps_h2f_axi_master_wr_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_h2f_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_h2f_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_h2f_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_h2f_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                              //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                              //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                            //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                               //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                      //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                        //          .endofpacket
		.rsp_src_ready          (hps_h2f_axi_master_wr_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_h2f_axi_master_wr_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_h2f_axi_master_wr_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_h2f_axi_master_wr_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_h2f_axi_master_wr_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_h2f_axi_master_wr_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_h2f_axi_master_wr_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (99),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (95),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (127),
		.ST_CHANNEL_W              (12),
		.VALID_WIDTH               (12),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_h2f_axi_master_rd_limiter (
		.clk                    (clk_0_clk_clk),                                                  //       clk.clk
		.reset                  (HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                           //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                           //          .valid
		.cmd_sink_data          (router_001_src_data),                                            //          .data
		.cmd_sink_channel       (router_001_src_channel),                                         //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                   //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                     //          .endofpacket
		.cmd_src_ready          (hps_h2f_axi_master_rd_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_h2f_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_h2f_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_h2f_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_h2f_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                          //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                          //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                        //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                           //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                  //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                    //          .endofpacket
		.rsp_src_ready          (hps_h2f_axi_master_rd_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_h2f_axi_master_rd_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_h2f_axi_master_rd_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_h2f_axi_master_rd_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_h2f_axi_master_rd_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_h2f_axi_master_rd_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_h2f_axi_master_rd_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (75),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_BURST_TYPE_H          (72),
		.PKT_BURST_TYPE_L          (71),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (61),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (109),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (54),
		.OUT_BURSTWRAP_H           (67),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) node_0_processing_mem_burst_adapter (
		.clk                   (clk_0_clk_clk),                                             //       cr0.clk
		.reset                 (terminal_north_0_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (node_0_processing_mem_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (node_0_processing_mem_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (node_0_processing_mem_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (node_0_processing_mem_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (node_0_processing_mem_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (node_0_processing_mem_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (node_0_processing_mem_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (node_0_processing_mem_burst_adapter_source0_data),          //          .data
		.source0_channel       (node_0_processing_mem_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (node_0_processing_mem_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (node_0_processing_mem_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (node_0_processing_mem_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (75),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_BURST_TYPE_H          (72),
		.PKT_BURST_TYPE_L          (71),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (61),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (109),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (54),
		.OUT_BURSTWRAP_H           (67),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) node_1_processing_mem_burst_adapter (
		.clk                   (clk_0_clk_clk),                                             //       cr0.clk
		.reset                 (terminal_north_0_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (node_1_processing_mem_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (node_1_processing_mem_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (node_1_processing_mem_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (node_1_processing_mem_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (node_1_processing_mem_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (node_1_processing_mem_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (node_1_processing_mem_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (node_1_processing_mem_burst_adapter_source0_data),          //          .data
		.source0_channel       (node_1_processing_mem_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (node_1_processing_mem_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (node_1_processing_mem_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (node_1_processing_mem_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (75),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_BURST_TYPE_H          (72),
		.PKT_BURST_TYPE_L          (71),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (61),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (109),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (54),
		.OUT_BURSTWRAP_H           (67),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) node_65536_processing_mem_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                 //       cr0.clk
		.reset                 (terminal_north_0_reset_reset_bridge_in_reset_reset),            // cr0_reset.reset
		.sink0_valid           (node_65536_processing_mem_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (node_65536_processing_mem_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (node_65536_processing_mem_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (node_65536_processing_mem_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (node_65536_processing_mem_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (node_65536_processing_mem_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (node_65536_processing_mem_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (node_65536_processing_mem_burst_adapter_source0_data),          //          .data
		.source0_channel       (node_65536_processing_mem_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (node_65536_processing_mem_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (node_65536_processing_mem_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (node_65536_processing_mem_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (75),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_BURST_TYPE_H          (72),
		.PKT_BURST_TYPE_L          (71),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (61),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (109),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (54),
		.OUT_BURSTWRAP_H           (67),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) node_65537_processing_mem_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                 //       cr0.clk
		.reset                 (terminal_north_0_reset_reset_bridge_in_reset_reset),            // cr0_reset.reset
		.sink0_valid           (node_65537_processing_mem_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (node_65537_processing_mem_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (node_65537_processing_mem_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (node_65537_processing_mem_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (node_65537_processing_mem_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (node_65537_processing_mem_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (node_65537_processing_mem_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (node_65537_processing_mem_burst_adapter_source0_data),          //          .data
		.source0_channel       (node_65537_processing_mem_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (node_65537_processing_mem_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (node_65537_processing_mem_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (node_65537_processing_mem_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (75),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_BURST_TYPE_H          (72),
		.PKT_BURST_TYPE_L          (71),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (61),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (109),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (54),
		.OUT_BURSTWRAP_H           (67),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) terminal_north_0_status_burst_adapter (
		.clk                   (clk_0_clk_clk),                                               //       cr0.clk
		.reset                 (terminal_north_0_reset_reset_bridge_in_reset_reset),          // cr0_reset.reset
		.sink0_valid           (terminal_north_0_status_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (terminal_north_0_status_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (terminal_north_0_status_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (terminal_north_0_status_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (terminal_north_0_status_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (terminal_north_0_status_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (terminal_north_0_status_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (terminal_north_0_status_burst_adapter_source0_data),          //          .data
		.source0_channel       (terminal_north_0_status_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (terminal_north_0_status_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (terminal_north_0_status_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (terminal_north_0_status_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (75),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_BURST_TYPE_H          (72),
		.PKT_BURST_TYPE_L          (71),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (61),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (109),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (54),
		.OUT_BURSTWRAP_H           (67),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) terminal_north_1_status_burst_adapter (
		.clk                   (clk_0_clk_clk),                                               //       cr0.clk
		.reset                 (terminal_north_0_reset_reset_bridge_in_reset_reset),          // cr0_reset.reset
		.sink0_valid           (terminal_north_1_status_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (terminal_north_1_status_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (terminal_north_1_status_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (terminal_north_1_status_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (terminal_north_1_status_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (terminal_north_1_status_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (terminal_north_1_status_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (terminal_north_1_status_burst_adapter_source0_data),          //          .data
		.source0_channel       (terminal_north_1_status_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (terminal_north_1_status_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (terminal_north_1_status_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (terminal_north_1_status_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (75),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_BURST_TYPE_H          (72),
		.PKT_BURST_TYPE_L          (71),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (61),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (109),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (54),
		.OUT_BURSTWRAP_H           (67),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) terminal_south_0_status_burst_adapter (
		.clk                   (clk_0_clk_clk),                                               //       cr0.clk
		.reset                 (terminal_north_0_reset_reset_bridge_in_reset_reset),          // cr0_reset.reset
		.sink0_valid           (terminal_south_0_status_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (terminal_south_0_status_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (terminal_south_0_status_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (terminal_south_0_status_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (terminal_south_0_status_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (terminal_south_0_status_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (terminal_south_0_status_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (terminal_south_0_status_burst_adapter_source0_data),          //          .data
		.source0_channel       (terminal_south_0_status_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (terminal_south_0_status_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (terminal_south_0_status_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (terminal_south_0_status_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (75),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_BURST_TYPE_H          (72),
		.PKT_BURST_TYPE_L          (71),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (61),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (109),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (54),
		.OUT_BURSTWRAP_H           (67),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) terminal_south_1_status_burst_adapter (
		.clk                   (clk_0_clk_clk),                                               //       cr0.clk
		.reset                 (terminal_north_0_reset_reset_bridge_in_reset_reset),          // cr0_reset.reset
		.sink0_valid           (terminal_south_1_status_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (terminal_south_1_status_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (terminal_south_1_status_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (terminal_south_1_status_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (terminal_south_1_status_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (terminal_south_1_status_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (terminal_south_1_status_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (terminal_south_1_status_burst_adapter_source0_data),          //          .data
		.source0_channel       (terminal_south_1_status_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (terminal_south_1_status_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (terminal_south_1_status_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (terminal_south_1_status_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (75),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_BURST_TYPE_H          (72),
		.PKT_BURST_TYPE_L          (71),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (61),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (109),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (54),
		.OUT_BURSTWRAP_H           (67),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) terminal_west_0_status_burst_adapter (
		.clk                   (clk_0_clk_clk),                                              //       cr0.clk
		.reset                 (terminal_north_0_reset_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (terminal_west_0_status_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (terminal_west_0_status_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (terminal_west_0_status_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (terminal_west_0_status_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (terminal_west_0_status_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (terminal_west_0_status_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (terminal_west_0_status_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (terminal_west_0_status_burst_adapter_source0_data),          //          .data
		.source0_channel       (terminal_west_0_status_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (terminal_west_0_status_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (terminal_west_0_status_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (terminal_west_0_status_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (75),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_BURST_TYPE_H          (72),
		.PKT_BURST_TYPE_L          (71),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (61),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (109),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (54),
		.OUT_BURSTWRAP_H           (67),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) terminal_east_1_status_burst_adapter (
		.clk                   (clk_0_clk_clk),                                              //       cr0.clk
		.reset                 (terminal_north_0_reset_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (terminal_east_1_status_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (terminal_east_1_status_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (terminal_east_1_status_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (terminal_east_1_status_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (terminal_east_1_status_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (terminal_east_1_status_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (terminal_east_1_status_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (terminal_east_1_status_burst_adapter_source0_data),          //          .data
		.source0_channel       (terminal_east_1_status_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (terminal_east_1_status_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (terminal_east_1_status_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (terminal_east_1_status_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (75),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_BURST_TYPE_H          (72),
		.PKT_BURST_TYPE_L          (71),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (61),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (109),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (54),
		.OUT_BURSTWRAP_H           (67),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) terminal_east_0_status_burst_adapter (
		.clk                   (clk_0_clk_clk),                                              //       cr0.clk
		.reset                 (terminal_north_0_reset_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (terminal_east_0_status_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (terminal_east_0_status_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (terminal_east_0_status_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (terminal_east_0_status_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (terminal_east_0_status_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (terminal_east_0_status_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (terminal_east_0_status_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (terminal_east_0_status_burst_adapter_source0_data),          //          .data
		.source0_channel       (terminal_east_0_status_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (terminal_east_0_status_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (terminal_east_0_status_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (terminal_east_0_status_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (75),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_BURST_TYPE_H          (72),
		.PKT_BURST_TYPE_L          (71),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (61),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (109),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (54),
		.OUT_BURSTWRAP_H           (67),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) terminal_west_1_status_burst_adapter (
		.clk                   (clk_0_clk_clk),                                              //       cr0.clk
		.reset                 (terminal_north_0_reset_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (terminal_west_1_status_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (terminal_west_1_status_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (terminal_west_1_status_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (terminal_west_1_status_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (terminal_west_1_status_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (terminal_west_1_status_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (terminal_west_1_status_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (terminal_west_1_status_burst_adapter_source0_data),          //          .data
		.source0_channel       (terminal_west_1_status_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (terminal_west_1_status_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (terminal_west_1_status_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (terminal_west_1_status_burst_adapter_source0_ready)          //          .ready
	);

	dircc_system_rtl_counter_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (clk_0_clk_clk),                                                  //        clk.clk
		.reset               (HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (hps_h2f_axi_master_wr_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel        (hps_h2f_axi_master_wr_limiter_cmd_src_channel),                  //           .channel
		.sink_data           (hps_h2f_axi_master_wr_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket  (hps_h2f_axi_master_wr_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket    (hps_h2f_axi_master_wr_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid          (hps_h2f_axi_master_wr_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready          (cmd_demux_src0_ready),                                           //       src0.ready
		.src0_valid          (cmd_demux_src0_valid),                                           //           .valid
		.src0_data           (cmd_demux_src0_data),                                            //           .data
		.src0_channel        (cmd_demux_src0_channel),                                         //           .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                                   //           .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                                     //           .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                                           //       src1.ready
		.src1_valid          (cmd_demux_src1_valid),                                           //           .valid
		.src1_data           (cmd_demux_src1_data),                                            //           .data
		.src1_channel        (cmd_demux_src1_channel),                                         //           .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                                   //           .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                                     //           .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                                           //       src2.ready
		.src2_valid          (cmd_demux_src2_valid),                                           //           .valid
		.src2_data           (cmd_demux_src2_data),                                            //           .data
		.src2_channel        (cmd_demux_src2_channel),                                         //           .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                                   //           .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                                     //           .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                                           //       src3.ready
		.src3_valid          (cmd_demux_src3_valid),                                           //           .valid
		.src3_data           (cmd_demux_src3_data),                                            //           .data
		.src3_channel        (cmd_demux_src3_channel),                                         //           .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                                   //           .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                                     //           .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                                           //       src4.ready
		.src4_valid          (cmd_demux_src4_valid),                                           //           .valid
		.src4_data           (cmd_demux_src4_data),                                            //           .data
		.src4_channel        (cmd_demux_src4_channel),                                         //           .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                                   //           .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                                     //           .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                                           //       src5.ready
		.src5_valid          (cmd_demux_src5_valid),                                           //           .valid
		.src5_data           (cmd_demux_src5_data),                                            //           .data
		.src5_channel        (cmd_demux_src5_channel),                                         //           .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                                   //           .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                                     //           .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                                           //       src6.ready
		.src6_valid          (cmd_demux_src6_valid),                                           //           .valid
		.src6_data           (cmd_demux_src6_data),                                            //           .data
		.src6_channel        (cmd_demux_src6_channel),                                         //           .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                                   //           .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                                     //           .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                                           //       src7.ready
		.src7_valid          (cmd_demux_src7_valid),                                           //           .valid
		.src7_data           (cmd_demux_src7_data),                                            //           .data
		.src7_channel        (cmd_demux_src7_channel),                                         //           .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                                   //           .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                                     //           .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                                           //       src8.ready
		.src8_valid          (cmd_demux_src8_valid),                                           //           .valid
		.src8_data           (cmd_demux_src8_data),                                            //           .data
		.src8_channel        (cmd_demux_src8_channel),                                         //           .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                                   //           .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                                     //           .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                                           //       src9.ready
		.src9_valid          (cmd_demux_src9_valid),                                           //           .valid
		.src9_data           (cmd_demux_src9_data),                                            //           .data
		.src9_channel        (cmd_demux_src9_channel),                                         //           .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                                   //           .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                                     //           .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                                          //      src10.ready
		.src10_valid         (cmd_demux_src10_valid),                                          //           .valid
		.src10_data          (cmd_demux_src10_data),                                           //           .data
		.src10_channel       (cmd_demux_src10_channel),                                        //           .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                                  //           .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                                    //           .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                                          //      src11.ready
		.src11_valid         (cmd_demux_src11_valid),                                          //           .valid
		.src11_data          (cmd_demux_src11_data),                                           //           .data
		.src11_channel       (cmd_demux_src11_channel),                                        //           .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                                  //           .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket)                                     //           .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                 (clk_0_clk_clk),                                                  //        clk.clk
		.reset               (HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (hps_h2f_axi_master_rd_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel        (hps_h2f_axi_master_rd_limiter_cmd_src_channel),                  //           .channel
		.sink_data           (hps_h2f_axi_master_rd_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket  (hps_h2f_axi_master_rd_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket    (hps_h2f_axi_master_rd_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid          (hps_h2f_axi_master_rd_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready          (cmd_demux_001_src0_ready),                                       //       src0.ready
		.src0_valid          (cmd_demux_001_src0_valid),                                       //           .valid
		.src0_data           (cmd_demux_001_src0_data),                                        //           .data
		.src0_channel        (cmd_demux_001_src0_channel),                                     //           .channel
		.src0_startofpacket  (cmd_demux_001_src0_startofpacket),                               //           .startofpacket
		.src0_endofpacket    (cmd_demux_001_src0_endofpacket),                                 //           .endofpacket
		.src1_ready          (cmd_demux_001_src1_ready),                                       //       src1.ready
		.src1_valid          (cmd_demux_001_src1_valid),                                       //           .valid
		.src1_data           (cmd_demux_001_src1_data),                                        //           .data
		.src1_channel        (cmd_demux_001_src1_channel),                                     //           .channel
		.src1_startofpacket  (cmd_demux_001_src1_startofpacket),                               //           .startofpacket
		.src1_endofpacket    (cmd_demux_001_src1_endofpacket),                                 //           .endofpacket
		.src2_ready          (cmd_demux_001_src2_ready),                                       //       src2.ready
		.src2_valid          (cmd_demux_001_src2_valid),                                       //           .valid
		.src2_data           (cmd_demux_001_src2_data),                                        //           .data
		.src2_channel        (cmd_demux_001_src2_channel),                                     //           .channel
		.src2_startofpacket  (cmd_demux_001_src2_startofpacket),                               //           .startofpacket
		.src2_endofpacket    (cmd_demux_001_src2_endofpacket),                                 //           .endofpacket
		.src3_ready          (cmd_demux_001_src3_ready),                                       //       src3.ready
		.src3_valid          (cmd_demux_001_src3_valid),                                       //           .valid
		.src3_data           (cmd_demux_001_src3_data),                                        //           .data
		.src3_channel        (cmd_demux_001_src3_channel),                                     //           .channel
		.src3_startofpacket  (cmd_demux_001_src3_startofpacket),                               //           .startofpacket
		.src3_endofpacket    (cmd_demux_001_src3_endofpacket),                                 //           .endofpacket
		.src4_ready          (cmd_demux_001_src4_ready),                                       //       src4.ready
		.src4_valid          (cmd_demux_001_src4_valid),                                       //           .valid
		.src4_data           (cmd_demux_001_src4_data),                                        //           .data
		.src4_channel        (cmd_demux_001_src4_channel),                                     //           .channel
		.src4_startofpacket  (cmd_demux_001_src4_startofpacket),                               //           .startofpacket
		.src4_endofpacket    (cmd_demux_001_src4_endofpacket),                                 //           .endofpacket
		.src5_ready          (cmd_demux_001_src5_ready),                                       //       src5.ready
		.src5_valid          (cmd_demux_001_src5_valid),                                       //           .valid
		.src5_data           (cmd_demux_001_src5_data),                                        //           .data
		.src5_channel        (cmd_demux_001_src5_channel),                                     //           .channel
		.src5_startofpacket  (cmd_demux_001_src5_startofpacket),                               //           .startofpacket
		.src5_endofpacket    (cmd_demux_001_src5_endofpacket),                                 //           .endofpacket
		.src6_ready          (cmd_demux_001_src6_ready),                                       //       src6.ready
		.src6_valid          (cmd_demux_001_src6_valid),                                       //           .valid
		.src6_data           (cmd_demux_001_src6_data),                                        //           .data
		.src6_channel        (cmd_demux_001_src6_channel),                                     //           .channel
		.src6_startofpacket  (cmd_demux_001_src6_startofpacket),                               //           .startofpacket
		.src6_endofpacket    (cmd_demux_001_src6_endofpacket),                                 //           .endofpacket
		.src7_ready          (cmd_demux_001_src7_ready),                                       //       src7.ready
		.src7_valid          (cmd_demux_001_src7_valid),                                       //           .valid
		.src7_data           (cmd_demux_001_src7_data),                                        //           .data
		.src7_channel        (cmd_demux_001_src7_channel),                                     //           .channel
		.src7_startofpacket  (cmd_demux_001_src7_startofpacket),                               //           .startofpacket
		.src7_endofpacket    (cmd_demux_001_src7_endofpacket),                                 //           .endofpacket
		.src8_ready          (cmd_demux_001_src8_ready),                                       //       src8.ready
		.src8_valid          (cmd_demux_001_src8_valid),                                       //           .valid
		.src8_data           (cmd_demux_001_src8_data),                                        //           .data
		.src8_channel        (cmd_demux_001_src8_channel),                                     //           .channel
		.src8_startofpacket  (cmd_demux_001_src8_startofpacket),                               //           .startofpacket
		.src8_endofpacket    (cmd_demux_001_src8_endofpacket),                                 //           .endofpacket
		.src9_ready          (cmd_demux_001_src9_ready),                                       //       src9.ready
		.src9_valid          (cmd_demux_001_src9_valid),                                       //           .valid
		.src9_data           (cmd_demux_001_src9_data),                                        //           .data
		.src9_channel        (cmd_demux_001_src9_channel),                                     //           .channel
		.src9_startofpacket  (cmd_demux_001_src9_startofpacket),                               //           .startofpacket
		.src9_endofpacket    (cmd_demux_001_src9_endofpacket),                                 //           .endofpacket
		.src10_ready         (cmd_demux_001_src10_ready),                                      //      src10.ready
		.src10_valid         (cmd_demux_001_src10_valid),                                      //           .valid
		.src10_data          (cmd_demux_001_src10_data),                                       //           .data
		.src10_channel       (cmd_demux_001_src10_channel),                                    //           .channel
		.src10_startofpacket (cmd_demux_001_src10_startofpacket),                              //           .startofpacket
		.src10_endofpacket   (cmd_demux_001_src10_endofpacket),                                //           .endofpacket
		.src11_ready         (cmd_demux_001_src11_ready),                                      //      src11.ready
		.src11_valid         (cmd_demux_001_src11_valid),                                      //           .valid
		.src11_data          (cmd_demux_001_src11_data),                                       //           .data
		.src11_channel       (cmd_demux_001_src11_channel),                                    //           .channel
		.src11_startofpacket (cmd_demux_001_src11_startofpacket),                              //           .startofpacket
		.src11_endofpacket   (cmd_demux_001_src11_endofpacket)                                 //           .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                      //       clk.clk
		.reset               (terminal_north_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                  //       src.ready
		.src_valid           (cmd_mux_src_valid),                                  //          .valid
		.src_data            (cmd_mux_src_data),                                   //          .data
		.src_channel         (cmd_mux_src_channel),                                //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                             //          .channel
		.sink0_data          (cmd_demux_src0_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                         //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                           //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                         //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                            //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                      //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                      //       clk.clk
		.reset               (terminal_north_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                              //          .valid
		.src_data            (cmd_mux_001_src_data),                               //          .data
		.src_channel         (cmd_mux_001_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                             //          .channel
		.sink0_data          (cmd_demux_src1_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                         //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                           //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                         //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                            //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                      //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                      //       clk.clk
		.reset               (terminal_north_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                              //          .valid
		.src_data            (cmd_mux_002_src_data),                               //          .data
		.src_channel         (cmd_mux_002_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                             //          .channel
		.sink0_data          (cmd_demux_src2_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                         //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                           //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                         //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                            //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)                      //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                                      //       clk.clk
		.reset               (terminal_north_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                              //          .valid
		.src_data            (cmd_mux_003_src_data),                               //          .data
		.src_channel         (cmd_mux_003_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                             //          .channel
		.sink0_data          (cmd_demux_src3_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                         //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                           //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                         //          .channel
		.sink1_data          (cmd_demux_001_src3_data),                            //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket)                      //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                                      //       clk.clk
		.reset               (terminal_north_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                              //          .valid
		.src_data            (cmd_mux_004_src_data),                               //          .data
		.src_channel         (cmd_mux_004_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                             //          .channel
		.sink0_data          (cmd_demux_src4_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                         //          .endofpacket
		.sink1_ready         (cmd_demux_001_src4_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_001_src4_valid),                           //          .valid
		.sink1_channel       (cmd_demux_001_src4_channel),                         //          .channel
		.sink1_data          (cmd_demux_001_src4_data),                            //          .data
		.sink1_startofpacket (cmd_demux_001_src4_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src4_endofpacket)                      //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                                      //       clk.clk
		.reset               (terminal_north_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                              //          .valid
		.src_data            (cmd_mux_005_src_data),                               //          .data
		.src_channel         (cmd_mux_005_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                             //          .channel
		.sink0_data          (cmd_demux_src5_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket),                         //          .endofpacket
		.sink1_ready         (cmd_demux_001_src5_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_001_src5_valid),                           //          .valid
		.sink1_channel       (cmd_demux_001_src5_channel),                         //          .channel
		.sink1_data          (cmd_demux_001_src5_data),                            //          .data
		.sink1_startofpacket (cmd_demux_001_src5_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src5_endofpacket)                      //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                                      //       clk.clk
		.reset               (terminal_north_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                              //          .valid
		.src_data            (cmd_mux_006_src_data),                               //          .data
		.src_channel         (cmd_mux_006_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                             //          .channel
		.sink0_data          (cmd_demux_src6_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket),                         //          .endofpacket
		.sink1_ready         (cmd_demux_001_src6_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_001_src6_valid),                           //          .valid
		.sink1_channel       (cmd_demux_001_src6_channel),                         //          .channel
		.sink1_data          (cmd_demux_001_src6_data),                            //          .data
		.sink1_startofpacket (cmd_demux_001_src6_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src6_endofpacket)                      //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (clk_0_clk_clk),                                      //       clk.clk
		.reset               (terminal_north_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                              //          .valid
		.src_data            (cmd_mux_007_src_data),                               //          .data
		.src_channel         (cmd_mux_007_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                             //          .channel
		.sink0_data          (cmd_demux_src7_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket),                         //          .endofpacket
		.sink1_ready         (cmd_demux_001_src7_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_001_src7_valid),                           //          .valid
		.sink1_channel       (cmd_demux_001_src7_channel),                         //          .channel
		.sink1_data          (cmd_demux_001_src7_data),                            //          .data
		.sink1_startofpacket (cmd_demux_001_src7_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src7_endofpacket)                      //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (clk_0_clk_clk),                                      //       clk.clk
		.reset               (terminal_north_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                              //          .valid
		.src_data            (cmd_mux_008_src_data),                               //          .data
		.src_channel         (cmd_mux_008_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                             //          .channel
		.sink0_data          (cmd_demux_src8_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket),                         //          .endofpacket
		.sink1_ready         (cmd_demux_001_src8_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_001_src8_valid),                           //          .valid
		.sink1_channel       (cmd_demux_001_src8_channel),                         //          .channel
		.sink1_data          (cmd_demux_001_src8_data),                            //          .data
		.sink1_startofpacket (cmd_demux_001_src8_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src8_endofpacket)                      //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (clk_0_clk_clk),                                      //       clk.clk
		.reset               (terminal_north_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                              //          .valid
		.src_data            (cmd_mux_009_src_data),                               //          .data
		.src_channel         (cmd_mux_009_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                             //          .channel
		.sink0_data          (cmd_demux_src9_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket),                         //          .endofpacket
		.sink1_ready         (cmd_demux_001_src9_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_001_src9_valid),                           //          .valid
		.sink1_channel       (cmd_demux_001_src9_channel),                         //          .channel
		.sink1_data          (cmd_demux_001_src9_data),                            //          .data
		.sink1_startofpacket (cmd_demux_001_src9_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src9_endofpacket)                      //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_cmd_mux cmd_mux_010 (
		.clk                 (clk_0_clk_clk),                                      //       clk.clk
		.reset               (terminal_north_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                              //          .valid
		.src_data            (cmd_mux_010_src_data),                               //          .data
		.src_channel         (cmd_mux_010_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                            //          .channel
		.sink0_data          (cmd_demux_src10_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket),                        //          .endofpacket
		.sink1_ready         (cmd_demux_001_src10_ready),                          //     sink1.ready
		.sink1_valid         (cmd_demux_001_src10_valid),                          //          .valid
		.sink1_channel       (cmd_demux_001_src10_channel),                        //          .channel
		.sink1_data          (cmd_demux_001_src10_data),                           //          .data
		.sink1_startofpacket (cmd_demux_001_src10_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src10_endofpacket)                     //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_cmd_mux cmd_mux_011 (
		.clk                 (clk_0_clk_clk),                                      //       clk.clk
		.reset               (terminal_north_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                              //          .valid
		.src_data            (cmd_mux_011_src_data),                               //          .data
		.src_channel         (cmd_mux_011_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                            //          .channel
		.sink0_data          (cmd_demux_src11_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket),                        //          .endofpacket
		.sink1_ready         (cmd_demux_001_src11_ready),                          //     sink1.ready
		.sink1_valid         (cmd_demux_001_src11_valid),                          //          .valid
		.sink1_channel       (cmd_demux_001_src11_channel),                        //          .channel
		.sink1_data          (cmd_demux_001_src11_data),                           //          .data
		.sink1_startofpacket (cmd_demux_001_src11_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src11_endofpacket)                     //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                             //       clk.clk
		.reset              (terminal_north_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.sink_ready         (node_0_processing_mem_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (node_0_processing_mem_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (node_0_processing_mem_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (node_0_processing_mem_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (node_0_processing_mem_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (node_0_processing_mem_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                      //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                      //          .valid
		.src0_data          (rsp_demux_src0_data),                                       //          .data
		.src0_channel       (rsp_demux_src0_channel),                                    //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                      //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                      //          .valid
		.src1_data          (rsp_demux_src1_data),                                       //          .data
		.src1_channel       (rsp_demux_src1_channel),                                    //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                              //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                                 //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                             //       clk.clk
		.reset              (terminal_north_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.sink_ready         (node_1_processing_mem_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (node_1_processing_mem_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (node_1_processing_mem_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (node_1_processing_mem_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (node_1_processing_mem_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (node_1_processing_mem_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                            //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                                  //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                                  //          .valid
		.src1_data          (rsp_demux_001_src1_data),                                   //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                                //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                          //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                             //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                                 //       clk.clk
		.reset              (terminal_north_0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.sink_ready         (node_65536_processing_mem_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (node_65536_processing_mem_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (node_65536_processing_mem_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (node_65536_processing_mem_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (node_65536_processing_mem_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (node_65536_processing_mem_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                      //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                      //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                       //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                    //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                                //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                                      //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                                      //          .valid
		.src1_data          (rsp_demux_002_src1_data),                                       //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                                    //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                              //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                                 //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (clk_0_clk_clk),                                                 //       clk.clk
		.reset              (terminal_north_0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.sink_ready         (node_65537_processing_mem_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (node_65537_processing_mem_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (node_65537_processing_mem_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (node_65537_processing_mem_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (node_65537_processing_mem_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (node_65537_processing_mem_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                      //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                      //          .valid
		.src0_data          (rsp_demux_003_src0_data),                                       //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                                    //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                                //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                                      //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                                      //          .valid
		.src1_data          (rsp_demux_003_src1_data),                                       //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                                    //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                              //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                                 //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (clk_0_clk_clk),                                               //       clk.clk
		.reset              (terminal_north_0_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.sink_ready         (terminal_north_0_status_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (terminal_north_0_status_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (terminal_north_0_status_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (terminal_north_0_status_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (terminal_north_0_status_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (terminal_north_0_status_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_004_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                              //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                                    //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                                    //          .valid
		.src1_data          (rsp_demux_004_src1_data),                                     //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                                  //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),                            //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)                               //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (clk_0_clk_clk),                                               //       clk.clk
		.reset              (terminal_north_0_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.sink_ready         (terminal_north_1_status_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (terminal_north_1_status_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (terminal_north_1_status_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (terminal_north_1_status_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (terminal_north_1_status_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (terminal_north_1_status_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_005_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),                              //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                                    //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                                    //          .valid
		.src1_data          (rsp_demux_005_src1_data),                                     //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                                  //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),                            //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)                               //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (clk_0_clk_clk),                                               //       clk.clk
		.reset              (terminal_north_0_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.sink_ready         (terminal_south_0_status_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (terminal_south_0_status_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (terminal_south_0_status_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (terminal_south_0_status_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (terminal_south_0_status_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (terminal_south_0_status_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_006_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),                              //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                                    //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                                    //          .valid
		.src1_data          (rsp_demux_006_src1_data),                                     //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                                  //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),                            //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket)                               //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (clk_0_clk_clk),                                               //       clk.clk
		.reset              (terminal_north_0_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.sink_ready         (terminal_south_1_status_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (terminal_south_1_status_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (terminal_south_1_status_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (terminal_south_1_status_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (terminal_south_1_status_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (terminal_south_1_status_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_007_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),                              //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                                    //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                                    //          .valid
		.src1_data          (rsp_demux_007_src1_data),                                     //          .data
		.src1_channel       (rsp_demux_007_src1_channel),                                  //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),                            //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket)                               //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_rsp_demux rsp_demux_008 (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (terminal_north_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.sink_ready         (terminal_west_0_status_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (terminal_west_0_status_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (terminal_west_0_status_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (terminal_west_0_status_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (terminal_west_0_status_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (terminal_west_0_status_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_008_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),                             //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                                   //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                                   //          .valid
		.src1_data          (rsp_demux_008_src1_data),                                    //          .data
		.src1_channel       (rsp_demux_008_src1_channel),                                 //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),                           //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket)                              //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_rsp_demux rsp_demux_009 (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (terminal_north_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.sink_ready         (terminal_east_1_status_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (terminal_east_1_status_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (terminal_east_1_status_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (terminal_east_1_status_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (terminal_east_1_status_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (terminal_east_1_status_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_009_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),                             //          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),                                   //      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),                                   //          .valid
		.src1_data          (rsp_demux_009_src1_data),                                    //          .data
		.src1_channel       (rsp_demux_009_src1_channel),                                 //          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),                           //          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket)                              //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_rsp_demux rsp_demux_010 (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (terminal_north_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.sink_ready         (terminal_east_0_status_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (terminal_east_0_status_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (terminal_east_0_status_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (terminal_east_0_status_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (terminal_east_0_status_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (terminal_east_0_status_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_010_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),                             //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                                   //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                                   //          .valid
		.src1_data          (rsp_demux_010_src1_data),                                    //          .data
		.src1_channel       (rsp_demux_010_src1_channel),                                 //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),                           //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket)                              //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_rsp_demux rsp_demux_011 (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (terminal_north_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.sink_ready         (terminal_west_1_status_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (terminal_west_1_status_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (terminal_west_1_status_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (terminal_west_1_status_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (terminal_west_1_status_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (terminal_west_1_status_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_011_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket),                             //          .endofpacket
		.src1_ready         (rsp_demux_011_src1_ready),                                   //      src1.ready
		.src1_valid         (rsp_demux_011_src1_valid),                                   //          .valid
		.src1_data          (rsp_demux_011_src1_data),                                    //          .data
		.src1_channel       (rsp_demux_011_src1_channel),                                 //          .channel
		.src1_startofpacket (rsp_demux_011_src1_startofpacket),                           //          .startofpacket
		.src1_endofpacket   (rsp_demux_011_src1_endofpacket)                              //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (clk_0_clk_clk),                                                  //       clk.clk
		.reset                (HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                                              //       src.ready
		.src_valid            (rsp_mux_src_valid),                                              //          .valid
		.src_data             (rsp_mux_src_data),                                               //          .data
		.src_channel          (rsp_mux_src_channel),                                            //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                                      //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                                        //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                                           //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                                           //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                                         //          .channel
		.sink0_data           (rsp_demux_src0_data),                                            //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                                     //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                                       //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                                       //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                                     //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                                        //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),                               //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                                 //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                                       //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                                       //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                                     //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                                        //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),                               //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                                 //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                                       //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                                       //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                                     //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                                        //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),                               //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                                 //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                                       //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                                       //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                                     //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                                        //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                               //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                                 //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                                       //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                                       //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                                     //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                                        //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                               //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                                 //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                                       //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                                       //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                                     //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                                        //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                               //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                                 //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                                       //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                                       //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                                     //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                                        //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                               //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                                 //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                                       //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                                       //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                                     //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                                        //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),                               //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                                 //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                                       //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                                       //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                                     //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                                        //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),                               //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                                 //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                                       //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                                       //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                                     //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                                        //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),                               //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                                 //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                                       //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                                       //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                                     //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                                        //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),                               //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket)                                  //          .endofpacket
	);

	dircc_system_rtl_counter_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                  (clk_0_clk_clk),                                                  //       clk.clk
		.reset                (HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_001_src_ready),                                          //       src.ready
		.src_valid            (rsp_mux_001_src_valid),                                          //          .valid
		.src_data             (rsp_mux_001_src_data),                                           //          .data
		.src_channel          (rsp_mux_001_src_channel),                                        //          .channel
		.src_startofpacket    (rsp_mux_001_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket      (rsp_mux_001_src_endofpacket),                                    //          .endofpacket
		.sink0_ready          (rsp_demux_src1_ready),                                           //     sink0.ready
		.sink0_valid          (rsp_demux_src1_valid),                                           //          .valid
		.sink0_channel        (rsp_demux_src1_channel),                                         //          .channel
		.sink0_data           (rsp_demux_src1_data),                                            //          .data
		.sink0_startofpacket  (rsp_demux_src1_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src1_endofpacket),                                     //          .endofpacket
		.sink1_ready          (rsp_demux_001_src1_ready),                                       //     sink1.ready
		.sink1_valid          (rsp_demux_001_src1_valid),                                       //          .valid
		.sink1_channel        (rsp_demux_001_src1_channel),                                     //          .channel
		.sink1_data           (rsp_demux_001_src1_data),                                        //          .data
		.sink1_startofpacket  (rsp_demux_001_src1_startofpacket),                               //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src1_endofpacket),                                 //          .endofpacket
		.sink2_ready          (rsp_demux_002_src1_ready),                                       //     sink2.ready
		.sink2_valid          (rsp_demux_002_src1_valid),                                       //          .valid
		.sink2_channel        (rsp_demux_002_src1_channel),                                     //          .channel
		.sink2_data           (rsp_demux_002_src1_data),                                        //          .data
		.sink2_startofpacket  (rsp_demux_002_src1_startofpacket),                               //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src1_endofpacket),                                 //          .endofpacket
		.sink3_ready          (rsp_demux_003_src1_ready),                                       //     sink3.ready
		.sink3_valid          (rsp_demux_003_src1_valid),                                       //          .valid
		.sink3_channel        (rsp_demux_003_src1_channel),                                     //          .channel
		.sink3_data           (rsp_demux_003_src1_data),                                        //          .data
		.sink3_startofpacket  (rsp_demux_003_src1_startofpacket),                               //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src1_endofpacket),                                 //          .endofpacket
		.sink4_ready          (rsp_demux_004_src1_ready),                                       //     sink4.ready
		.sink4_valid          (rsp_demux_004_src1_valid),                                       //          .valid
		.sink4_channel        (rsp_demux_004_src1_channel),                                     //          .channel
		.sink4_data           (rsp_demux_004_src1_data),                                        //          .data
		.sink4_startofpacket  (rsp_demux_004_src1_startofpacket),                               //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src1_endofpacket),                                 //          .endofpacket
		.sink5_ready          (rsp_demux_005_src1_ready),                                       //     sink5.ready
		.sink5_valid          (rsp_demux_005_src1_valid),                                       //          .valid
		.sink5_channel        (rsp_demux_005_src1_channel),                                     //          .channel
		.sink5_data           (rsp_demux_005_src1_data),                                        //          .data
		.sink5_startofpacket  (rsp_demux_005_src1_startofpacket),                               //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src1_endofpacket),                                 //          .endofpacket
		.sink6_ready          (rsp_demux_006_src1_ready),                                       //     sink6.ready
		.sink6_valid          (rsp_demux_006_src1_valid),                                       //          .valid
		.sink6_channel        (rsp_demux_006_src1_channel),                                     //          .channel
		.sink6_data           (rsp_demux_006_src1_data),                                        //          .data
		.sink6_startofpacket  (rsp_demux_006_src1_startofpacket),                               //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src1_endofpacket),                                 //          .endofpacket
		.sink7_ready          (rsp_demux_007_src1_ready),                                       //     sink7.ready
		.sink7_valid          (rsp_demux_007_src1_valid),                                       //          .valid
		.sink7_channel        (rsp_demux_007_src1_channel),                                     //          .channel
		.sink7_data           (rsp_demux_007_src1_data),                                        //          .data
		.sink7_startofpacket  (rsp_demux_007_src1_startofpacket),                               //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src1_endofpacket),                                 //          .endofpacket
		.sink8_ready          (rsp_demux_008_src1_ready),                                       //     sink8.ready
		.sink8_valid          (rsp_demux_008_src1_valid),                                       //          .valid
		.sink8_channel        (rsp_demux_008_src1_channel),                                     //          .channel
		.sink8_data           (rsp_demux_008_src1_data),                                        //          .data
		.sink8_startofpacket  (rsp_demux_008_src1_startofpacket),                               //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src1_endofpacket),                                 //          .endofpacket
		.sink9_ready          (rsp_demux_009_src1_ready),                                       //     sink9.ready
		.sink9_valid          (rsp_demux_009_src1_valid),                                       //          .valid
		.sink9_channel        (rsp_demux_009_src1_channel),                                     //          .channel
		.sink9_data           (rsp_demux_009_src1_data),                                        //          .data
		.sink9_startofpacket  (rsp_demux_009_src1_startofpacket),                               //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src1_endofpacket),                                 //          .endofpacket
		.sink10_ready         (rsp_demux_010_src1_ready),                                       //    sink10.ready
		.sink10_valid         (rsp_demux_010_src1_valid),                                       //          .valid
		.sink10_channel       (rsp_demux_010_src1_channel),                                     //          .channel
		.sink10_data          (rsp_demux_010_src1_data),                                        //          .data
		.sink10_startofpacket (rsp_demux_010_src1_startofpacket),                               //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src1_endofpacket),                                 //          .endofpacket
		.sink11_ready         (rsp_demux_011_src1_ready),                                       //    sink11.ready
		.sink11_valid         (rsp_demux_011_src1_valid),                                       //          .valid
		.sink11_channel       (rsp_demux_011_src1_channel),                                     //          .channel
		.sink11_data          (rsp_demux_011_src1_data),                                        //          .data
		.sink11_startofpacket (rsp_demux_011_src1_startofpacket),                               //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src1_endofpacket)                                  //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (60),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (67),
		.IN_PKT_BURSTWRAP_L            (61),
		.IN_PKT_BURST_SIZE_H           (70),
		.IN_PKT_BURST_SIZE_L           (68),
		.IN_PKT_RESPONSE_STATUS_H      (105),
		.IN_PKT_RESPONSE_STATUS_L      (104),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (72),
		.IN_PKT_BURST_TYPE_L           (71),
		.IN_PKT_ORI_BURST_SIZE_L       (106),
		.IN_PKT_ORI_BURST_SIZE_H       (108),
		.IN_ST_DATA_W                  (109),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (88),
		.OUT_PKT_BURST_SIZE_L          (86),
		.OUT_PKT_RESPONSE_STATUS_H     (123),
		.OUT_PKT_RESPONSE_STATUS_L     (122),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (90),
		.OUT_PKT_BURST_TYPE_L          (89),
		.OUT_PKT_ORI_BURST_SIZE_L      (124),
		.OUT_PKT_ORI_BURST_SIZE_H      (126),
		.OUT_ST_DATA_W                 (127),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) node_0_processing_mem_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                             //       clk.clk
		.reset                (terminal_north_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_valid             (router_002_src_valid),                                      //      sink.valid
		.in_channel           (router_002_src_channel),                                    //          .channel
		.in_startofpacket     (router_002_src_startofpacket),                              //          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                //          .endofpacket
		.in_ready             (router_002_src_ready),                                      //          .ready
		.in_data              (router_002_src_data),                                       //          .data
		.out_endofpacket      (node_0_processing_mem_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (node_0_processing_mem_rsp_width_adapter_src_data),          //          .data
		.out_channel          (node_0_processing_mem_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (node_0_processing_mem_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (node_0_processing_mem_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (node_0_processing_mem_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (60),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (67),
		.IN_PKT_BURSTWRAP_L            (61),
		.IN_PKT_BURST_SIZE_H           (70),
		.IN_PKT_BURST_SIZE_L           (68),
		.IN_PKT_RESPONSE_STATUS_H      (105),
		.IN_PKT_RESPONSE_STATUS_L      (104),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (72),
		.IN_PKT_BURST_TYPE_L           (71),
		.IN_PKT_ORI_BURST_SIZE_L       (106),
		.IN_PKT_ORI_BURST_SIZE_H       (108),
		.IN_ST_DATA_W                  (109),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (88),
		.OUT_PKT_BURST_SIZE_L          (86),
		.OUT_PKT_RESPONSE_STATUS_H     (123),
		.OUT_PKT_RESPONSE_STATUS_L     (122),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (90),
		.OUT_PKT_BURST_TYPE_L          (89),
		.OUT_PKT_ORI_BURST_SIZE_L      (124),
		.OUT_PKT_ORI_BURST_SIZE_H      (126),
		.OUT_ST_DATA_W                 (127),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) node_1_processing_mem_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                             //       clk.clk
		.reset                (terminal_north_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_valid             (router_003_src_valid),                                      //      sink.valid
		.in_channel           (router_003_src_channel),                                    //          .channel
		.in_startofpacket     (router_003_src_startofpacket),                              //          .startofpacket
		.in_endofpacket       (router_003_src_endofpacket),                                //          .endofpacket
		.in_ready             (router_003_src_ready),                                      //          .ready
		.in_data              (router_003_src_data),                                       //          .data
		.out_endofpacket      (node_1_processing_mem_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (node_1_processing_mem_rsp_width_adapter_src_data),          //          .data
		.out_channel          (node_1_processing_mem_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (node_1_processing_mem_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (node_1_processing_mem_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (node_1_processing_mem_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (60),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (67),
		.IN_PKT_BURSTWRAP_L            (61),
		.IN_PKT_BURST_SIZE_H           (70),
		.IN_PKT_BURST_SIZE_L           (68),
		.IN_PKT_RESPONSE_STATUS_H      (105),
		.IN_PKT_RESPONSE_STATUS_L      (104),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (72),
		.IN_PKT_BURST_TYPE_L           (71),
		.IN_PKT_ORI_BURST_SIZE_L       (106),
		.IN_PKT_ORI_BURST_SIZE_H       (108),
		.IN_ST_DATA_W                  (109),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (88),
		.OUT_PKT_BURST_SIZE_L          (86),
		.OUT_PKT_RESPONSE_STATUS_H     (123),
		.OUT_PKT_RESPONSE_STATUS_L     (122),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (90),
		.OUT_PKT_BURST_TYPE_L          (89),
		.OUT_PKT_ORI_BURST_SIZE_L      (124),
		.OUT_PKT_ORI_BURST_SIZE_H      (126),
		.OUT_ST_DATA_W                 (127),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) node_65536_processing_mem_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                 //       clk.clk
		.reset                (terminal_north_0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_valid             (router_004_src_valid),                                          //      sink.valid
		.in_channel           (router_004_src_channel),                                        //          .channel
		.in_startofpacket     (router_004_src_startofpacket),                                  //          .startofpacket
		.in_endofpacket       (router_004_src_endofpacket),                                    //          .endofpacket
		.in_ready             (router_004_src_ready),                                          //          .ready
		.in_data              (router_004_src_data),                                           //          .data
		.out_endofpacket      (node_65536_processing_mem_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (node_65536_processing_mem_rsp_width_adapter_src_data),          //          .data
		.out_channel          (node_65536_processing_mem_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (node_65536_processing_mem_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (node_65536_processing_mem_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (node_65536_processing_mem_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (60),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (67),
		.IN_PKT_BURSTWRAP_L            (61),
		.IN_PKT_BURST_SIZE_H           (70),
		.IN_PKT_BURST_SIZE_L           (68),
		.IN_PKT_RESPONSE_STATUS_H      (105),
		.IN_PKT_RESPONSE_STATUS_L      (104),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (72),
		.IN_PKT_BURST_TYPE_L           (71),
		.IN_PKT_ORI_BURST_SIZE_L       (106),
		.IN_PKT_ORI_BURST_SIZE_H       (108),
		.IN_ST_DATA_W                  (109),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (88),
		.OUT_PKT_BURST_SIZE_L          (86),
		.OUT_PKT_RESPONSE_STATUS_H     (123),
		.OUT_PKT_RESPONSE_STATUS_L     (122),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (90),
		.OUT_PKT_BURST_TYPE_L          (89),
		.OUT_PKT_ORI_BURST_SIZE_L      (124),
		.OUT_PKT_ORI_BURST_SIZE_H      (126),
		.OUT_ST_DATA_W                 (127),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) node_65537_processing_mem_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                 //       clk.clk
		.reset                (terminal_north_0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_valid             (router_005_src_valid),                                          //      sink.valid
		.in_channel           (router_005_src_channel),                                        //          .channel
		.in_startofpacket     (router_005_src_startofpacket),                                  //          .startofpacket
		.in_endofpacket       (router_005_src_endofpacket),                                    //          .endofpacket
		.in_ready             (router_005_src_ready),                                          //          .ready
		.in_data              (router_005_src_data),                                           //          .data
		.out_endofpacket      (node_65537_processing_mem_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (node_65537_processing_mem_rsp_width_adapter_src_data),          //          .data
		.out_channel          (node_65537_processing_mem_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (node_65537_processing_mem_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (node_65537_processing_mem_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (node_65537_processing_mem_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (60),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (67),
		.IN_PKT_BURSTWRAP_L            (61),
		.IN_PKT_BURST_SIZE_H           (70),
		.IN_PKT_BURST_SIZE_L           (68),
		.IN_PKT_RESPONSE_STATUS_H      (105),
		.IN_PKT_RESPONSE_STATUS_L      (104),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (72),
		.IN_PKT_BURST_TYPE_L           (71),
		.IN_PKT_ORI_BURST_SIZE_L       (106),
		.IN_PKT_ORI_BURST_SIZE_H       (108),
		.IN_ST_DATA_W                  (109),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (88),
		.OUT_PKT_BURST_SIZE_L          (86),
		.OUT_PKT_RESPONSE_STATUS_H     (123),
		.OUT_PKT_RESPONSE_STATUS_L     (122),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (90),
		.OUT_PKT_BURST_TYPE_L          (89),
		.OUT_PKT_ORI_BURST_SIZE_L      (124),
		.OUT_PKT_ORI_BURST_SIZE_H      (126),
		.OUT_ST_DATA_W                 (127),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) terminal_north_0_status_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                               //       clk.clk
		.reset                (terminal_north_0_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_valid             (router_006_src_valid),                                        //      sink.valid
		.in_channel           (router_006_src_channel),                                      //          .channel
		.in_startofpacket     (router_006_src_startofpacket),                                //          .startofpacket
		.in_endofpacket       (router_006_src_endofpacket),                                  //          .endofpacket
		.in_ready             (router_006_src_ready),                                        //          .ready
		.in_data              (router_006_src_data),                                         //          .data
		.out_endofpacket      (terminal_north_0_status_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (terminal_north_0_status_rsp_width_adapter_src_data),          //          .data
		.out_channel          (terminal_north_0_status_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (terminal_north_0_status_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (terminal_north_0_status_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (terminal_north_0_status_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                       // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (60),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (67),
		.IN_PKT_BURSTWRAP_L            (61),
		.IN_PKT_BURST_SIZE_H           (70),
		.IN_PKT_BURST_SIZE_L           (68),
		.IN_PKT_RESPONSE_STATUS_H      (105),
		.IN_PKT_RESPONSE_STATUS_L      (104),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (72),
		.IN_PKT_BURST_TYPE_L           (71),
		.IN_PKT_ORI_BURST_SIZE_L       (106),
		.IN_PKT_ORI_BURST_SIZE_H       (108),
		.IN_ST_DATA_W                  (109),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (88),
		.OUT_PKT_BURST_SIZE_L          (86),
		.OUT_PKT_RESPONSE_STATUS_H     (123),
		.OUT_PKT_RESPONSE_STATUS_L     (122),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (90),
		.OUT_PKT_BURST_TYPE_L          (89),
		.OUT_PKT_ORI_BURST_SIZE_L      (124),
		.OUT_PKT_ORI_BURST_SIZE_H      (126),
		.OUT_ST_DATA_W                 (127),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) terminal_north_1_status_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                               //       clk.clk
		.reset                (terminal_north_0_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_valid             (router_007_src_valid),                                        //      sink.valid
		.in_channel           (router_007_src_channel),                                      //          .channel
		.in_startofpacket     (router_007_src_startofpacket),                                //          .startofpacket
		.in_endofpacket       (router_007_src_endofpacket),                                  //          .endofpacket
		.in_ready             (router_007_src_ready),                                        //          .ready
		.in_data              (router_007_src_data),                                         //          .data
		.out_endofpacket      (terminal_north_1_status_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (terminal_north_1_status_rsp_width_adapter_src_data),          //          .data
		.out_channel          (terminal_north_1_status_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (terminal_north_1_status_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (terminal_north_1_status_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (terminal_north_1_status_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                       // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (60),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (67),
		.IN_PKT_BURSTWRAP_L            (61),
		.IN_PKT_BURST_SIZE_H           (70),
		.IN_PKT_BURST_SIZE_L           (68),
		.IN_PKT_RESPONSE_STATUS_H      (105),
		.IN_PKT_RESPONSE_STATUS_L      (104),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (72),
		.IN_PKT_BURST_TYPE_L           (71),
		.IN_PKT_ORI_BURST_SIZE_L       (106),
		.IN_PKT_ORI_BURST_SIZE_H       (108),
		.IN_ST_DATA_W                  (109),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (88),
		.OUT_PKT_BURST_SIZE_L          (86),
		.OUT_PKT_RESPONSE_STATUS_H     (123),
		.OUT_PKT_RESPONSE_STATUS_L     (122),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (90),
		.OUT_PKT_BURST_TYPE_L          (89),
		.OUT_PKT_ORI_BURST_SIZE_L      (124),
		.OUT_PKT_ORI_BURST_SIZE_H      (126),
		.OUT_ST_DATA_W                 (127),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) terminal_south_0_status_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                               //       clk.clk
		.reset                (terminal_north_0_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_valid             (router_008_src_valid),                                        //      sink.valid
		.in_channel           (router_008_src_channel),                                      //          .channel
		.in_startofpacket     (router_008_src_startofpacket),                                //          .startofpacket
		.in_endofpacket       (router_008_src_endofpacket),                                  //          .endofpacket
		.in_ready             (router_008_src_ready),                                        //          .ready
		.in_data              (router_008_src_data),                                         //          .data
		.out_endofpacket      (terminal_south_0_status_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (terminal_south_0_status_rsp_width_adapter_src_data),          //          .data
		.out_channel          (terminal_south_0_status_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (terminal_south_0_status_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (terminal_south_0_status_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (terminal_south_0_status_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                       // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (60),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (67),
		.IN_PKT_BURSTWRAP_L            (61),
		.IN_PKT_BURST_SIZE_H           (70),
		.IN_PKT_BURST_SIZE_L           (68),
		.IN_PKT_RESPONSE_STATUS_H      (105),
		.IN_PKT_RESPONSE_STATUS_L      (104),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (72),
		.IN_PKT_BURST_TYPE_L           (71),
		.IN_PKT_ORI_BURST_SIZE_L       (106),
		.IN_PKT_ORI_BURST_SIZE_H       (108),
		.IN_ST_DATA_W                  (109),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (88),
		.OUT_PKT_BURST_SIZE_L          (86),
		.OUT_PKT_RESPONSE_STATUS_H     (123),
		.OUT_PKT_RESPONSE_STATUS_L     (122),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (90),
		.OUT_PKT_BURST_TYPE_L          (89),
		.OUT_PKT_ORI_BURST_SIZE_L      (124),
		.OUT_PKT_ORI_BURST_SIZE_H      (126),
		.OUT_ST_DATA_W                 (127),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) terminal_south_1_status_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                               //       clk.clk
		.reset                (terminal_north_0_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_valid             (router_009_src_valid),                                        //      sink.valid
		.in_channel           (router_009_src_channel),                                      //          .channel
		.in_startofpacket     (router_009_src_startofpacket),                                //          .startofpacket
		.in_endofpacket       (router_009_src_endofpacket),                                  //          .endofpacket
		.in_ready             (router_009_src_ready),                                        //          .ready
		.in_data              (router_009_src_data),                                         //          .data
		.out_endofpacket      (terminal_south_1_status_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (terminal_south_1_status_rsp_width_adapter_src_data),          //          .data
		.out_channel          (terminal_south_1_status_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (terminal_south_1_status_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (terminal_south_1_status_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (terminal_south_1_status_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                       // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (60),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (67),
		.IN_PKT_BURSTWRAP_L            (61),
		.IN_PKT_BURST_SIZE_H           (70),
		.IN_PKT_BURST_SIZE_L           (68),
		.IN_PKT_RESPONSE_STATUS_H      (105),
		.IN_PKT_RESPONSE_STATUS_L      (104),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (72),
		.IN_PKT_BURST_TYPE_L           (71),
		.IN_PKT_ORI_BURST_SIZE_L       (106),
		.IN_PKT_ORI_BURST_SIZE_H       (108),
		.IN_ST_DATA_W                  (109),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (88),
		.OUT_PKT_BURST_SIZE_L          (86),
		.OUT_PKT_RESPONSE_STATUS_H     (123),
		.OUT_PKT_RESPONSE_STATUS_L     (122),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (90),
		.OUT_PKT_BURST_TYPE_L          (89),
		.OUT_PKT_ORI_BURST_SIZE_L      (124),
		.OUT_PKT_ORI_BURST_SIZE_H      (126),
		.OUT_ST_DATA_W                 (127),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) terminal_west_0_status_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                              //       clk.clk
		.reset                (terminal_north_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (router_010_src_valid),                                       //      sink.valid
		.in_channel           (router_010_src_channel),                                     //          .channel
		.in_startofpacket     (router_010_src_startofpacket),                               //          .startofpacket
		.in_endofpacket       (router_010_src_endofpacket),                                 //          .endofpacket
		.in_ready             (router_010_src_ready),                                       //          .ready
		.in_data              (router_010_src_data),                                        //          .data
		.out_endofpacket      (terminal_west_0_status_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (terminal_west_0_status_rsp_width_adapter_src_data),          //          .data
		.out_channel          (terminal_west_0_status_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (terminal_west_0_status_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (terminal_west_0_status_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (terminal_west_0_status_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (60),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (67),
		.IN_PKT_BURSTWRAP_L            (61),
		.IN_PKT_BURST_SIZE_H           (70),
		.IN_PKT_BURST_SIZE_L           (68),
		.IN_PKT_RESPONSE_STATUS_H      (105),
		.IN_PKT_RESPONSE_STATUS_L      (104),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (72),
		.IN_PKT_BURST_TYPE_L           (71),
		.IN_PKT_ORI_BURST_SIZE_L       (106),
		.IN_PKT_ORI_BURST_SIZE_H       (108),
		.IN_ST_DATA_W                  (109),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (88),
		.OUT_PKT_BURST_SIZE_L          (86),
		.OUT_PKT_RESPONSE_STATUS_H     (123),
		.OUT_PKT_RESPONSE_STATUS_L     (122),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (90),
		.OUT_PKT_BURST_TYPE_L          (89),
		.OUT_PKT_ORI_BURST_SIZE_L      (124),
		.OUT_PKT_ORI_BURST_SIZE_H      (126),
		.OUT_ST_DATA_W                 (127),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) terminal_east_1_status_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                              //       clk.clk
		.reset                (terminal_north_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (router_011_src_valid),                                       //      sink.valid
		.in_channel           (router_011_src_channel),                                     //          .channel
		.in_startofpacket     (router_011_src_startofpacket),                               //          .startofpacket
		.in_endofpacket       (router_011_src_endofpacket),                                 //          .endofpacket
		.in_ready             (router_011_src_ready),                                       //          .ready
		.in_data              (router_011_src_data),                                        //          .data
		.out_endofpacket      (terminal_east_1_status_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (terminal_east_1_status_rsp_width_adapter_src_data),          //          .data
		.out_channel          (terminal_east_1_status_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (terminal_east_1_status_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (terminal_east_1_status_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (terminal_east_1_status_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (60),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (67),
		.IN_PKT_BURSTWRAP_L            (61),
		.IN_PKT_BURST_SIZE_H           (70),
		.IN_PKT_BURST_SIZE_L           (68),
		.IN_PKT_RESPONSE_STATUS_H      (105),
		.IN_PKT_RESPONSE_STATUS_L      (104),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (72),
		.IN_PKT_BURST_TYPE_L           (71),
		.IN_PKT_ORI_BURST_SIZE_L       (106),
		.IN_PKT_ORI_BURST_SIZE_H       (108),
		.IN_ST_DATA_W                  (109),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (88),
		.OUT_PKT_BURST_SIZE_L          (86),
		.OUT_PKT_RESPONSE_STATUS_H     (123),
		.OUT_PKT_RESPONSE_STATUS_L     (122),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (90),
		.OUT_PKT_BURST_TYPE_L          (89),
		.OUT_PKT_ORI_BURST_SIZE_L      (124),
		.OUT_PKT_ORI_BURST_SIZE_H      (126),
		.OUT_ST_DATA_W                 (127),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) terminal_east_0_status_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                              //       clk.clk
		.reset                (terminal_north_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (router_012_src_valid),                                       //      sink.valid
		.in_channel           (router_012_src_channel),                                     //          .channel
		.in_startofpacket     (router_012_src_startofpacket),                               //          .startofpacket
		.in_endofpacket       (router_012_src_endofpacket),                                 //          .endofpacket
		.in_ready             (router_012_src_ready),                                       //          .ready
		.in_data              (router_012_src_data),                                        //          .data
		.out_endofpacket      (terminal_east_0_status_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (terminal_east_0_status_rsp_width_adapter_src_data),          //          .data
		.out_channel          (terminal_east_0_status_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (terminal_east_0_status_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (terminal_east_0_status_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (terminal_east_0_status_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (60),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (67),
		.IN_PKT_BURSTWRAP_L            (61),
		.IN_PKT_BURST_SIZE_H           (70),
		.IN_PKT_BURST_SIZE_L           (68),
		.IN_PKT_RESPONSE_STATUS_H      (105),
		.IN_PKT_RESPONSE_STATUS_L      (104),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (72),
		.IN_PKT_BURST_TYPE_L           (71),
		.IN_PKT_ORI_BURST_SIZE_L       (106),
		.IN_PKT_ORI_BURST_SIZE_H       (108),
		.IN_ST_DATA_W                  (109),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (88),
		.OUT_PKT_BURST_SIZE_L          (86),
		.OUT_PKT_RESPONSE_STATUS_H     (123),
		.OUT_PKT_RESPONSE_STATUS_L     (122),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (90),
		.OUT_PKT_BURST_TYPE_L          (89),
		.OUT_PKT_ORI_BURST_SIZE_L      (124),
		.OUT_PKT_ORI_BURST_SIZE_H      (126),
		.OUT_ST_DATA_W                 (127),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) terminal_west_1_status_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                              //       clk.clk
		.reset                (terminal_north_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (router_013_src_valid),                                       //      sink.valid
		.in_channel           (router_013_src_channel),                                     //          .channel
		.in_startofpacket     (router_013_src_startofpacket),                               //          .startofpacket
		.in_endofpacket       (router_013_src_endofpacket),                                 //          .endofpacket
		.in_ready             (router_013_src_ready),                                       //          .ready
		.in_data              (router_013_src_data),                                        //          .data
		.out_endofpacket      (terminal_west_1_status_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (terminal_west_1_status_rsp_width_adapter_src_data),          //          .data
		.out_channel          (terminal_west_1_status_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (terminal_west_1_status_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (terminal_west_1_status_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (terminal_west_1_status_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (85),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (88),
		.IN_PKT_BURST_SIZE_L           (86),
		.IN_PKT_RESPONSE_STATUS_H      (123),
		.IN_PKT_RESPONSE_STATUS_L      (122),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (90),
		.IN_PKT_BURST_TYPE_L           (89),
		.IN_PKT_ORI_BURST_SIZE_L       (124),
		.IN_PKT_ORI_BURST_SIZE_H       (126),
		.IN_ST_DATA_W                  (127),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (60),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (70),
		.OUT_PKT_BURST_SIZE_L          (68),
		.OUT_PKT_RESPONSE_STATUS_H     (105),
		.OUT_PKT_RESPONSE_STATUS_L     (104),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (72),
		.OUT_PKT_BURST_TYPE_L          (71),
		.OUT_PKT_ORI_BURST_SIZE_L      (106),
		.OUT_PKT_ORI_BURST_SIZE_H      (108),
		.OUT_ST_DATA_W                 (109),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) node_0_processing_mem_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                             //       clk.clk
		.reset                (terminal_north_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                         //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                       //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                 //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                   //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                         //          .ready
		.in_data              (cmd_mux_src_data),                                          //          .data
		.out_endofpacket      (node_0_processing_mem_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (node_0_processing_mem_cmd_width_adapter_src_data),          //          .data
		.out_channel          (node_0_processing_mem_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (node_0_processing_mem_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (node_0_processing_mem_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (node_0_processing_mem_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (85),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (88),
		.IN_PKT_BURST_SIZE_L           (86),
		.IN_PKT_RESPONSE_STATUS_H      (123),
		.IN_PKT_RESPONSE_STATUS_L      (122),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (90),
		.IN_PKT_BURST_TYPE_L           (89),
		.IN_PKT_ORI_BURST_SIZE_L       (124),
		.IN_PKT_ORI_BURST_SIZE_H       (126),
		.IN_ST_DATA_W                  (127),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (60),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (70),
		.OUT_PKT_BURST_SIZE_L          (68),
		.OUT_PKT_RESPONSE_STATUS_H     (105),
		.OUT_PKT_RESPONSE_STATUS_L     (104),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (72),
		.OUT_PKT_BURST_TYPE_L          (71),
		.OUT_PKT_ORI_BURST_SIZE_L      (106),
		.OUT_PKT_ORI_BURST_SIZE_H      (108),
		.OUT_ST_DATA_W                 (109),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) node_1_processing_mem_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                             //       clk.clk
		.reset                (terminal_north_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                                     //      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                                   //          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                             //          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                               //          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                                     //          .ready
		.in_data              (cmd_mux_001_src_data),                                      //          .data
		.out_endofpacket      (node_1_processing_mem_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (node_1_processing_mem_cmd_width_adapter_src_data),          //          .data
		.out_channel          (node_1_processing_mem_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (node_1_processing_mem_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (node_1_processing_mem_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (node_1_processing_mem_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (85),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (88),
		.IN_PKT_BURST_SIZE_L           (86),
		.IN_PKT_RESPONSE_STATUS_H      (123),
		.IN_PKT_RESPONSE_STATUS_L      (122),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (90),
		.IN_PKT_BURST_TYPE_L           (89),
		.IN_PKT_ORI_BURST_SIZE_L       (124),
		.IN_PKT_ORI_BURST_SIZE_H       (126),
		.IN_ST_DATA_W                  (127),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (60),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (70),
		.OUT_PKT_BURST_SIZE_L          (68),
		.OUT_PKT_RESPONSE_STATUS_H     (105),
		.OUT_PKT_RESPONSE_STATUS_L     (104),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (72),
		.OUT_PKT_BURST_TYPE_L          (71),
		.OUT_PKT_ORI_BURST_SIZE_L      (106),
		.OUT_PKT_ORI_BURST_SIZE_H      (108),
		.OUT_ST_DATA_W                 (109),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) node_65536_processing_mem_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                 //       clk.clk
		.reset                (terminal_north_0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_valid             (cmd_mux_002_src_valid),                                         //      sink.valid
		.in_channel           (cmd_mux_002_src_channel),                                       //          .channel
		.in_startofpacket     (cmd_mux_002_src_startofpacket),                                 //          .startofpacket
		.in_endofpacket       (cmd_mux_002_src_endofpacket),                                   //          .endofpacket
		.in_ready             (cmd_mux_002_src_ready),                                         //          .ready
		.in_data              (cmd_mux_002_src_data),                                          //          .data
		.out_endofpacket      (node_65536_processing_mem_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (node_65536_processing_mem_cmd_width_adapter_src_data),          //          .data
		.out_channel          (node_65536_processing_mem_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (node_65536_processing_mem_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (node_65536_processing_mem_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (node_65536_processing_mem_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (85),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (88),
		.IN_PKT_BURST_SIZE_L           (86),
		.IN_PKT_RESPONSE_STATUS_H      (123),
		.IN_PKT_RESPONSE_STATUS_L      (122),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (90),
		.IN_PKT_BURST_TYPE_L           (89),
		.IN_PKT_ORI_BURST_SIZE_L       (124),
		.IN_PKT_ORI_BURST_SIZE_H       (126),
		.IN_ST_DATA_W                  (127),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (60),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (70),
		.OUT_PKT_BURST_SIZE_L          (68),
		.OUT_PKT_RESPONSE_STATUS_H     (105),
		.OUT_PKT_RESPONSE_STATUS_L     (104),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (72),
		.OUT_PKT_BURST_TYPE_L          (71),
		.OUT_PKT_ORI_BURST_SIZE_L      (106),
		.OUT_PKT_ORI_BURST_SIZE_H      (108),
		.OUT_ST_DATA_W                 (109),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) node_65537_processing_mem_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                 //       clk.clk
		.reset                (terminal_north_0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_valid             (cmd_mux_003_src_valid),                                         //      sink.valid
		.in_channel           (cmd_mux_003_src_channel),                                       //          .channel
		.in_startofpacket     (cmd_mux_003_src_startofpacket),                                 //          .startofpacket
		.in_endofpacket       (cmd_mux_003_src_endofpacket),                                   //          .endofpacket
		.in_ready             (cmd_mux_003_src_ready),                                         //          .ready
		.in_data              (cmd_mux_003_src_data),                                          //          .data
		.out_endofpacket      (node_65537_processing_mem_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (node_65537_processing_mem_cmd_width_adapter_src_data),          //          .data
		.out_channel          (node_65537_processing_mem_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (node_65537_processing_mem_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (node_65537_processing_mem_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (node_65537_processing_mem_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (85),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (88),
		.IN_PKT_BURST_SIZE_L           (86),
		.IN_PKT_RESPONSE_STATUS_H      (123),
		.IN_PKT_RESPONSE_STATUS_L      (122),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (90),
		.IN_PKT_BURST_TYPE_L           (89),
		.IN_PKT_ORI_BURST_SIZE_L       (124),
		.IN_PKT_ORI_BURST_SIZE_H       (126),
		.IN_ST_DATA_W                  (127),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (60),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (70),
		.OUT_PKT_BURST_SIZE_L          (68),
		.OUT_PKT_RESPONSE_STATUS_H     (105),
		.OUT_PKT_RESPONSE_STATUS_L     (104),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (72),
		.OUT_PKT_BURST_TYPE_L          (71),
		.OUT_PKT_ORI_BURST_SIZE_L      (106),
		.OUT_PKT_ORI_BURST_SIZE_H      (108),
		.OUT_ST_DATA_W                 (109),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) terminal_north_0_status_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                               //       clk.clk
		.reset                (terminal_north_0_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_valid             (cmd_mux_004_src_valid),                                       //      sink.valid
		.in_channel           (cmd_mux_004_src_channel),                                     //          .channel
		.in_startofpacket     (cmd_mux_004_src_startofpacket),                               //          .startofpacket
		.in_endofpacket       (cmd_mux_004_src_endofpacket),                                 //          .endofpacket
		.in_ready             (cmd_mux_004_src_ready),                                       //          .ready
		.in_data              (cmd_mux_004_src_data),                                        //          .data
		.out_endofpacket      (terminal_north_0_status_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (terminal_north_0_status_cmd_width_adapter_src_data),          //          .data
		.out_channel          (terminal_north_0_status_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (terminal_north_0_status_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (terminal_north_0_status_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (terminal_north_0_status_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                       // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (85),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (88),
		.IN_PKT_BURST_SIZE_L           (86),
		.IN_PKT_RESPONSE_STATUS_H      (123),
		.IN_PKT_RESPONSE_STATUS_L      (122),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (90),
		.IN_PKT_BURST_TYPE_L           (89),
		.IN_PKT_ORI_BURST_SIZE_L       (124),
		.IN_PKT_ORI_BURST_SIZE_H       (126),
		.IN_ST_DATA_W                  (127),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (60),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (70),
		.OUT_PKT_BURST_SIZE_L          (68),
		.OUT_PKT_RESPONSE_STATUS_H     (105),
		.OUT_PKT_RESPONSE_STATUS_L     (104),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (72),
		.OUT_PKT_BURST_TYPE_L          (71),
		.OUT_PKT_ORI_BURST_SIZE_L      (106),
		.OUT_PKT_ORI_BURST_SIZE_H      (108),
		.OUT_ST_DATA_W                 (109),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) terminal_north_1_status_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                               //       clk.clk
		.reset                (terminal_north_0_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_valid             (cmd_mux_005_src_valid),                                       //      sink.valid
		.in_channel           (cmd_mux_005_src_channel),                                     //          .channel
		.in_startofpacket     (cmd_mux_005_src_startofpacket),                               //          .startofpacket
		.in_endofpacket       (cmd_mux_005_src_endofpacket),                                 //          .endofpacket
		.in_ready             (cmd_mux_005_src_ready),                                       //          .ready
		.in_data              (cmd_mux_005_src_data),                                        //          .data
		.out_endofpacket      (terminal_north_1_status_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (terminal_north_1_status_cmd_width_adapter_src_data),          //          .data
		.out_channel          (terminal_north_1_status_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (terminal_north_1_status_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (terminal_north_1_status_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (terminal_north_1_status_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                       // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (85),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (88),
		.IN_PKT_BURST_SIZE_L           (86),
		.IN_PKT_RESPONSE_STATUS_H      (123),
		.IN_PKT_RESPONSE_STATUS_L      (122),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (90),
		.IN_PKT_BURST_TYPE_L           (89),
		.IN_PKT_ORI_BURST_SIZE_L       (124),
		.IN_PKT_ORI_BURST_SIZE_H       (126),
		.IN_ST_DATA_W                  (127),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (60),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (70),
		.OUT_PKT_BURST_SIZE_L          (68),
		.OUT_PKT_RESPONSE_STATUS_H     (105),
		.OUT_PKT_RESPONSE_STATUS_L     (104),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (72),
		.OUT_PKT_BURST_TYPE_L          (71),
		.OUT_PKT_ORI_BURST_SIZE_L      (106),
		.OUT_PKT_ORI_BURST_SIZE_H      (108),
		.OUT_ST_DATA_W                 (109),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) terminal_south_0_status_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                               //       clk.clk
		.reset                (terminal_north_0_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_valid             (cmd_mux_006_src_valid),                                       //      sink.valid
		.in_channel           (cmd_mux_006_src_channel),                                     //          .channel
		.in_startofpacket     (cmd_mux_006_src_startofpacket),                               //          .startofpacket
		.in_endofpacket       (cmd_mux_006_src_endofpacket),                                 //          .endofpacket
		.in_ready             (cmd_mux_006_src_ready),                                       //          .ready
		.in_data              (cmd_mux_006_src_data),                                        //          .data
		.out_endofpacket      (terminal_south_0_status_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (terminal_south_0_status_cmd_width_adapter_src_data),          //          .data
		.out_channel          (terminal_south_0_status_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (terminal_south_0_status_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (terminal_south_0_status_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (terminal_south_0_status_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                       // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (85),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (88),
		.IN_PKT_BURST_SIZE_L           (86),
		.IN_PKT_RESPONSE_STATUS_H      (123),
		.IN_PKT_RESPONSE_STATUS_L      (122),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (90),
		.IN_PKT_BURST_TYPE_L           (89),
		.IN_PKT_ORI_BURST_SIZE_L       (124),
		.IN_PKT_ORI_BURST_SIZE_H       (126),
		.IN_ST_DATA_W                  (127),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (60),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (70),
		.OUT_PKT_BURST_SIZE_L          (68),
		.OUT_PKT_RESPONSE_STATUS_H     (105),
		.OUT_PKT_RESPONSE_STATUS_L     (104),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (72),
		.OUT_PKT_BURST_TYPE_L          (71),
		.OUT_PKT_ORI_BURST_SIZE_L      (106),
		.OUT_PKT_ORI_BURST_SIZE_H      (108),
		.OUT_ST_DATA_W                 (109),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) terminal_south_1_status_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                               //       clk.clk
		.reset                (terminal_north_0_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_valid             (cmd_mux_007_src_valid),                                       //      sink.valid
		.in_channel           (cmd_mux_007_src_channel),                                     //          .channel
		.in_startofpacket     (cmd_mux_007_src_startofpacket),                               //          .startofpacket
		.in_endofpacket       (cmd_mux_007_src_endofpacket),                                 //          .endofpacket
		.in_ready             (cmd_mux_007_src_ready),                                       //          .ready
		.in_data              (cmd_mux_007_src_data),                                        //          .data
		.out_endofpacket      (terminal_south_1_status_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (terminal_south_1_status_cmd_width_adapter_src_data),          //          .data
		.out_channel          (terminal_south_1_status_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (terminal_south_1_status_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (terminal_south_1_status_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (terminal_south_1_status_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                       // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (85),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (88),
		.IN_PKT_BURST_SIZE_L           (86),
		.IN_PKT_RESPONSE_STATUS_H      (123),
		.IN_PKT_RESPONSE_STATUS_L      (122),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (90),
		.IN_PKT_BURST_TYPE_L           (89),
		.IN_PKT_ORI_BURST_SIZE_L       (124),
		.IN_PKT_ORI_BURST_SIZE_H       (126),
		.IN_ST_DATA_W                  (127),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (60),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (70),
		.OUT_PKT_BURST_SIZE_L          (68),
		.OUT_PKT_RESPONSE_STATUS_H     (105),
		.OUT_PKT_RESPONSE_STATUS_L     (104),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (72),
		.OUT_PKT_BURST_TYPE_L          (71),
		.OUT_PKT_ORI_BURST_SIZE_L      (106),
		.OUT_PKT_ORI_BURST_SIZE_H      (108),
		.OUT_ST_DATA_W                 (109),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) terminal_west_0_status_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                              //       clk.clk
		.reset                (terminal_north_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (cmd_mux_008_src_valid),                                      //      sink.valid
		.in_channel           (cmd_mux_008_src_channel),                                    //          .channel
		.in_startofpacket     (cmd_mux_008_src_startofpacket),                              //          .startofpacket
		.in_endofpacket       (cmd_mux_008_src_endofpacket),                                //          .endofpacket
		.in_ready             (cmd_mux_008_src_ready),                                      //          .ready
		.in_data              (cmd_mux_008_src_data),                                       //          .data
		.out_endofpacket      (terminal_west_0_status_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (terminal_west_0_status_cmd_width_adapter_src_data),          //          .data
		.out_channel          (terminal_west_0_status_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (terminal_west_0_status_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (terminal_west_0_status_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (terminal_west_0_status_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (85),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (88),
		.IN_PKT_BURST_SIZE_L           (86),
		.IN_PKT_RESPONSE_STATUS_H      (123),
		.IN_PKT_RESPONSE_STATUS_L      (122),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (90),
		.IN_PKT_BURST_TYPE_L           (89),
		.IN_PKT_ORI_BURST_SIZE_L       (124),
		.IN_PKT_ORI_BURST_SIZE_H       (126),
		.IN_ST_DATA_W                  (127),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (60),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (70),
		.OUT_PKT_BURST_SIZE_L          (68),
		.OUT_PKT_RESPONSE_STATUS_H     (105),
		.OUT_PKT_RESPONSE_STATUS_L     (104),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (72),
		.OUT_PKT_BURST_TYPE_L          (71),
		.OUT_PKT_ORI_BURST_SIZE_L      (106),
		.OUT_PKT_ORI_BURST_SIZE_H      (108),
		.OUT_ST_DATA_W                 (109),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) terminal_east_1_status_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                              //       clk.clk
		.reset                (terminal_north_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (cmd_mux_009_src_valid),                                      //      sink.valid
		.in_channel           (cmd_mux_009_src_channel),                                    //          .channel
		.in_startofpacket     (cmd_mux_009_src_startofpacket),                              //          .startofpacket
		.in_endofpacket       (cmd_mux_009_src_endofpacket),                                //          .endofpacket
		.in_ready             (cmd_mux_009_src_ready),                                      //          .ready
		.in_data              (cmd_mux_009_src_data),                                       //          .data
		.out_endofpacket      (terminal_east_1_status_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (terminal_east_1_status_cmd_width_adapter_src_data),          //          .data
		.out_channel          (terminal_east_1_status_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (terminal_east_1_status_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (terminal_east_1_status_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (terminal_east_1_status_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (85),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (88),
		.IN_PKT_BURST_SIZE_L           (86),
		.IN_PKT_RESPONSE_STATUS_H      (123),
		.IN_PKT_RESPONSE_STATUS_L      (122),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (90),
		.IN_PKT_BURST_TYPE_L           (89),
		.IN_PKT_ORI_BURST_SIZE_L       (124),
		.IN_PKT_ORI_BURST_SIZE_H       (126),
		.IN_ST_DATA_W                  (127),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (60),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (70),
		.OUT_PKT_BURST_SIZE_L          (68),
		.OUT_PKT_RESPONSE_STATUS_H     (105),
		.OUT_PKT_RESPONSE_STATUS_L     (104),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (72),
		.OUT_PKT_BURST_TYPE_L          (71),
		.OUT_PKT_ORI_BURST_SIZE_L      (106),
		.OUT_PKT_ORI_BURST_SIZE_H      (108),
		.OUT_ST_DATA_W                 (109),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) terminal_east_0_status_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                              //       clk.clk
		.reset                (terminal_north_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (cmd_mux_010_src_valid),                                      //      sink.valid
		.in_channel           (cmd_mux_010_src_channel),                                    //          .channel
		.in_startofpacket     (cmd_mux_010_src_startofpacket),                              //          .startofpacket
		.in_endofpacket       (cmd_mux_010_src_endofpacket),                                //          .endofpacket
		.in_ready             (cmd_mux_010_src_ready),                                      //          .ready
		.in_data              (cmd_mux_010_src_data),                                       //          .data
		.out_endofpacket      (terminal_east_0_status_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (terminal_east_0_status_cmd_width_adapter_src_data),          //          .data
		.out_channel          (terminal_east_0_status_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (terminal_east_0_status_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (terminal_east_0_status_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (terminal_east_0_status_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (85),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (88),
		.IN_PKT_BURST_SIZE_L           (86),
		.IN_PKT_RESPONSE_STATUS_H      (123),
		.IN_PKT_RESPONSE_STATUS_L      (122),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (90),
		.IN_PKT_BURST_TYPE_L           (89),
		.IN_PKT_ORI_BURST_SIZE_L       (124),
		.IN_PKT_ORI_BURST_SIZE_H       (126),
		.IN_ST_DATA_W                  (127),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (60),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (70),
		.OUT_PKT_BURST_SIZE_L          (68),
		.OUT_PKT_RESPONSE_STATUS_H     (105),
		.OUT_PKT_RESPONSE_STATUS_L     (104),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (72),
		.OUT_PKT_BURST_TYPE_L          (71),
		.OUT_PKT_ORI_BURST_SIZE_L      (106),
		.OUT_PKT_ORI_BURST_SIZE_H      (108),
		.OUT_ST_DATA_W                 (109),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) terminal_west_1_status_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                              //       clk.clk
		.reset                (terminal_north_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (cmd_mux_011_src_valid),                                      //      sink.valid
		.in_channel           (cmd_mux_011_src_channel),                                    //          .channel
		.in_startofpacket     (cmd_mux_011_src_startofpacket),                              //          .startofpacket
		.in_endofpacket       (cmd_mux_011_src_endofpacket),                                //          .endofpacket
		.in_ready             (cmd_mux_011_src_ready),                                      //          .ready
		.in_data              (cmd_mux_011_src_data),                                       //          .data
		.out_endofpacket      (terminal_west_1_status_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (terminal_west_1_status_cmd_width_adapter_src_data),          //          .data
		.out_channel          (terminal_west_1_status_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (terminal_west_1_status_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (terminal_west_1_status_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (terminal_west_1_status_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                      // (terminated)
	);

	dircc_system_rtl_counter_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (terminal_north_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (node_0_processing_mem_agent_rdata_fifo_out_data),    //     in_0.data
		.in_0_valid     (node_0_processing_mem_agent_rdata_fifo_out_valid),   //         .valid
		.in_0_ready     (node_0_processing_mem_agent_rdata_fifo_out_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                       //         .error
	);

	dircc_system_rtl_counter_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (terminal_north_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (node_1_processing_mem_agent_rdata_fifo_out_data),    //     in_0.data
		.in_0_valid     (node_1_processing_mem_agent_rdata_fifo_out_valid),   //         .valid
		.in_0_ready     (node_1_processing_mem_agent_rdata_fifo_out_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                   //         .error
	);

	dircc_system_rtl_counter_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (terminal_north_0_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (node_65536_processing_mem_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (node_65536_processing_mem_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (node_65536_processing_mem_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                     //         .error
	);

	dircc_system_rtl_counter_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_0_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (terminal_north_0_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (node_65537_processing_mem_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (node_65537_processing_mem_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (node_65537_processing_mem_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                     //         .error
	);

	dircc_system_rtl_counter_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_0_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (terminal_north_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (terminal_north_0_status_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (terminal_north_0_status_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (terminal_north_0_status_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                   //         .error
	);

	dircc_system_rtl_counter_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_0_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (terminal_north_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (terminal_north_1_status_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (terminal_north_1_status_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (terminal_north_1_status_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                   //         .error
	);

	dircc_system_rtl_counter_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_0_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (terminal_north_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (terminal_south_0_status_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (terminal_south_0_status_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (terminal_south_0_status_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                   //         .error
	);

	dircc_system_rtl_counter_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_0_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (terminal_north_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (terminal_south_1_status_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (terminal_south_1_status_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (terminal_south_1_status_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                   //         .error
	);

	dircc_system_rtl_counter_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_0_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (terminal_north_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (terminal_west_0_status_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (terminal_west_0_status_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (terminal_west_0_status_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                   //         .error
	);

	dircc_system_rtl_counter_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_0_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (terminal_north_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (terminal_east_1_status_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (terminal_east_1_status_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (terminal_east_1_status_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                   //         .error
	);

	dircc_system_rtl_counter_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (clk_0_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (terminal_north_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (terminal_east_0_status_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (terminal_east_0_status_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (terminal_east_0_status_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                   //         .error
	);

	dircc_system_rtl_counter_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (clk_0_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (terminal_north_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (terminal_west_1_status_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (terminal_west_1_status_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (terminal_west_1_status_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                   //         .error
	);

endmodule
